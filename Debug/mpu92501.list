
mpu92501.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  080097b8  080097b8  000197b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cf0  08009cf0  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  08009cf0  08009cf0  00019cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cf8  08009cf8  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cf8  08009cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cfc  08009cfc  00019cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  08009d00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000298  08009f94  00020298  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08009f94  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0d0  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207f  00000000  00000000  0002e394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00030418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00030f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017344  00000000  00000000  00031938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef67  00000000  00000000  00048c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089fb1  00000000  00000000  00057be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1b94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f78  00000000  00000000  000e1be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000298 	.word	0x20000298
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097a0 	.word	0x080097a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000029c 	.word	0x2000029c
 80001dc:	080097a0 	.word	0x080097a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2203      	movs	r2, #3
 8001008:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2203      	movs	r2, #3
 8001014:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2203      	movs	r2, #3
 8001026:	715a      	strb	r2, [r3, #5]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af04      	add	r7, sp, #16
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	460b      	mov	r3, r1
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	b29a      	uxth	r2, r3
 8001052:	8af9      	ldrh	r1, [r7, #22]
 8001054:	f241 3388 	movw	r3, #5000	; 0x1388
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	2302      	movs	r3, #2
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	f003 f919 	bl	800429c <HAL_I2C_Mem_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10b      	bne.n	8001088 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001070:	7d7b      	ldrb	r3, [r7, #21]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7d3b      	ldrb	r3, [r7, #20]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	801a      	strh	r2, [r3, #0]
		return true;
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <read_register16+0x56>
	} else
		return false;
 8001088:	2300      	movs	r3, #0

}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001092:	b590      	push	{r4, r7, lr}
 8001094:	b08b      	sub	sp, #44	; 0x2c
 8001096:	af04      	add	r7, sp, #16
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	461a      	mov	r2, r3
 800109e:	460b      	mov	r3, r1
 80010a0:	72fb      	strb	r3, [r7, #11]
 80010a2:	4613      	mov	r3, r2
 80010a4:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	7abb      	ldrb	r3, [r7, #10]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	8af9      	ldrh	r1, [r7, #22]
 80010bc:	f241 3488 	movw	r4, #5000	; 0x1388
 80010c0:	9402      	str	r4, [sp, #8]
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	f003 f8e7 	bl	800429c <HAL_I2C_Mem_Read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <read_data+0x46>
		return 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e000      	b.n	80010da <read_data+0x48>
	else
		return 1;
 80010d8:	2301      	movs	r3, #1

}
 80010da:	4618      	mov	r0, r3
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd90      	pop	{r4, r7, pc}

080010e2 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2188      	movs	r1, #136	; 0x88
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff9f 	bl	8001034 <read_register16>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d06f      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3302      	adds	r3, #2
 8001100:	461a      	mov	r2, r3
 8001102:	218a      	movs	r1, #138	; 0x8a
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff95 	bl	8001034 <read_register16>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d065      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3304      	adds	r3, #4
 8001114:	461a      	mov	r2, r3
 8001116:	218c      	movs	r1, #140	; 0x8c
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff8b 	bl	8001034 <read_register16>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d05b      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3306      	adds	r3, #6
 8001128:	461a      	mov	r2, r3
 800112a:	218e      	movs	r1, #142	; 0x8e
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff81 	bl	8001034 <read_register16>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d051      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3308      	adds	r3, #8
 800113c:	461a      	mov	r2, r3
 800113e:	2190      	movs	r1, #144	; 0x90
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff77 	bl	8001034 <read_register16>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d047      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	330a      	adds	r3, #10
 8001150:	461a      	mov	r2, r3
 8001152:	2192      	movs	r1, #146	; 0x92
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff6d 	bl	8001034 <read_register16>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d03d      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	330c      	adds	r3, #12
 8001164:	461a      	mov	r2, r3
 8001166:	2194      	movs	r1, #148	; 0x94
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff63 	bl	8001034 <read_register16>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d033      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	330e      	adds	r3, #14
 8001178:	461a      	mov	r2, r3
 800117a:	2196      	movs	r1, #150	; 0x96
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff59 	bl	8001034 <read_register16>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d029      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3310      	adds	r3, #16
 800118c:	461a      	mov	r2, r3
 800118e:	2198      	movs	r1, #152	; 0x98
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff4f 	bl	8001034 <read_register16>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01f      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3312      	adds	r3, #18
 80011a0:	461a      	mov	r2, r3
 80011a2:	219a      	movs	r1, #154	; 0x9a
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff45 	bl	8001034 <read_register16>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d015      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3314      	adds	r3, #20
 80011b4:	461a      	mov	r2, r3
 80011b6:	219c      	movs	r1, #156	; 0x9c
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff3b 	bl	8001034 <read_register16>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80011c8:	461a      	mov	r2, r3
 80011ca:	219e      	movs	r1, #158	; 0x9e
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff31 	bl	8001034 <read_register16>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <read_calibration_data+0xfa>

		return true;
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <read_calibration_data+0xfc>
	}

	return false;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f103 0218 	add.w	r2, r3, #24
 80011f4:	2301      	movs	r3, #1
 80011f6:	21a1      	movs	r1, #161	; 0xa1
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff4a 	bl	8001092 <read_data>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d14b      	bne.n	800129c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	331a      	adds	r3, #26
 8001208:	461a      	mov	r2, r3
 800120a:	21e1      	movs	r1, #225	; 0xe1
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff11 	bl	8001034 <read_register16>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d041      	beq.n	800129c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f103 021c 	add.w	r2, r3, #28
 800121e:	2301      	movs	r3, #1
 8001220:	21e3      	movs	r1, #227	; 0xe3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff35 	bl	8001092 <read_data>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d136      	bne.n	800129c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800122e:	f107 030e 	add.w	r3, r7, #14
 8001232:	461a      	mov	r2, r3
 8001234:	21e4      	movs	r1, #228	; 0xe4
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fefc 	bl	8001034 <read_register16>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d02c      	beq.n	800129c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	461a      	mov	r2, r3
 8001248:	21e5      	movs	r1, #229	; 0xe5
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fef2 	bl	8001034 <read_register16>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d022      	beq.n	800129c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800125c:	2301      	movs	r3, #1
 800125e:	21e7      	movs	r1, #231	; 0xe7
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff16 	bl	8001092 <read_data>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d117      	bne.n	800129c <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	b21b      	sxth	r3, r3
 8001272:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001276:	b21a      	sxth	r2, r3
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	121b      	asrs	r3, r3, #8
 800127c:	b21b      	sxth	r3, r3
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21a      	sxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	b29b      	uxth	r3, r3
 8001292:	b21a      	sxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	841a      	strh	r2, [r3, #32]

		return true;
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <read_hum_calibration_data+0xb8>
	}

	return false;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b088      	sub	sp, #32
 80012aa:	af04      	add	r7, sp, #16
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	70fb      	strb	r3, [r7, #3]
 80012b2:	4613      	mov	r3, r2
 80012b4:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	89f9      	ldrh	r1, [r7, #14]
 80012c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	1cbb      	adds	r3, r7, #2
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	f002 fee6 	bl	80040a8 <HAL_I2C_Mem_Write>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <write_register8+0x40>
		return false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <write_register8+0x42>
	else
		return true;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012fe:	2b76      	cmp	r3, #118	; 0x76
 8001300:	d005      	beq.n	800130e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001306:	2b77      	cmp	r3, #119	; 0x77
 8001308:	d001      	beq.n	800130e <bmp280_init+0x1e>

		return false;
 800130a:	2300      	movs	r3, #0
 800130c:	e099      	b.n	8001442 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001314:	2301      	movs	r3, #1
 8001316:	21d0      	movs	r1, #208	; 0xd0
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff feba 	bl	8001092 <read_data>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <bmp280_init+0x38>
		return false;
 8001324:	2300      	movs	r3, #0
 8001326:	e08c      	b.n	8001442 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800132e:	2b58      	cmp	r3, #88	; 0x58
 8001330:	d006      	beq.n	8001340 <bmp280_init+0x50>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001338:	2b60      	cmp	r3, #96	; 0x60
 800133a:	d001      	beq.n	8001340 <bmp280_init+0x50>

		return false;
 800133c:	2300      	movs	r3, #0
 800133e:	e080      	b.n	8001442 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001340:	22b6      	movs	r2, #182	; 0xb6
 8001342:	21e0      	movs	r1, #224	; 0xe0
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ffae 	bl	80012a6 <write_register8>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <bmp280_init+0x64>
		return false;
 8001350:	2300      	movs	r3, #0
 8001352:	e076      	b.n	8001442 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001354:	f107 020c 	add.w	r2, r7, #12
 8001358:	2301      	movs	r3, #1
 800135a:	21f3      	movs	r1, #243	; 0xf3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fe98 	bl	8001092 <read_data>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f5      	bne.n	8001354 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001368:	7b3b      	ldrb	r3, [r7, #12]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff feb5 	bl	80010e2 <read_calibration_data>
 8001378:	4603      	mov	r3, r0
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d100      	bne.n	8001386 <bmp280_init+0x96>
 8001384:	e001      	b.n	800138a <bmp280_init+0x9a>
		return false;
 8001386:	2300      	movs	r3, #0
 8001388:	e05b      	b.n	8001442 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001390:	2b60      	cmp	r3, #96	; 0x60
 8001392:	d10a      	bne.n	80013aa <bmp280_init+0xba>
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff26 	bl	80011e6 <read_hum_calibration_data>
 800139a:	4603      	mov	r3, r0
 800139c:	f083 0301 	eor.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <bmp280_init+0xba>
		return false;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e04b      	b.n	8001442 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	795b      	ldrb	r3, [r3, #5]
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	b25a      	sxtb	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	461a      	mov	r2, r3
 80013c4:	21f5      	movs	r1, #245	; 0xf5
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff6d 	bl	80012a6 <write_register8>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <bmp280_init+0xe6>
		return false;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e035      	b.n	8001442 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d102      	bne.n	80013e4 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	78db      	ldrb	r3, [r3, #3]
 80013e8:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	789b      	ldrb	r3, [r3, #2]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001402:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800140a:	2b60      	cmp	r3, #96	; 0x60
 800140c:	d10d      	bne.n	800142a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001414:	7b7b      	ldrb	r3, [r7, #13]
 8001416:	461a      	mov	r2, r3
 8001418:	21f2      	movs	r1, #242	; 0xf2
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff43 	bl	80012a6 <write_register8>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <bmp280_init+0x13a>
			return false;
 8001426:	2300      	movs	r3, #0
 8001428:	e00b      	b.n	8001442 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	461a      	mov	r2, r3
 800142e:	21f4      	movs	r1, #244	; 0xf4
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff38 	bl	80012a6 <write_register8>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <bmp280_init+0x150>
		return false;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <bmp280_init+0x152>
	}

	return true;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800144a:	b480      	push	{r7}
 800144c:	b087      	sub	sp, #28
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	10da      	asrs	r2, r3, #3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001468:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800146c:	12db      	asrs	r3, r3, #11
 800146e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	111b      	asrs	r3, r3, #4
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	8812      	ldrh	r2, [r2, #0]
 8001478:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	1112      	asrs	r2, r2, #4
 800147e:	68f9      	ldr	r1, [r7, #12]
 8001480:	8809      	ldrh	r1, [r1, #0]
 8001482:	1a52      	subs	r2, r2, r1
 8001484:	fb02 f303 	mul.w	r3, r2, r3
 8001488:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001490:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001494:	139b      	asrs	r3, r3, #14
 8001496:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	441a      	add	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3380      	adds	r3, #128	; 0x80
 80014ae:	121b      	asrs	r3, r3, #8
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80014bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014c0:	b0cc      	sub	sp, #304	; 0x130
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80014c8:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80014cc:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80014d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014d4:	17da      	asrs	r2, r3, #31
 80014d6:	461c      	mov	r4, r3
 80014d8:	4615      	mov	r5, r2
 80014da:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014de:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 80014e2:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80014e6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014ee:	fb03 f102 	mul.w	r1, r3, r2
 80014f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	18ca      	adds	r2, r1, r3
 8001500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001504:	fba3 8903 	umull	r8, r9, r3, r3
 8001508:	eb02 0309 	add.w	r3, r2, r9
 800150c:	4699      	mov	r9, r3
 800150e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001512:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001516:	b21b      	sxth	r3, r3
 8001518:	17da      	asrs	r2, r3, #31
 800151a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800151e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001522:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001526:	4603      	mov	r3, r0
 8001528:	fb03 f209 	mul.w	r2, r3, r9
 800152c:	460b      	mov	r3, r1
 800152e:	fb08 f303 	mul.w	r3, r8, r3
 8001532:	4413      	add	r3, r2
 8001534:	4602      	mov	r2, r0
 8001536:	fba8 1202 	umull	r1, r2, r8, r2
 800153a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800153e:	460a      	mov	r2, r1
 8001540:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001544:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001548:	4413      	add	r3, r2
 800154a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800154e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001552:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001556:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800155a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800155e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001562:	b21b      	sxth	r3, r3
 8001564:	17da      	asrs	r2, r3, #31
 8001566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800156a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800156e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001572:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001576:	462a      	mov	r2, r5
 8001578:	fb02 f203 	mul.w	r2, r2, r3
 800157c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001580:	4621      	mov	r1, r4
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	441a      	add	r2, r3
 8001588:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800158c:	4621      	mov	r1, r4
 800158e:	fba3 1301 	umull	r1, r3, r3, r1
 8001592:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001596:	460b      	mov	r3, r1
 8001598:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800159c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015b2:	462b      	mov	r3, r5
 80015b4:	0459      	lsls	r1, r3, #17
 80015b6:	4623      	mov	r3, r4
 80015b8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80015bc:	4623      	mov	r3, r4
 80015be:	0458      	lsls	r0, r3, #17
 80015c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015c4:	1814      	adds	r4, r2, r0
 80015c6:	643c      	str	r4, [r7, #64]	; 0x40
 80015c8:	414b      	adcs	r3, r1
 80015ca:	647b      	str	r3, [r7, #68]	; 0x44
 80015cc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80015d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80015d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	17da      	asrs	r2, r3, #31
 80015e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015f4:	00d9      	lsls	r1, r3, #3
 80015f6:	2000      	movs	r0, #0
 80015f8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015fc:	1814      	adds	r4, r2, r0
 80015fe:	63bc      	str	r4, [r7, #56]	; 0x38
 8001600:	414b      	adcs	r3, r1
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001604:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001608:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800160c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001610:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001614:	fb03 f102 	mul.w	r1, r3, r2
 8001618:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800161c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	18ca      	adds	r2, r1, r3
 8001626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800162a:	fba3 1303 	umull	r1, r3, r3, r3
 800162e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001632:	460b      	mov	r3, r1
 8001634:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001646:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800164a:	b21b      	sxth	r3, r3
 800164c:	17da      	asrs	r2, r3, #31
 800164e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001656:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800165a:	462b      	mov	r3, r5
 800165c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001660:	4642      	mov	r2, r8
 8001662:	fb02 f203 	mul.w	r2, r2, r3
 8001666:	464b      	mov	r3, r9
 8001668:	4621      	mov	r1, r4
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	4622      	mov	r2, r4
 8001672:	4641      	mov	r1, r8
 8001674:	fba2 1201 	umull	r1, r2, r2, r1
 8001678:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800167c:	460a      	mov	r2, r1
 800167e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001682:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001686:	4413      	add	r3, r2
 8001688:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800168c:	f04f 0000 	mov.w	r0, #0
 8001690:	f04f 0100 	mov.w	r1, #0
 8001694:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001698:	4623      	mov	r3, r4
 800169a:	0a18      	lsrs	r0, r3, #8
 800169c:	462b      	mov	r3, r5
 800169e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016a2:	462b      	mov	r3, r5
 80016a4:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80016a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016b6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016be:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80016c2:	464a      	mov	r2, r9
 80016c4:	fb02 f203 	mul.w	r2, r2, r3
 80016c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016cc:	4644      	mov	r4, r8
 80016ce:	fb04 f303 	mul.w	r3, r4, r3
 80016d2:	441a      	add	r2, r3
 80016d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016d8:	4644      	mov	r4, r8
 80016da:	fba3 4304 	umull	r4, r3, r3, r4
 80016de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016e2:	4623      	mov	r3, r4
 80016e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016ec:	18d3      	adds	r3, r2, r3
 80016ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016fe:	464c      	mov	r4, r9
 8001700:	0323      	lsls	r3, r4, #12
 8001702:	4644      	mov	r4, r8
 8001704:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001708:	4644      	mov	r4, r8
 800170a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800170c:	1884      	adds	r4, r0, r2
 800170e:	633c      	str	r4, [r7, #48]	; 0x30
 8001710:	eb41 0303 	adc.w	r3, r1, r3
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
 8001716:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800171a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800171e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001722:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001726:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800172a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800172e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001732:	88db      	ldrh	r3, [r3, #6]
 8001734:	b29b      	uxth	r3, r3
 8001736:	2200      	movs	r2, #0
 8001738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800173c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001740:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001744:	462b      	mov	r3, r5
 8001746:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800174a:	4642      	mov	r2, r8
 800174c:	fb02 f203 	mul.w	r2, r2, r3
 8001750:	464b      	mov	r3, r9
 8001752:	4621      	mov	r1, r4
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	4622      	mov	r2, r4
 800175c:	4641      	mov	r1, r8
 800175e:	fba2 1201 	umull	r1, r2, r2, r1
 8001762:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001766:	460a      	mov	r2, r1
 8001768:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800176c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001770:	4413      	add	r3, r2
 8001772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001782:	4629      	mov	r1, r5
 8001784:	104a      	asrs	r2, r1, #1
 8001786:	4629      	mov	r1, r5
 8001788:	17cb      	asrs	r3, r1, #31
 800178a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 800178e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001792:	4313      	orrs	r3, r2
 8001794:	d101      	bne.n	800179a <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001796:	2300      	movs	r3, #0
 8001798:	e148      	b.n	8001a2c <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800179a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800179e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80017a2:	17da      	asrs	r2, r3, #31
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017a8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80017b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80017b4:	105b      	asrs	r3, r3, #1
 80017b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80017be:	07db      	lsls	r3, r3, #31
 80017c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017c8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017cc:	4621      	mov	r1, r4
 80017ce:	1a89      	subs	r1, r1, r2
 80017d0:	67b9      	str	r1, [r7, #120]	; 0x78
 80017d2:	4629      	mov	r1, r5
 80017d4:	eb61 0303 	sbc.w	r3, r1, r3
 80017d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017de:	4622      	mov	r2, r4
 80017e0:	462b      	mov	r3, r5
 80017e2:	1891      	adds	r1, r2, r2
 80017e4:	6239      	str	r1, [r7, #32]
 80017e6:	415b      	adcs	r3, r3
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ee:	4621      	mov	r1, r4
 80017f0:	1851      	adds	r1, r2, r1
 80017f2:	61b9      	str	r1, [r7, #24]
 80017f4:	4629      	mov	r1, r5
 80017f6:	414b      	adcs	r3, r1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001806:	4649      	mov	r1, r9
 8001808:	018b      	lsls	r3, r1, #6
 800180a:	4641      	mov	r1, r8
 800180c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001810:	4641      	mov	r1, r8
 8001812:	018a      	lsls	r2, r1, #6
 8001814:	4641      	mov	r1, r8
 8001816:	1889      	adds	r1, r1, r2
 8001818:	6139      	str	r1, [r7, #16]
 800181a:	4649      	mov	r1, r9
 800181c:	eb43 0101 	adc.w	r1, r3, r1
 8001820:	6179      	str	r1, [r7, #20]
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800182e:	4649      	mov	r1, r9
 8001830:	008b      	lsls	r3, r1, #2
 8001832:	4641      	mov	r1, r8
 8001834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001838:	4641      	mov	r1, r8
 800183a:	008a      	lsls	r2, r1, #2
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	4603      	mov	r3, r0
 8001842:	4622      	mov	r2, r4
 8001844:	189b      	adds	r3, r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	460b      	mov	r3, r1
 800184a:	462a      	mov	r2, r5
 800184c:	eb42 0303 	adc.w	r3, r2, r3
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800185e:	4649      	mov	r1, r9
 8001860:	008b      	lsls	r3, r1, #2
 8001862:	4641      	mov	r1, r8
 8001864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001868:	4641      	mov	r1, r8
 800186a:	008a      	lsls	r2, r1, #2
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	4603      	mov	r3, r0
 8001872:	4622      	mov	r2, r4
 8001874:	189b      	adds	r3, r3, r2
 8001876:	673b      	str	r3, [r7, #112]	; 0x70
 8001878:	462b      	mov	r3, r5
 800187a:	460a      	mov	r2, r1
 800187c:	eb42 0303 	adc.w	r3, r2, r3
 8001880:	677b      	str	r3, [r7, #116]	; 0x74
 8001882:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001886:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800188a:	f7ff f9e5 	bl	8000c58 <__aeabi_ldivmod>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800189a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	17da      	asrs	r2, r3, #31
 80018a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80018a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018a6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018aa:	f04f 0000 	mov.w	r0, #0
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	0b50      	lsrs	r0, r2, #13
 80018b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018b8:	1359      	asrs	r1, r3, #13
 80018ba:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018be:	462b      	mov	r3, r5
 80018c0:	fb00 f203 	mul.w	r2, r0, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	fb03 f301 	mul.w	r3, r3, r1
 80018ca:	4413      	add	r3, r2
 80018cc:	4622      	mov	r2, r4
 80018ce:	fba2 1200 	umull	r1, r2, r2, r0
 80018d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018d6:	460a      	mov	r2, r1
 80018d8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018e0:	4413      	add	r3, r2
 80018e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	0b50      	lsrs	r0, r2, #13
 80018f4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018f8:	1359      	asrs	r1, r3, #13
 80018fa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018fe:	462b      	mov	r3, r5
 8001900:	fb00 f203 	mul.w	r2, r0, r3
 8001904:	4623      	mov	r3, r4
 8001906:	fb03 f301 	mul.w	r3, r3, r1
 800190a:	4413      	add	r3, r2
 800190c:	4622      	mov	r2, r4
 800190e:	fba2 1200 	umull	r1, r2, r2, r0
 8001912:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001916:	460a      	mov	r2, r1
 8001918:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800191c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001920:	4413      	add	r3, r2
 8001922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001932:	4621      	mov	r1, r4
 8001934:	0e4a      	lsrs	r2, r1, #25
 8001936:	4629      	mov	r1, r5
 8001938:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800193c:	4629      	mov	r1, r5
 800193e:	164b      	asrs	r3, r1, #25
 8001940:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001948:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800194c:	b21b      	sxth	r3, r3
 800194e:	17da      	asrs	r2, r3, #31
 8001950:	663b      	str	r3, [r7, #96]	; 0x60
 8001952:	667a      	str	r2, [r7, #100]	; 0x64
 8001954:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001958:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800195c:	462a      	mov	r2, r5
 800195e:	fb02 f203 	mul.w	r2, r2, r3
 8001962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001966:	4621      	mov	r1, r4
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001972:	4621      	mov	r1, r4
 8001974:	fba2 1201 	umull	r1, r2, r2, r1
 8001978:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800197c:	460a      	mov	r2, r1
 800197e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001982:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001986:	4413      	add	r3, r2
 8001988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001998:	4621      	mov	r1, r4
 800199a:	0cca      	lsrs	r2, r1, #19
 800199c:	4629      	mov	r1, r5
 800199e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019a2:	4629      	mov	r1, r5
 80019a4:	14cb      	asrs	r3, r1, #19
 80019a6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80019aa:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80019ae:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80019b2:	1884      	adds	r4, r0, r2
 80019b4:	65bc      	str	r4, [r7, #88]	; 0x58
 80019b6:	eb41 0303 	adc.w	r3, r1, r3
 80019ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019c0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019c4:	4621      	mov	r1, r4
 80019c6:	1889      	adds	r1, r1, r2
 80019c8:	6539      	str	r1, [r7, #80]	; 0x50
 80019ca:	4629      	mov	r1, r5
 80019cc:	eb43 0101 	adc.w	r1, r3, r1
 80019d0:	6579      	str	r1, [r7, #84]	; 0x54
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019de:	4623      	mov	r3, r4
 80019e0:	0a18      	lsrs	r0, r3, #8
 80019e2:	462b      	mov	r3, r5
 80019e4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019e8:	462b      	mov	r3, r5
 80019ea:	1219      	asrs	r1, r3, #8
 80019ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019f0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	17da      	asrs	r2, r3, #31
 80019f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80019fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a08:	464c      	mov	r4, r9
 8001a0a:	0123      	lsls	r3, r4, #4
 8001a0c:	4644      	mov	r4, r8
 8001a0e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a12:	4644      	mov	r4, r8
 8001a14:	0122      	lsls	r2, r4, #4
 8001a16:	1884      	adds	r4, r0, r2
 8001a18:	603c      	str	r4, [r7, #0]
 8001a1a:	eb41 0303 	adc.w	r3, r1, r3
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a24:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001a28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001a32:	46bd      	mov	sp, r7
 8001a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a38 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a4a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	039a      	lsls	r2, r3, #14
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a56:	051b      	lsls	r3, r3, #20
 8001a58:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a60:	4619      	mov	r1, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a6e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001a76:	4611      	mov	r1, r2
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	fb01 f202 	mul.w	r2, r1, r2
 8001a7e:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	7f09      	ldrb	r1, [r1, #28]
 8001a84:	4608      	mov	r0, r1
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	fb00 f101 	mul.w	r1, r0, r1
 8001a8c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a8e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a92:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a96:	1292      	asrs	r2, r2, #10
 8001a98:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001aa2:	fb01 f202 	mul.w	r2, r1, r2
 8001aa6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001aaa:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	13db      	asrs	r3, r3, #15
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	13d2      	asrs	r2, r2, #15
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	7e12      	ldrb	r2, [r2, #24]
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ad6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ade:	bfa8      	it	ge
 8001ae0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001ae4:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	131b      	asrs	r3, r3, #12
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b08c      	sub	sp, #48	; 0x30
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b0a:	2b60      	cmp	r3, #96	; 0x60
 8001b0c:	d007      	beq.n	8001b1e <bmp280_read_fixed+0x28>
		if (humidity)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <bmp280_read_fixed+0x32>
 8001b24:	2308      	movs	r3, #8
 8001b26:	e000      	b.n	8001b2a <bmp280_read_fixed+0x34>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f107 0218 	add.w	r2, r7, #24
 8001b34:	21f7      	movs	r1, #247	; 0xf7
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff faab 	bl	8001092 <read_data>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <bmp280_read_fixed+0x50>
		return false;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e038      	b.n	8001bb8 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001b46:	7e3b      	ldrb	r3, [r7, #24]
 8001b48:	031a      	lsls	r2, r3, #12
 8001b4a:	7e7b      	ldrb	r3, [r7, #25]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	7eba      	ldrb	r2, [r7, #26]
 8001b52:	0912      	lsrs	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	4313      	orrs	r3, r2
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001b5a:	7efb      	ldrb	r3, [r7, #27]
 8001b5c:	031a      	lsls	r2, r3, #12
 8001b5e:	7f3b      	ldrb	r3, [r7, #28]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4313      	orrs	r3, r2
 8001b64:	7f7a      	ldrb	r2, [r7, #29]
 8001b66:	0912      	lsrs	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	461a      	mov	r2, r3
 8001b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fc67 	bl	800144a <compensate_temperature>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	461a      	mov	r2, r3
 8001b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff fc97 	bl	80014bc <compensate_pressure>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b9a:	7fbb      	ldrb	r3, [r7, #30]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	7ffa      	ldrb	r2, [r7, #31]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	6a39      	ldr	r1, [r7, #32]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7ff ff44 	bl	8001a38 <compensate_humidity>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3730      	adds	r7, #48	; 0x30
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <bmp280_read_float+0x1a>
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	e000      	b.n	8001bdc <bmp280_read_float+0x1c>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f107 0218 	add.w	r2, r7, #24
 8001be0:	f107 011c 	add.w	r1, r7, #28
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff ff86 	bl	8001af6 <bmp280_read_fixed>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d019      	beq.n	8001c24 <bmp280_read_float+0x64>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfa:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001c30 <bmp280_read_float+0x70>
 8001bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c12:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001c34 <bmp280_read_float+0x74>
 8001c16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
		//if (humidity)
			//*humidity = (float) fixed_humidity / 1024;
		return true;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <bmp280_read_float+0x66>
	}

	return false;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	42c80000 	.word	0x42c80000
 8001c34:	43800000 	.word	0x43800000

08001c38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_GPIO_Init+0x4c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <MX_GPIO_Init+0x4c>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <MX_GPIO_Init+0x4c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_GPIO_Init+0x4c>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <MX_GPIO_Init+0x4c>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_GPIO_Init+0x4c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]

}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800

08001c88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <MX_I2C1_Init+0x54>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x58>)
 8001c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc6:	f001 fd87 	bl	80037d8 <HAL_I2C_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd0:	f000 fcd7 	bl	8002682 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200002b4 	.word	0x200002b4
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	000186a0 	.word	0x000186a0

08001ce4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_I2C_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12b      	bne.n	8001d5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d26:	2312      	movs	r3, #18
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d32:	2304      	movs	r3, #4
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <HAL_I2C_MspInit+0x8c>)
 8001d3e:	f001 fbc7 	bl	80034d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020400 	.word	0x40020400
 8001d74:	00000000 	.word	0x00000000

08001d78 <main>:


void SystemClock_Config(void);

int main(void)
{
 8001d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d7c:	b098      	sub	sp, #96	; 0x60
 8001d7e:	af02      	add	r7, sp, #8
	  HAL_Init();
 8001d80:	f001 fa2a 	bl	80031d8 <HAL_Init>
	  sprintf((char *)Data, "BMP280 initialization failed\n");
 8001d84:	499e      	ldr	r1, [pc, #632]	; (8002000 <main+0x288>)
 8001d86:	489f      	ldr	r0, [pc, #636]	; (8002004 <main+0x28c>)
 8001d88:	f004 ff3e 	bl	8006c08 <siprintf>
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001d8c:	4b9e      	ldr	r3, [pc, #632]	; (8002008 <main+0x290>)
 8001d8e:	881a      	ldrh	r2, [r3, #0]
 8001d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d94:	499b      	ldr	r1, [pc, #620]	; (8002004 <main+0x28c>)
 8001d96:	489d      	ldr	r0, [pc, #628]	; (800200c <main+0x294>)
 8001d98:	f003 ff25 	bl	8005be6 <HAL_UART_Transmit>
	  SystemClock_Config();
 8001d9c:	f000 fab6 	bl	800230c <SystemClock_Config>
	  MX_GPIO_Init();
 8001da0:	f7ff ff4a 	bl	8001c38 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 8001da4:	f001 f97c 	bl	80030a0 <MX_USART2_UART_Init>
	  MX_I2C1_Init();
 8001da8:	f7ff ff6e 	bl	8001c88 <MX_I2C1_Init>
	  MPU9250_Init();
 8001dac:	f000 fdc0 	bl	8002930 <MPU9250_Init>
	  MPU9250_SetAccelRange(ACCEL_RANGE_2G);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f000 fed3 	bl	8002b5c <MPU9250_SetAccelRange>
	  MPU9250_SetGyroRange(GYRO_RANGE_250DPS);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 fee2 	bl	8002b80 <MPU9250_SetGyroRange>
	  MPU9250_SetDLPFBandwidth(DLPF_BANDWIDTH_184HZ);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f000 fef1 	bl	8002ba4 <MPU9250_SetDLPFBandwidth>
	  MPU9250_SetSampleRateDivider(LP_ACCEL_ODR_0_24HZ);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f000 ff0a 	bl	8002bdc <MPU9250_SetSampleRateDivider>

	  bmp280_init_default_params(&bmp280.params);
 8001dc8:	4891      	ldr	r0, [pc, #580]	; (8002010 <main+0x298>)
 8001dca:	f7ff f917 	bl	8000ffc <bmp280_init_default_params>
	  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001dce:	4b91      	ldr	r3, [pc, #580]	; (8002014 <main+0x29c>)
 8001dd0:	2276      	movs	r2, #118	; 0x76
 8001dd2:	849a      	strh	r2, [r3, #36]	; 0x24
	  bmp280.i2c = &hi2c1;
 8001dd4:	4b8f      	ldr	r3, [pc, #572]	; (8002014 <main+0x29c>)
 8001dd6:	4a90      	ldr	r2, [pc, #576]	; (8002018 <main+0x2a0>)
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28

	  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001dda:	e013      	b.n	8001e04 <main+0x8c>
	  		size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8001ddc:	4988      	ldr	r1, [pc, #544]	; (8002000 <main+0x288>)
 8001dde:	4889      	ldr	r0, [pc, #548]	; (8002004 <main+0x28c>)
 8001de0:	f004 ff12 	bl	8006c08 <siprintf>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	4b87      	ldr	r3, [pc, #540]	; (8002008 <main+0x290>)
 8001dea:	801a      	strh	r2, [r3, #0]
	  		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001dec:	4b86      	ldr	r3, [pc, #536]	; (8002008 <main+0x290>)
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df4:	4983      	ldr	r1, [pc, #524]	; (8002004 <main+0x28c>)
 8001df6:	4885      	ldr	r0, [pc, #532]	; (800200c <main+0x294>)
 8001df8:	f003 fef5 	bl	8005be6 <HAL_UART_Transmit>
	  		HAL_Delay(2000);
 8001dfc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e00:	f001 fa5c 	bl	80032bc <HAL_Delay>
	  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001e04:	4982      	ldr	r1, [pc, #520]	; (8002010 <main+0x298>)
 8001e06:	4883      	ldr	r0, [pc, #524]	; (8002014 <main+0x29c>)
 8001e08:	f7ff fa72 	bl	80012f0 <bmp280_init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e1      	bne.n	8001ddc <main+0x64>
	  	}
	  	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001e18:	4b7e      	ldr	r3, [pc, #504]	; (8002014 <main+0x29c>)
 8001e1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e1e:	2b60      	cmp	r3, #96	; 0x60
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8001e2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <main+0xbe>
 8001e32:	4b7a      	ldr	r3, [pc, #488]	; (800201c <main+0x2a4>)
 8001e34:	e000      	b.n	8001e38 <main+0xc0>
 8001e36:	4b7a      	ldr	r3, [pc, #488]	; (8002020 <main+0x2a8>)
 8001e38:	461a      	mov	r2, r3
 8001e3a:	497a      	ldr	r1, [pc, #488]	; (8002024 <main+0x2ac>)
 8001e3c:	4871      	ldr	r0, [pc, #452]	; (8002004 <main+0x28c>)
 8001e3e:	f004 fee3 	bl	8006c08 <siprintf>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b70      	ldr	r3, [pc, #448]	; (8002008 <main+0x290>)
 8001e48:	801a      	strh	r2, [r3, #0]
	  	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <main+0x290>)
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	496c      	ldr	r1, [pc, #432]	; (8002004 <main+0x28c>)
 8001e54:	486d      	ldr	r0, [pc, #436]	; (800200c <main+0x294>)
 8001e56:	f003 fec6 	bl	8005be6 <HAL_UART_Transmit>

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
		  MPU9250_GetData(AccData,MagData,GyroData);
 8001e5a:	4a73      	ldr	r2, [pc, #460]	; (8002028 <main+0x2b0>)
 8001e5c:	4973      	ldr	r1, [pc, #460]	; (800202c <main+0x2b4>)
 8001e5e:	4874      	ldr	r0, [pc, #464]	; (8002030 <main+0x2b8>)
 8001e60:	f000 ff1e 	bl	8002ca0 <MPU9250_GetData>
		  //(float)AccData[0],(float)AccData[1],(float)AccData[2]
		  //(float)MagData[0],(float)MagData[1],(float)MagData[2]
		  //(float)GyroData[0],(float)GyroData[1],(float)GyroData[2]
		  //sprintf(data,"X:%.2f    Y:%.2f\r\n",);
		  float accxraw=AccData[0];
 8001e64:	4b72      	ldr	r3, [pc, #456]	; (8002030 <main+0x2b8>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		  float accyraw=AccData[1];
 8001e76:	4b6e      	ldr	r3, [pc, #440]	; (8002030 <main+0x2b8>)
 8001e78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e84:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		  float acczraw=AccData[2];
 8001e88:	4b69      	ldr	r3, [pc, #420]	; (8002030 <main+0x2b8>)
 8001e8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		  float gyroxraw=GyroData[0];
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <main+0x2b0>)
 8001e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		  float gyroyraw=GyroData[1];
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <main+0x2b0>)
 8001eae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		  float gyrozraw=GyroData[2];
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <main+0x2b0>)
 8001ec0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ec4:	ee07 3a90 	vmov	s15, r3
 8001ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ecc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		  float ax=accxraw/16384.0;
 8001ed0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ed4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002034 <main+0x2bc>
 8001ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001edc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  float ay=accyraw/16384.0;
 8001ee0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001ee4:	eddf 6a53 	vldr	s13, [pc, #332]	; 8002034 <main+0x2bc>
 8001ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		  float az=acczraw/Accel_Z_corrector;
 8001ef0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ef2:	f7fe fb31 	bl	8000558 <__aeabi_f2d>
 8001ef6:	a33e      	add	r3, pc, #248	; (adr r3, 8001ff0 <main+0x278>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fcae 	bl	800085c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fe56 	bl	8000bb8 <__aeabi_d2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28

		  float gx = gyroxraw / 131.0;
 8001f10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001f14:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002038 <main+0x2c0>
 8001f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		  float gy = gyroyraw / 131.0;
 8001f20:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f24:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002038 <main+0x2c0>
 8001f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2c:	edc7 7a08 	vstr	s15, [r7, #32]
		  float gz = gyrozraw / 131.0;
 8001f30:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001f34:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002038 <main+0x2c0>
 8001f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3c:	edc7 7a07 	vstr	s15, [r7, #28]

		  double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001f40:	f001 f9b0 	bl	80032a4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <main+0x2c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fae1 	bl	8000514 <__aeabi_ui2d>
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <main+0x2c8>)
 8001f58:	f7fe fc80 	bl	800085c <__aeabi_ddiv>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  timer = HAL_GetTick();
 8001f64:	f001 f99e 	bl	80032a4 <HAL_GetTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4a34      	ldr	r2, [pc, #208]	; (800203c <main+0x2c4>)
 8001f6c:	6013      	str	r3, [r2, #0]

		  double roll;
		  double roll_sqrt=sqrt(accxraw*accxraw+acczraw*acczraw);
 8001f6e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f72:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f76:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	ee17 0a90 	vmov	r0, s15
 8001f86:	f7fe fae7 	bl	8000558 <__aeabi_f2d>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	ec43 2b10 	vmov	d0, r2, r3
 8001f92:	f007 fa5c 	bl	800944e <sqrt>
 8001f96:	ed87 0b02 	vstr	d0, [r7, #8]
		  if(roll_sqrt!=0.0){
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa6:	f7fe fd97 	bl	8000ad8 <__aeabi_dcmpeq>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d149      	bne.n	8002044 <main+0x2cc>
			  roll = atan(accyraw / roll_sqrt) * RAD_TO_DEG;
 8001fb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001fb2:	f7fe fad1 	bl	8000558 <__aeabi_f2d>
 8001fb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fba:	f7fe fc4f 	bl	800085c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	ec43 2b17 	vmov	d7, r2, r3
 8001fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fca:	eef0 0a67 	vmov.f32	s1, s15
 8001fce:	f007 f893 	bl	80090f8 <atan>
 8001fd2:	ec51 0b10 	vmov	r0, r1, d0
 8001fd6:	a308      	add	r3, pc, #32	; (adr r3, 8001ff8 <main+0x280>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fb14 	bl	8000608 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001fe8:	e032      	b.n	8002050 <main+0x2d8>
 8001fea:	bf00      	nop
 8001fec:	f3af 8000 	nop.w
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	40cc2900 	.word	0x40cc2900
 8001ff8:	1a63c1f8 	.word	0x1a63c1f8
 8001ffc:	404ca5dc 	.word	0x404ca5dc
 8002000:	080097b8 	.word	0x080097b8
 8002004:	20000420 	.word	0x20000420
 8002008:	20000536 	.word	0x20000536
 800200c:	20000560 	.word	0x20000560
 8002010:	20000418 	.word	0x20000418
 8002014:	200003ec 	.word	0x200003ec
 8002018:	200002b4 	.word	0x200002b4
 800201c:	080097d8 	.word	0x080097d8
 8002020:	080097e0 	.word	0x080097e0
 8002024:	080097e8 	.word	0x080097e8
 8002028:	20000530 	.word	0x20000530
 800202c:	20000528 	.word	0x20000528
 8002030:	20000520 	.word	0x20000520
 8002034:	46800000 	.word	0x46800000
 8002038:	43030000 	.word	0x43030000
 800203c:	20000538 	.word	0x20000538
 8002040:	408f4000 	.word	0x408f4000
		  }else {
				roll = 0.0;
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		  }
		  double pitch=atan2(-accxraw,acczraw)*RAD_TO_DEG;
 8002050:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002054:	eef1 7a67 	vneg.f32	s15, s15
 8002058:	ee17 3a90 	vmov	r3, s15
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa7b 	bl	8000558 <__aeabi_f2d>
 8002062:	4680      	mov	r8, r0
 8002064:	4689      	mov	r9, r1
 8002066:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002068:	f7fe fa76 	bl	8000558 <__aeabi_f2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	ec43 2b11 	vmov	d1, r2, r3
 8002074:	ec49 8b10 	vmov	d0, r8, r9
 8002078:	f007 f9e7 	bl	800944a <atan2>
 800207c:	ec51 0b10 	vmov	r0, r1, d0
 8002080:	a3a0      	add	r3, pc, #640	; (adr r3, 8002304 <main+0x58c>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe fabf 	bl	8000608 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	e9c7 2300 	strd	r2, r3, [r7]
		  if((pitch < -90 && KalmanAngleY > 90) || (pitch > 90 && KalmanAngleY < -90)){
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <main+0x540>)
 8002098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800209c:	f7fe fd26 	bl	8000aec <__aeabi_dcmplt>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <main+0x344>
 80020a6:	4b85      	ldr	r3, [pc, #532]	; (80022bc <main+0x544>)
 80020a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b83      	ldr	r3, [pc, #524]	; (80022c0 <main+0x548>)
 80020b2:	f7fe fd39 	bl	8000b28 <__aeabi_dcmpgt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d114      	bne.n	80020e6 <main+0x36e>
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <main+0x548>)
 80020c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020c6:	f7fe fd2f 	bl	8000b28 <__aeabi_dcmpgt>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <main+0x384>
 80020d0:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <main+0x544>)
 80020d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b77      	ldr	r3, [pc, #476]	; (80022b8 <main+0x540>)
 80020dc:	f7fe fd06 	bl	8000aec <__aeabi_dcmplt>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <main+0x384>
			  KalmanY.angle = pitch;
 80020e6:	4977      	ldr	r1, [pc, #476]	; (80022c4 <main+0x54c>)
 80020e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  KalmanAngleY = pitch;
 80020f0:	4972      	ldr	r1, [pc, #456]	; (80022bc <main+0x544>)
 80020f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020f6:	e9c1 2300 	strd	r2, r3, [r1]
 80020fa:	e014      	b.n	8002126 <main+0x3ae>
		  }else {
				KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, gy, dt);
 80020fc:	6a38      	ldr	r0, [r7, #32]
 80020fe:	f7fe fa2b 	bl	8000558 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	ed97 2b04 	vldr	d2, [r7, #16]
 800210a:	ec43 2b11 	vmov	d1, r2, r3
 800210e:	ed97 0b00 	vldr	d0, [r7]
 8002112:	486c      	ldr	r0, [pc, #432]	; (80022c4 <main+0x54c>)
 8002114:	f000 f95a 	bl	80023cc <Kalman_getAngle>
 8002118:	eeb0 7a40 	vmov.f32	s14, s0
 800211c:	eef0 7a60 	vmov.f32	s15, s1
 8002120:	4b66      	ldr	r3, [pc, #408]	; (80022bc <main+0x544>)
 8002122:	ed83 7b00 	vstr	d7, [r3]
		  }
		  if (fabs(KalmanAngleY) > 90)
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <main+0x544>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	4614      	mov	r4, r2
 800212e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	4b62      	ldr	r3, [pc, #392]	; (80022c0 <main+0x548>)
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	f7fe fcf4 	bl	8000b28 <__aeabi_dcmpgt>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <main+0x3da>
		  		gx = -gx;
 8002146:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800214a:	eef1 7a67 	vneg.f32	s15, s15
 800214e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		  KalmanAngleX = Kalman_getAngle(&KalmanX, roll, gy, dt);
 8002152:	6a38      	ldr	r0, [r7, #32]
 8002154:	f7fe fa00 	bl	8000558 <__aeabi_f2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	ed97 2b04 	vldr	d2, [r7, #16]
 8002160:	ec43 2b11 	vmov	d1, r2, r3
 8002164:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8002168:	4857      	ldr	r0, [pc, #348]	; (80022c8 <main+0x550>)
 800216a:	f000 f92f 	bl	80023cc <Kalman_getAngle>
 800216e:	eeb0 7a40 	vmov.f32	s14, s0
 8002172:	eef0 7a60 	vmov.f32	s15, s1
 8002176:	4b55      	ldr	r3, [pc, #340]	; (80022cc <main+0x554>)
 8002178:	ed83 7b00 	vstr	d7, [r3]
		  sprintf(data, "x:%f y:%f \r\n", (float)KalmanAngleX, (float)KalmanAngleY);
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <main+0x554>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fd17 	bl	8000bb8 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9e3 	bl	8000558 <__aeabi_f2d>
 8002192:	4680      	mov	r8, r0
 8002194:	4689      	mov	r9, r1
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <main+0x544>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fd0a 	bl	8000bb8 <__aeabi_d2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9d6 	bl	8000558 <__aeabi_f2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	e9cd 2300 	strd	r2, r3, [sp]
 80021b4:	4642      	mov	r2, r8
 80021b6:	464b      	mov	r3, r9
 80021b8:	4945      	ldr	r1, [pc, #276]	; (80022d0 <main+0x558>)
 80021ba:	4846      	ldr	r0, [pc, #280]	; (80022d4 <main+0x55c>)
 80021bc:	f004 fd24 	bl	8006c08 <siprintf>

		  HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), 100);
 80021c0:	2364      	movs	r3, #100	; 0x64
 80021c2:	22c8      	movs	r2, #200	; 0xc8
 80021c4:	4943      	ldr	r1, [pc, #268]	; (80022d4 <main+0x55c>)
 80021c6:	4844      	ldr	r0, [pc, #272]	; (80022d8 <main+0x560>)
 80021c8:	f003 fd0d 	bl	8005be6 <HAL_UART_Transmit>
		  HAL_Delay(200);
 80021cc:	20c8      	movs	r0, #200	; 0xc8
 80021ce:	f001 f875 	bl	80032bc <HAL_Delay>
	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
	#if 1
		  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80021d2:	e013      	b.n	80021fc <main+0x484>
		  			size = sprintf((char *)Data,"Temperature/pressure reading failed\n");
 80021d4:	4941      	ldr	r1, [pc, #260]	; (80022dc <main+0x564>)
 80021d6:	4842      	ldr	r0, [pc, #264]	; (80022e0 <main+0x568>)
 80021d8:	f004 fd16 	bl	8006c08 <siprintf>
 80021dc:	4603      	mov	r3, r0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <main+0x56c>)
 80021e2:	801a      	strh	r2, [r3, #0]
		  			HAL_UART_Transmit(&huart2, Data, size, 1000);
 80021e4:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <main+0x56c>)
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ec:	493c      	ldr	r1, [pc, #240]	; (80022e0 <main+0x568>)
 80021ee:	483a      	ldr	r0, [pc, #232]	; (80022d8 <main+0x560>)
 80021f0:	f003 fcf9 	bl	8005be6 <HAL_UART_Transmit>
		  			HAL_Delay(2000);
 80021f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021f8:	f001 f860 	bl	80032bc <HAL_Delay>
		  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80021fc:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <main+0x570>)
 80021fe:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <main+0x574>)
 8002200:	493b      	ldr	r1, [pc, #236]	; (80022f0 <main+0x578>)
 8002202:	483c      	ldr	r0, [pc, #240]	; (80022f4 <main+0x57c>)
 8002204:	f7ff fcdc 	bl	8001bc0 <bmp280_read_float>
 8002208:	4603      	mov	r3, r0
 800220a:	f083 0301 	eor.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1df      	bne.n	80021d4 <main+0x45c>
		  		}

		  		size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C",
 8002214:	4b35      	ldr	r3, [pc, #212]	; (80022ec <main+0x574>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f99d 	bl	8000558 <__aeabi_f2d>
 800221e:	4680      	mov	r8, r0
 8002220:	4689      	mov	r9, r1
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <main+0x578>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f996 	bl	8000558 <__aeabi_f2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	e9cd 2300 	strd	r2, r3, [sp]
 8002234:	4642      	mov	r2, r8
 8002236:	464b      	mov	r3, r9
 8002238:	492f      	ldr	r1, [pc, #188]	; (80022f8 <main+0x580>)
 800223a:	4829      	ldr	r0, [pc, #164]	; (80022e0 <main+0x568>)
 800223c:	f004 fce4 	bl	8006c08 <siprintf>
 8002240:	4603      	mov	r3, r0
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <main+0x56c>)
 8002246:	801a      	strh	r2, [r3, #0]
		  				pressure, temperature);
		  		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <main+0x56c>)
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002250:	4923      	ldr	r1, [pc, #140]	; (80022e0 <main+0x568>)
 8002252:	4821      	ldr	r0, [pc, #132]	; (80022d8 <main+0x560>)
 8002254:	f003 fcc7 	bl	8005be6 <HAL_UART_Transmit>
		  		if (bme280p) {
 8002258:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800225c:	2b00      	cmp	r3, #0
 800225e:	d017      	beq.n	8002290 <main+0x518>
		  			size = sprintf((char *)Data,", Humidity: %.2f\n", humidity);
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <main+0x570>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f977 	bl	8000558 <__aeabi_f2d>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4923      	ldr	r1, [pc, #140]	; (80022fc <main+0x584>)
 8002270:	481b      	ldr	r0, [pc, #108]	; (80022e0 <main+0x568>)
 8002272:	f004 fcc9 	bl	8006c08 <siprintf>
 8002276:	4603      	mov	r3, r0
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <main+0x56c>)
 800227c:	801a      	strh	r2, [r3, #0]
		  			HAL_UART_Transmit(&huart2, Data, size, 1000);
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <main+0x56c>)
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	4916      	ldr	r1, [pc, #88]	; (80022e0 <main+0x568>)
 8002288:	4813      	ldr	r0, [pc, #76]	; (80022d8 <main+0x560>)
 800228a:	f003 fcac 	bl	8005be6 <HAL_UART_Transmit>
 800228e:	e5e4      	b.n	8001e5a <main+0xe2>
		  		}
		  		else {
		  			size = sprintf((char *)Data, "\n");
 8002290:	491b      	ldr	r1, [pc, #108]	; (8002300 <main+0x588>)
 8002292:	4813      	ldr	r0, [pc, #76]	; (80022e0 <main+0x568>)
 8002294:	f004 fcb8 	bl	8006c08 <siprintf>
 8002298:	4603      	mov	r3, r0
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <main+0x56c>)
 800229e:	801a      	strh	r2, [r3, #0]
		  			HAL_UART_Transmit(&huart2, Data, size, 1000);
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <main+0x56c>)
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a8:	490d      	ldr	r1, [pc, #52]	; (80022e0 <main+0x568>)
 80022aa:	480b      	ldr	r0, [pc, #44]	; (80022d8 <main+0x560>)
 80022ac:	f003 fc9b 	bl	8005be6 <HAL_UART_Transmit>
	  {
 80022b0:	e5d3      	b.n	8001e5a <main+0xe2>
 80022b2:	bf00      	nop
 80022b4:	f3af 8000 	nop.w
 80022b8:	c0568000 	.word	0xc0568000
 80022bc:	20000310 	.word	0x20000310
 80022c0:	40568000 	.word	0x40568000
 80022c4:	20000048 	.word	0x20000048
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000308 	.word	0x20000308
 80022d0:	080097fc 	.word	0x080097fc
 80022d4:	20000318 	.word	0x20000318
 80022d8:	20000560 	.word	0x20000560
 80022dc:	0800980c 	.word	0x0800980c
 80022e0:	20000420 	.word	0x20000420
 80022e4:	20000536 	.word	0x20000536
 80022e8:	200003e8 	.word	0x200003e8
 80022ec:	200003e0 	.word	0x200003e0
 80022f0:	200003e4 	.word	0x200003e4
 80022f4:	200003ec 	.word	0x200003ec
 80022f8:	08009834 	.word	0x08009834
 80022fc:	0800985c 	.word	0x0800985c
 8002300:	08009870 	.word	0x08009870
 8002304:	1a63c1f8 	.word	0x1a63c1f8
 8002308:	404ca5dc 	.word	0x404ca5dc

0800230c <SystemClock_Config>:
	  * @retval None
	  */


void SystemClock_Config(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b094      	sub	sp, #80	; 0x50
 8002310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	2230      	movs	r2, #48	; 0x30
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f004 f802 	bl	8006324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <SystemClock_Config+0xb8>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <SystemClock_Config+0xb8>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233e:	6413      	str	r3, [r2, #64]	; 0x40
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <SystemClock_Config+0xb8>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <SystemClock_Config+0xbc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <SystemClock_Config+0xbc>)
 800235a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <SystemClock_Config+0xbc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800236c:	2302      	movs	r3, #2
 800236e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002370:	2301      	movs	r3, #1
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002374:	2310      	movs	r3, #16
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002378:	2300      	movs	r3, #0
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237c:	f107 0320 	add.w	r3, r7, #32
 8002380:	4618      	mov	r0, r3
 8002382:	f002 ff8b 	bl	800529c <HAL_RCC_OscConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800238c:	f000 f979 	bl	8002682 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002390:	230f      	movs	r3, #15
 8002392:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 f9ee 	bl	800578c <HAL_RCC_ClockConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80023b6:	f000 f964 	bl	8002682 <Error_Handler>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3750      	adds	r7, #80	; 0x50
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000

080023cc <Kalman_getAngle>:


double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate,
		double dt) {
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b096      	sub	sp, #88	; 0x58
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	61f8      	str	r0, [r7, #28]
 80023d4:	ed87 0b04 	vstr	d0, [r7, #16]
 80023d8:	ed87 1b02 	vstr	d1, [r7, #8]
 80023dc:	ed87 2b00 	vstr	d2, [r7]
	double rate = newRate - Kalman->bias;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ea:	f7fd ff55 	bl	8000298 <__aeabi_dsub>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	Kalman->angle += dt * rate;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80023fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002404:	f7fe f900 	bl	8000608 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fd ff44 	bl	800029c <__adddf3>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	69f9      	ldr	r1, [r7, #28]
 800241a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800242a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242e:	f7fe f8eb 	bl	8000608 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002440:	f7fd ff2a 	bl	8000298 <__aeabi_dsub>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002452:	f7fd ff21 	bl	8000298 <__aeabi_dsub>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
					+ Kalman->Q_angle);
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fd ff1a 	bl	800029c <__adddf3>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002474:	f7fe f8c8 	bl	8000608 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
	Kalman->P[0][0] += dt
 800247c:	4620      	mov	r0, r4
 800247e:	4629      	mov	r1, r5
 8002480:	f7fd ff0c 	bl	800029c <__adddf3>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	69f9      	ldr	r1, [r7, #28]
 800248a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800249a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800249e:	f7fe f8b3 	bl	8000608 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4620      	mov	r0, r4
 80024a8:	4629      	mov	r1, r5
 80024aa:	f7fd fef5 	bl	8000298 <__aeabi_dsub>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	69f9      	ldr	r1, [r7, #28]
 80024b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80024c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c8:	f7fe f89e 	bl	8000608 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd fee0 	bl	8000298 <__aeabi_dsub>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	69f9      	ldr	r1, [r7, #28]
 80024de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024f2:	f7fe f889 	bl	8000608 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4620      	mov	r0, r4
 80024fc:	4629      	mov	r1, r5
 80024fe:	f7fd fecd 	bl	800029c <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	69f9      	ldr	r1, [r7, #28]
 8002508:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002518:	f7fd fec0 	bl	800029c <__adddf3>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800252a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800252e:	f7fe f995 	bl	800085c <__aeabi_ddiv>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	e9c7 2308 	strd	r2, r3, [r7, #32]
	K[1] = Kalman->P[1][0] / S;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002544:	f7fe f98a 	bl	800085c <__aeabi_ddiv>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	double y = newAngle - Kalman->angle;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002556:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800255a:	f7fd fe9d 	bl	8000298 <__aeabi_dsub>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += K[0] * y;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800256c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002570:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002574:	f7fe f848 	bl	8000608 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fd fe8c 	bl	800029c <__adddf3>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	69f9      	ldr	r1, [r7, #28]
 800258a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002594:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002598:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800259c:	f7fe f834 	bl	8000608 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fd fe78 	bl	800029c <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	69f9      	ldr	r1, [r7, #28]
 80025b2:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80025bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double P01_temp = Kalman->P[0][1];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	Kalman->P[0][0] -= K[0] * P00_temp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80025d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025d8:	f7fe f816 	bl	8000608 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4620      	mov	r0, r4
 80025e2:	4629      	mov	r1, r5
 80025e4:	f7fd fe58 	bl	8000298 <__aeabi_dsub>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	69f9      	ldr	r1, [r7, #28]
 80025ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80025f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002600:	f7fe f802 	bl	8000608 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fd fe44 	bl	8000298 <__aeabi_dsub>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	69f9      	ldr	r1, [r7, #28]
 8002616:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002620:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002628:	f7fd ffee 	bl	8000608 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fe30 	bl	8000298 <__aeabi_dsub>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	69f9      	ldr	r1, [r7, #28]
 800263e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002648:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800264c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002650:	f7fd ffda 	bl	8000608 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4620      	mov	r0, r4
 800265a:	4629      	mov	r1, r5
 800265c:	f7fd fe1c 	bl	8000298 <__aeabi_dsub>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	69f9      	ldr	r1, [r7, #28]
 8002666:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002670:	ec43 2b17 	vmov	d7, r2, r3
}
 8002674:	eeb0 0a47 	vmov.f32	s0, s14
 8002678:	eef0 0a67 	vmov.f32	s1, s15
 800267c:	3758      	adds	r7, #88	; 0x58
 800267e:	46bd      	mov	sp, r7
 8002680:	bdb0      	pop	{r4, r5, r7, pc}

08002682 <Error_Handler>:

void Error_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002686:	b672      	cpsid	i
}
 8002688:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800268a:	e7fe      	b.n	800268a <Error_Handler+0x8>

0800268c <MPU9250_IsConnected>:

__weak void MPU9250_OnActivate()
{
}
uint8_t	MPU9250_IsConnected()
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <MPU9250_IsConnected+0x24>)
 8002692:	8819      	ldrh	r1, [r3, #0]
 8002694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002698:	2201      	movs	r2, #1
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <MPU9250_IsConnected+0x28>)
 800269c:	f002 f824 	bl	80046e8 <HAL_I2C_IsDeviceReady>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <MPU9250_IsConnected+0x1e>
		return 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <MPU9250_IsConnected+0x20>
	else
		return 0;	
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000092 	.word	0x20000092
 80026b4:	200002b4 	.word	0x200002b4

080026b8 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af04      	add	r7, sp, #16
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
 80026c4:	4613      	mov	r3, r2
 80026c6:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <MPU_I2C_Write+0x38>)
 80026ca:	8819      	ldrh	r1, [r3, #0]
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d4:	9302      	str	r3, [sp, #8]
 80026d6:	883b      	ldrh	r3, [r7, #0]
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2301      	movs	r3, #1
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <MPU_I2C_Write+0x3c>)
 80026e2:	f001 fce1 	bl	80040a8 <HAL_I2C_Mem_Write>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000092 	.word	0x20000092
 80026f4:	200002b4 	.word	0x200002b4

080026f8 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	70fb      	strb	r3, [r7, #3]
 8002704:	4613      	mov	r3, r2
 8002706:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MPU_I2C_Read+0x50>)
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	4313      	orrs	r3, r2
 8002710:	b2db      	uxtb	r3, r3
 8002712:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <MPU_I2C_Read+0x54>)
 8002716:	8819      	ldrh	r1, [r3, #0]
 8002718:	f107 020f 	add.w	r2, r7, #15
 800271c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2301      	movs	r3, #1
 8002724:	480a      	ldr	r0, [pc, #40]	; (8002750 <MPU_I2C_Read+0x58>)
 8002726:	f001 f99b 	bl	8003a60 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MPU_I2C_Read+0x54>)
 800272c:	8819      	ldrh	r1, [r3, #0]
 800272e:	883b      	ldrh	r3, [r7, #0]
 8002730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002734:	9200      	str	r2, [sp, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4805      	ldr	r0, [pc, #20]	; (8002750 <MPU_I2C_Read+0x58>)
 800273a:	f001 fa8f 	bl	8003c5c <HAL_I2C_Master_Receive>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000090 	.word	0x20000090
 800274c:	20000092 	.word	0x20000092
 8002750:	200002b4 	.word	0x200002b4

08002754 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	460a      	mov	r2, r1
 800275e:	71fb      	strb	r3, [r7, #7]
 8002760:	4613      	mov	r3, r2
 8002762:	71bb      	strb	r3, [r7, #6]
	
	MPU_I2C_Write(&data, subAddress, 1);
 8002764:	79f9      	ldrb	r1, [r7, #7]
 8002766:	1dbb      	adds	r3, r7, #6
 8002768:	2201      	movs	r2, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ffa4 	bl	80026b8 <MPU_I2C_Write>

	HAL_Delay(10);
 8002770:	200a      	movs	r0, #10
 8002772:	f000 fda3 	bl	80032bc <HAL_Delay>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	603a      	str	r2, [r7, #0]
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	460b      	mov	r3, r1
 800278c:	71bb      	strb	r3, [r7, #6]
	
	MPU_I2C_Read(dest, subAddress, count);
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	b29a      	uxth	r2, r3
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4619      	mov	r1, r3
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	f7ff ffae 	bl	80026f8 <MPU_I2C_Read>
	
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	460a      	mov	r2, r1
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <writeAK8963Register+0x5c>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <writeAK8963Register+0x60>)
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ffc8 	bl	8002754 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <writeAK8963Register+0x64>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	79fa      	ldrb	r2, [r7, #7]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ffc1 	bl	8002754 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <writeAK8963Register+0x68>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	79ba      	ldrb	r2, [r7, #6]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ffba 	bl	8002754 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <writeAK8963Register+0x6c>)
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <writeAK8963Register+0x70>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f7ff ffaf 	bl	8002754 <writeRegister>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200000a5 	.word	0x200000a5
 8002804:	200000ac 	.word	0x200000ac
 8002808:	200000a6 	.word	0x200000a6
 800280c:	200000a7 	.word	0x200000a7
 8002810:	200000a8 	.word	0x200000a8
 8002814:	200000a9 	.word	0x200000a9

08002818 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	603a      	str	r2, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	460b      	mov	r3, r1
 8002826:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <readAK8963Registers+0x64>)
 800282a:	7818      	ldrb	r0, [r3, #0]
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <readAK8963Registers+0x68>)
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <readAK8963Registers+0x6c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4619      	mov	r1, r3
 800283a:	f7ff ff8b 	bl	8002754 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <readAK8963Registers+0x70>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	79fa      	ldrb	r2, [r7, #7]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff84 	bl	8002754 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <readAK8963Registers+0x74>)
 800284e:	7818      	ldrb	r0, [r3, #0]
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <readAK8963Registers+0x78>)
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	4313      	orrs	r3, r2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	f7ff ff7a 	bl	8002754 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8002860:	2001      	movs	r0, #1
 8002862:	f000 fd2b 	bl	80032bc <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <readAK8963Registers+0x7c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	79b9      	ldrb	r1, [r7, #6]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff85 	bl	800277e <readRegisters>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200000a5 	.word	0x200000a5
 8002880:	200000ac 	.word	0x200000ac
 8002884:	200000aa 	.word	0x200000aa
 8002888:	200000a6 	.word	0x200000a6
 800288c:	200000a8 	.word	0x200000a8
 8002890:	200000a9 	.word	0x200000a9
 8002894:	20000095 	.word	0x20000095

08002898 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <whoAmI+0x38>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <whoAmI+0x3c>)
 80028a2:	2101      	movs	r1, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff6a 	bl	800277e <readRegisters>
	sprintf(Data,"Who:%u\n",_buffer[0]);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <whoAmI+0x3c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4909      	ldr	r1, [pc, #36]	; (80028d8 <whoAmI+0x40>)
 80028b2:	480a      	ldr	r0, [pc, #40]	; (80028dc <whoAmI+0x44>)
 80028b4:	f004 f9a8 	bl	8006c08 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Data, sizeof(Data), 100);
 80028b8:	2364      	movs	r3, #100	; 0x64
 80028ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028be:	4907      	ldr	r1, [pc, #28]	; (80028dc <whoAmI+0x44>)
 80028c0:	4807      	ldr	r0, [pc, #28]	; (80028e0 <whoAmI+0x48>)
 80028c2:	f003 f990 	bl	8005be6 <HAL_UART_Transmit>
	// return the register value
	return _buffer[0];
 80028c6:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <whoAmI+0x3c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200000ab 	.word	0x200000ab
 80028d4:	20000540 	.word	0x20000540
 80028d8:	08009874 	.word	0x08009874
 80028dc:	20000420 	.word	0x20000420
 80028e0:	20000560 	.word	0x20000560

080028e4 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <whoAmIAK8963+0x38>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <whoAmIAK8963+0x3c>)
 80028ee:	2101      	movs	r1, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff91 	bl	8002818 <readAK8963Registers>
	sprintf(Data,"AK8963:%u\n",_buffer[0]);
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <whoAmIAK8963+0x3c>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4909      	ldr	r1, [pc, #36]	; (8002924 <whoAmIAK8963+0x40>)
 80028fe:	480a      	ldr	r0, [pc, #40]	; (8002928 <whoAmIAK8963+0x44>)
 8002900:	f004 f982 	bl	8006c08 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Data, sizeof(Data), 100);
 8002904:	2364      	movs	r3, #100	; 0x64
 8002906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290a:	4907      	ldr	r1, [pc, #28]	; (8002928 <whoAmIAK8963+0x44>)
 800290c:	4807      	ldr	r0, [pc, #28]	; (800292c <whoAmIAK8963+0x48>)
 800290e:	f003 f96a 	bl	8005be6 <HAL_UART_Transmit>
	// return the register value
	return _buffer[0];
 8002912:	4b03      	ldr	r3, [pc, #12]	; (8002920 <whoAmIAK8963+0x3c>)
 8002914:	781b      	ldrb	r3, [r3, #0]
}
 8002916:	4618      	mov	r0, r3
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000053f 	.word	0x2000053f
 8002920:	20000540 	.word	0x20000540
 8002924:	0800987c 	.word	0x0800987c
 8002928:	20000420 	.word	0x20000420
 800292c:	20000560 	.word	0x20000560

08002930 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	while(MPU9250_IsConnected() == 0)
 8002936:	e002      	b.n	800293e <MPU9250_Init+0xe>
	{
		HAL_Delay(100);
 8002938:	2064      	movs	r0, #100	; 0x64
 800293a:	f000 fcbf 	bl	80032bc <HAL_Delay>
	while(MPU9250_IsConnected() == 0)
 800293e:	f7ff fea5 	bl	800268c <MPU9250_IsConnected>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f7      	beq.n	8002938 <MPU9250_Init+0x8>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8002948:	4b69      	ldr	r3, [pc, #420]	; (8002af0 <MPU9250_Init+0x1c0>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4a69      	ldr	r2, [pc, #420]	; (8002af4 <MPU9250_Init+0x1c4>)
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fefe 	bl	8002754 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8002958:	4b67      	ldr	r3, [pc, #412]	; (8002af8 <MPU9250_Init+0x1c8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4a67      	ldr	r2, [pc, #412]	; (8002afc <MPU9250_Init+0x1cc>)
 800295e:	7812      	ldrb	r2, [r2, #0]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fef6 	bl	8002754 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <MPU9250_Init+0x1d0>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4a65      	ldr	r2, [pc, #404]	; (8002b04 <MPU9250_Init+0x1d4>)
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff feee 	bl	8002754 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002978:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <MPU9250_Init+0x1d8>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4a63      	ldr	r2, [pc, #396]	; (8002b0c <MPU9250_Init+0x1dc>)
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ff0e 	bl	80027a4 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <MPU9250_Init+0x1c0>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4a60      	ldr	r2, [pc, #384]	; (8002b10 <MPU9250_Init+0x1e0>)
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fede 	bl	8002754 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8002998:	200a      	movs	r0, #10
 800299a:	f000 fc8f 	bl	80032bc <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 800299e:	4b5d      	ldr	r3, [pc, #372]	; (8002b14 <MPU9250_Init+0x1e4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	4a5d      	ldr	r2, [pc, #372]	; (8002b18 <MPU9250_Init+0x1e8>)
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fefb 	bl	80027a4 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <MPU9250_Init+0x1c0>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <MPU9250_Init+0x1c4>)
 80029b4:	7812      	ldrb	r2, [r2, #0]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fecb 	bl	8002754 <writeRegister>
	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)

	uint8_t who = whoAmI();
 80029be:	f7ff ff6b 	bl	8002898 <whoAmI>
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) && ( who != 0x70))
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	2b71      	cmp	r3, #113	; 0x71
 80029ca:	d004      	beq.n	80029d6 <MPU9250_Init+0xa6>
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	2b70      	cmp	r3, #112	; 0x70
 80029d0:	d001      	beq.n	80029d6 <MPU9250_Init+0xa6>
	{
		return 1;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e087      	b.n	8002ae6 <MPU9250_Init+0x1b6>
	}


	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <MPU9250_Init+0x1ec>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <MPU9250_Init+0x1f0>)
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff feb7 	bl	8002754 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 80029e6:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <MPU9250_Init+0x1f4>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <MPU9250_Init+0x1f8>)
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff feaf 	bl	8002754 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 80029f6:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <MPU9250_Init+0x1fc>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <MPU9250_Init+0x200>)
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fea7 	bl	8002754 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8002a06:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <MPU9250_Init+0x204>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4a4b      	ldr	r2, [pc, #300]	; (8002b38 <MPU9250_Init+0x208>)
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe9f 	bl	8002754 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8002a16:	4b49      	ldr	r3, [pc, #292]	; (8002b3c <MPU9250_Init+0x20c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4a47      	ldr	r2, [pc, #284]	; (8002b38 <MPU9250_Init+0x208>)
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fe97 	bl	8002754 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8002a26:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <MPU9250_Init+0x210>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fe91 	bl	8002754 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <MPU9250_Init+0x1c8>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4a31      	ldr	r2, [pc, #196]	; (8002afc <MPU9250_Init+0x1cc>)
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fe89 	bl	8002754 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8002a42:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <MPU9250_Init+0x1d0>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4a2f      	ldr	r2, [pc, #188]	; (8002b04 <MPU9250_Init+0x1d4>)
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe81 	bl	8002754 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8002a52:	f7ff ff47 	bl	80028e4 <whoAmIAK8963>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b48      	cmp	r3, #72	; 0x48
 8002a5a:	d001      	beq.n	8002a60 <MPU9250_Init+0x130>
	{
		return 1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e042      	b.n	8002ae6 <MPU9250_Init+0x1b6>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <MPU9250_Init+0x1d8>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <MPU9250_Init+0x1dc>)
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fe9a 	bl	80027a4 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8002a70:	2064      	movs	r0, #100	; 0x64
 8002a72:	f000 fc23 	bl	80032bc <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <MPU9250_Init+0x1d8>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	4a32      	ldr	r2, [pc, #200]	; (8002b44 <MPU9250_Init+0x214>)
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fe8f 	bl	80027a4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002a86:	2064      	movs	r0, #100	; 0x64
 8002a88:	f000 fc18 	bl	80032bc <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <MPU9250_Init+0x218>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <MPU9250_Init+0x21c>)
 8002a92:	2103      	movs	r1, #3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff febf 	bl	8002818 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <MPU9250_Init+0x1d8>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <MPU9250_Init+0x1dc>)
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fe7d 	bl	80027a4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002aaa:	2064      	movs	r0, #100	; 0x64
 8002aac:	f000 fc06 	bl	80032bc <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate//Contisnus mesurement mode2
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <MPU9250_Init+0x1d8>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <MPU9250_Init+0x220>)
 8002ab6:	7812      	ldrb	r2, [r2, #0]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fe72 	bl	80027a4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002ac0:	2064      	movs	r0, #100	; 0x64
 8002ac2:	f000 fbfb 	bl	80032bc <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <MPU9250_Init+0x1c0>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <MPU9250_Init+0x1c4>)
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fe3f 	bl	8002754 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <MPU9250_Init+0x224>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <MPU9250_Init+0x228>)
 8002adc:	2107      	movs	r1, #7
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fe9a 	bl	8002818 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000009d 	.word	0x2000009d
 8002af4:	2000009f 	.word	0x2000009f
 8002af8:	200000a1 	.word	0x200000a1
 8002afc:	200000a2 	.word	0x200000a2
 8002b00:	200000a4 	.word	0x200000a4
 8002b04:	200000a3 	.word	0x200000a3
 8002b08:	200000ae 	.word	0x200000ae
 8002b0c:	2000053e 	.word	0x2000053e
 8002b10:	2000009e 	.word	0x2000009e
 8002b14:	200000b2 	.word	0x200000b2
 8002b18:	200000b3 	.word	0x200000b3
 8002b1c:	200000a0 	.word	0x200000a0
 8002b20:	2000053d 	.word	0x2000053d
 8002b24:	20000096 	.word	0x20000096
 8002b28:	20000097 	.word	0x20000097
 8002b2c:	20000098 	.word	0x20000098
 8002b30:	2000053c 	.word	0x2000053c
 8002b34:	20000099 	.word	0x20000099
 8002b38:	2000009a 	.word	0x2000009a
 8002b3c:	2000009b 	.word	0x2000009b
 8002b40:	2000009c 	.word	0x2000009c
 8002b44:	200000b1 	.word	0x200000b1
 8002b48:	200000b4 	.word	0x200000b4
 8002b4c:	20000558 	.word	0x20000558
 8002b50:	200000b0 	.word	0x200000b0
 8002b54:	200000ad 	.word	0x200000ad
 8002b58:	20000540 	.word	0x20000540

08002b5c <MPU9250_SetAccelRange>:

/* sets the accelerometer full scale range to values other than default */
void MPU9250_SetAccelRange(AccelRange range)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG, range);
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <MPU9250_SetAccelRange+0x20>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	79fa      	ldrb	r2, [r7, #7]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fdf0 	bl	8002754 <writeRegister>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000096 	.word	0x20000096

08002b80 <MPU9250_SetGyroRange>:

/* sets the gyro full scale range to values other than default */
void MPU9250_SetGyroRange(GyroRange range)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
	writeRegister(GYRO_CONFIG, range);
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <MPU9250_SetGyroRange+0x20>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fdde 	bl	8002754 <writeRegister>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000098 	.word	0x20000098

08002ba4 <MPU9250_SetDLPFBandwidth>:

/* sets the DLPF bandwidth to values other than default */
void MPU9250_SetDLPFBandwidth(DLPFBandwidth bandwidth)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG2,bandwidth);
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MPU9250_SetDLPFBandwidth+0x30>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	79fa      	ldrb	r2, [r7, #7]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fdcc 	bl	8002754 <writeRegister>
	writeRegister(CONFIG,bandwidth);
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <MPU9250_SetDLPFBandwidth+0x34>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	79fa      	ldrb	r2, [r7, #7]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fdc5 	bl	8002754 <writeRegister>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000099 	.word	0x20000099
 8002bd8:	2000009b 	.word	0x2000009b

08002bdc <MPU9250_SetSampleRateDivider>:

/* sets the sample rate divider to values other than default */
void MPU9250_SetSampleRateDivider(SampleRateDivider srd)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
	/* setting the sample rate divider to 19 to facilitate setting up magnetometer */
	writeRegister(SMPDIV,19);
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <MPU9250_SetSampleRateDivider+0xa8>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2113      	movs	r1, #19
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fdb1 	bl	8002754 <writeRegister>

	if(srd > 9)
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	d91d      	bls.n	8002c34 <MPU9250_SetSampleRateDivider+0x58>
	{
		// set AK8963 to Power Down
		writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <MPU9250_SetSampleRateDivider+0xac>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <MPU9250_SetSampleRateDivider+0xb0>)
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fdce 	bl	80027a4 <writeAK8963Register>

		// long wait between AK8963 mode changes
		HAL_Delay(100);
 8002c08:	2064      	movs	r0, #100	; 0x64
 8002c0a:	f000 fb57 	bl	80032bc <HAL_Delay>

		// set AK8963 to 16 bit resolution, 8 Hz update rate
		writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1);
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <MPU9250_SetSampleRateDivider+0xac>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <MPU9250_SetSampleRateDivider+0xb4>)
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fdc3 	bl	80027a4 <writeAK8963Register>

		// long wait between AK8963 mode changes
		HAL_Delay(100);
 8002c1e:	2064      	movs	r0, #100	; 0x64
 8002c20:	f000 fb4c 	bl	80032bc <HAL_Delay>

		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		readAK8963Registers(AK8963_HXL,7,_buffer);
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <MPU9250_SetSampleRateDivider+0xb8>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <MPU9250_SetSampleRateDivider+0xbc>)
 8002c2a:	2107      	movs	r1, #7
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fdf3 	bl	8002818 <readAK8963Registers>
 8002c32:	e01c      	b.n	8002c6e <MPU9250_SetSampleRateDivider+0x92>

	}
	else
	{
		// set AK8963 to Power Down
		writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <MPU9250_SetSampleRateDivider+0xac>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <MPU9250_SetSampleRateDivider+0xb0>)
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fdb0 	bl	80027a4 <writeAK8963Register>
		// long wait between AK8963 mode changes
		HAL_Delay(100);
 8002c44:	2064      	movs	r0, #100	; 0x64
 8002c46:	f000 fb39 	bl	80032bc <HAL_Delay>
		// set AK8963 to 16 bit resolution, 100 Hz update rate
		writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <MPU9250_SetSampleRateDivider+0xac>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <MPU9250_SetSampleRateDivider+0xc0>)
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fda5 	bl	80027a4 <writeAK8963Register>

		// long wait between AK8963 mode changes
		HAL_Delay(100);
 8002c5a:	2064      	movs	r0, #100	; 0x64
 8002c5c:	f000 fb2e 	bl	80032bc <HAL_Delay>

		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		readAK8963Registers(AK8963_HXL,7,_buffer);
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <MPU9250_SetSampleRateDivider+0xb8>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <MPU9250_SetSampleRateDivider+0xbc>)
 8002c66:	2107      	movs	r1, #7
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fdd5 	bl	8002818 <readAK8963Registers>
	}

	writeRegister(SMPDIV, srd);
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <MPU9250_SetSampleRateDivider+0xa8>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fd6c 	bl	8002754 <writeRegister>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000009c 	.word	0x2000009c
 8002c88:	200000ae 	.word	0x200000ae
 8002c8c:	2000053e 	.word	0x2000053e
 8002c90:	200000af 	.word	0x200000af
 8002c94:	200000ad 	.word	0x200000ad
 8002c98:	20000540 	.word	0x20000540
 8002c9c:	200000b0 	.word	0x200000b0

08002ca0 <MPU9250_GetData>:

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8002cac:	4b63      	ldr	r3, [pc, #396]	; (8002e3c <MPU9250_GetData+0x19c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4a63      	ldr	r2, [pc, #396]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002cb2:	2115      	movs	r1, #21
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fd62 	bl	800277e <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8002cba:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	b21a      	sxth	r2, r3
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002cd2:	789b      	ldrb	r3, [r3, #2]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b219      	sxth	r1, r3
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002cda:	78db      	ldrb	r3, [r3, #3]
 8002cdc:	b21a      	sxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	b212      	sxth	r2, r2
 8002ce6:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8002ce8:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002cea:	791b      	ldrb	r3, [r3, #4]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	b219      	sxth	r1, r3
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002cf2:	795b      	ldrb	r3, [r3, #5]
 8002cf4:	b21a      	sxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	b212      	sxth	r2, r2
 8002cfe:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8002d00:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d02:	7a1b      	ldrb	r3, [r3, #8]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	b21a      	sxth	r2, r3
 8002d08:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d0a:	7a5b      	ldrb	r3, [r3, #9]
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	b21a      	sxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8002d16:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d18:	7a9b      	ldrb	r3, [r3, #10]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	b219      	sxth	r1, r3
 8002d1e:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d20:	7adb      	ldrb	r3, [r3, #11]
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3302      	adds	r3, #2
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	b212      	sxth	r2, r2
 8002d2c:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8002d2e:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d30:	7b1b      	ldrb	r3, [r3, #12]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b219      	sxth	r1, r3
 8002d36:	4b42      	ldr	r3, [pc, #264]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d38:	7b5b      	ldrb	r3, [r3, #13]
 8002d3a:	b21a      	sxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	430a      	orrs	r2, r1
 8002d42:	b212      	sxth	r2, r2
 8002d44:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d48:	7bdb      	ldrb	r3, [r3, #15]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d50:	7b9b      	ldrb	r3, [r3, #14]
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d5a:	7c5b      	ldrb	r3, [r3, #17]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b21a      	sxth	r2, r3
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d62:	7c1b      	ldrb	r3, [r3, #16]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8002d6a:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d6c:	7cdb      	ldrb	r3, [r3, #19]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	b21a      	sxth	r2, r3
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <MPU9250_GetData+0x1a0>)
 8002d74:	7c9b      	ldrb	r3, [r3, #18]
 8002d76:	b21b      	sxth	r3, r3
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8002d7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d88:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <MPU9250_GetData+0x1a4>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	3b80      	subs	r3, #128	; 0x80
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d96:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8002e48 <MPU9250_GetData+0x1a8>
 8002d9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dae:	ee17 3a90 	vmov	r3, s15
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8002db8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <MPU9250_GetData+0x1a4>)
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	3b80      	subs	r3, #128	; 0x80
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dd2:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8002e48 <MPU9250_GetData+0x1a8>
 8002dd6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3302      	adds	r3, #2
 8002dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dee:	ee17 2a90 	vmov	r2, s15
 8002df2:	b212      	sxth	r2, r2
 8002df4:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8002df6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <MPU9250_GetData+0x1a4>)
 8002e04:	789b      	ldrb	r3, [r3, #2]
 8002e06:	3b80      	subs	r3, #128	; 0x80
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e10:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002e48 <MPU9250_GetData+0x1a8>
 8002e14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3304      	adds	r3, #4
 8002e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2c:	ee17 2a90 	vmov	r2, s15
 8002e30:	b212      	sxth	r2, r2
 8002e32:	801a      	strh	r2, [r3, #0]
}
 8002e34:	bf00      	nop
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000094 	.word	0x20000094
 8002e40:	20000540 	.word	0x20000540
 8002e44:	20000558 	.word	0x20000558
 8002e48:	43800000 	.word	0x43800000

08002e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_MspInit+0x4c>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <HAL_MspInit+0x4c>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_MspInit+0x4c>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_MspInit+0x4c>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <HAL_MspInit+0x4c>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_MspInit+0x4c>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800

08002e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <NMI_Handler+0x4>

08002ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <HardFault_Handler+0x4>

08002ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eac:	e7fe      	b.n	8002eac <MemManage_Handler+0x4>

08002eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb2:	e7fe      	b.n	8002eb2 <BusFault_Handler+0x4>

08002eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <UsageFault_Handler+0x4>

08002eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 f9c8 	bl	800327c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
	return 1;
 8002ef4:	2301      	movs	r3, #1
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <_kill>:

int _kill(int pid, int sig)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f0a:	f003 f9e1 	bl	80062d0 <__errno>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2216      	movs	r2, #22
 8002f12:	601a      	str	r2, [r3, #0]
	return -1;
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_exit>:

void _exit (int status)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ffe7 	bl	8002f00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f32:	e7fe      	b.n	8002f32 <_exit+0x12>

08002f34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	e00a      	b.n	8002f5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f46:	f3af 8000 	nop.w
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	60ba      	str	r2, [r7, #8]
 8002f52:	b2ca      	uxtb	r2, r1
 8002f54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	dbf0      	blt.n	8002f46 <_read+0x12>
	}

return len;
 8002f64:	687b      	ldr	r3, [r7, #4]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	e009      	b.n	8002f94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	60ba      	str	r2, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3301      	adds	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	dbf1      	blt.n	8002f80 <_write+0x12>
	}
	return len;
 8002f9c:	687b      	ldr	r3, [r7, #4]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <_close>:

int _close(int file)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
	return -1;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fce:	605a      	str	r2, [r3, #4]
	return 0;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <_isatty>:

int _isatty(int file)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
	return 1;
 8002fe6:	2301      	movs	r3, #1
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
	return 0;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003018:	4a14      	ldr	r2, [pc, #80]	; (800306c <_sbrk+0x5c>)
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <_sbrk+0x60>)
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <_sbrk+0x64>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <_sbrk+0x64>)
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <_sbrk+0x68>)
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <_sbrk+0x64>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	429a      	cmp	r2, r3
 800303e:	d207      	bcs.n	8003050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003040:	f003 f946 	bl	80062d0 <__errno>
 8003044:	4603      	mov	r3, r0
 8003046:	220c      	movs	r2, #12
 8003048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800304e:	e009      	b.n	8003064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <_sbrk+0x64>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <_sbrk+0x64>)
 8003060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20018000 	.word	0x20018000
 8003070:	00000400 	.word	0x00000400
 8003074:	2000055c 	.word	0x2000055c
 8003078:	200005b8 	.word	0x200005b8

0800307c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <SystemInit+0x20>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <SystemInit+0x20>)
 8003088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800308c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <MX_USART2_UART_Init+0x50>)
 80030a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030c6:	220c      	movs	r2, #12
 80030c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030d6:	4805      	ldr	r0, [pc, #20]	; (80030ec <MX_USART2_UART_Init+0x4c>)
 80030d8:	f002 fd38 	bl	8005b4c <HAL_UART_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030e2:	f7ff face 	bl	8002682 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000560 	.word	0x20000560
 80030f0:	40004400 	.word	0x40004400

080030f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <HAL_UART_MspInit+0x84>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d12b      	bne.n	800316e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_UART_MspInit+0x88>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <HAL_UART_MspInit+0x88>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <HAL_UART_MspInit+0x88>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_UART_MspInit+0x88>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_UART_MspInit+0x88>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_UART_MspInit+0x88>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800314e:	230c      	movs	r3, #12
 8003150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315a:	2303      	movs	r3, #3
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800315e:	2307      	movs	r3, #7
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	4805      	ldr	r0, [pc, #20]	; (8003180 <HAL_UART_MspInit+0x8c>)
 800316a:	f000 f9b1 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800316e:	bf00      	nop
 8003170:	3728      	adds	r7, #40	; 0x28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40004400 	.word	0x40004400
 800317c:	40023800 	.word	0x40023800
 8003180:	40020000 	.word	0x40020000

08003184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003188:	480d      	ldr	r0, [pc, #52]	; (80031c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800318a:	490e      	ldr	r1, [pc, #56]	; (80031c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003190:	e002      	b.n	8003198 <LoopCopyDataInit>

08003192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003196:	3304      	adds	r3, #4

08003198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800319c:	d3f9      	bcc.n	8003192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031a0:	4c0b      	ldr	r4, [pc, #44]	; (80031d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a4:	e001      	b.n	80031aa <LoopFillZerobss>

080031a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a8:	3204      	adds	r2, #4

080031aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ac:	d3fb      	bcc.n	80031a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ae:	f7ff ff65 	bl	800307c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b2:	f003 f893 	bl	80062dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b6:	f7fe fddf 	bl	8001d78 <main>
  bx  lr    
 80031ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80031c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c4:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80031c8:	08009d00 	.word	0x08009d00
  ldr r2, =_sbss
 80031cc:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80031d0:	200005b8 	.word	0x200005b8

080031d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC_IRQHandler>
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <HAL_Init+0x40>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_Init+0x40>)
 80031ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_Init+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_Init+0x40>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f000 f931 	bl	8003468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003206:	200f      	movs	r0, #15
 8003208:	f000 f808 	bl	800321c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800320c:	f7ff fe1e 	bl	8002e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00

0800321c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_InitTick+0x54>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_InitTick+0x58>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	fbb3 f3f1 	udiv	r3, r3, r1
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f93b 	bl	80034b6 <HAL_SYSTICK_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e00e      	b.n	8003268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d80a      	bhi.n	8003266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003250:	2200      	movs	r2, #0
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003258:	f000 f911 	bl	800347e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <HAL_InitTick+0x5c>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	200000b8 	.word	0x200000b8
 8003274:	200000c0 	.word	0x200000c0
 8003278:	200000bc 	.word	0x200000bc

0800327c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_IncTick+0x20>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_IncTick+0x24>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <HAL_IncTick+0x24>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	200000c0 	.word	0x200000c0
 80032a0:	200005a4 	.word	0x200005a4

080032a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTick;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_GetTick+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	200005a4 	.word	0x200005a4

080032bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff ffee 	bl	80032a4 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d4:	d005      	beq.n	80032e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_Delay+0x44>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032e2:	bf00      	nop
 80032e4:	f7ff ffde 	bl	80032a4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d8f7      	bhi.n	80032e4 <HAL_Delay+0x28>
  {
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200000c0 	.word	0x200000c0

08003304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003320:	4013      	ands	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800332c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003336:	4a04      	ldr	r2, [pc, #16]	; (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	60d3      	str	r3, [r2, #12]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <__NVIC_GetPriorityGrouping+0x18>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 0307 	and.w	r3, r3, #7
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	6039      	str	r1, [r7, #0]
 8003372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	2b00      	cmp	r3, #0
 800337a:	db0a      	blt.n	8003392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	490c      	ldr	r1, [pc, #48]	; (80033b4 <__NVIC_SetPriority+0x4c>)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	0112      	lsls	r2, r2, #4
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	440b      	add	r3, r1
 800338c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003390:	e00a      	b.n	80033a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4908      	ldr	r1, [pc, #32]	; (80033b8 <__NVIC_SetPriority+0x50>)
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	3b04      	subs	r3, #4
 80033a0:	0112      	lsls	r2, r2, #4
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	440b      	add	r3, r1
 80033a6:	761a      	strb	r2, [r3, #24]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000e100 	.word	0xe000e100
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f1c3 0307 	rsb	r3, r3, #7
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	bf28      	it	cs
 80033da:	2304      	movcs	r3, #4
 80033dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3304      	adds	r3, #4
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	d902      	bls.n	80033ec <NVIC_EncodePriority+0x30>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3b03      	subs	r3, #3
 80033ea:	e000      	b.n	80033ee <NVIC_EncodePriority+0x32>
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43da      	mvns	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	401a      	ands	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	43d9      	mvns	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	4313      	orrs	r3, r2
         );
}
 8003416:	4618      	mov	r0, r3
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003434:	d301      	bcc.n	800343a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003436:	2301      	movs	r3, #1
 8003438:	e00f      	b.n	800345a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <SysTick_Config+0x40>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003442:	210f      	movs	r1, #15
 8003444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003448:	f7ff ff8e 	bl	8003368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <SysTick_Config+0x40>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <SysTick_Config+0x40>)
 8003454:	2207      	movs	r2, #7
 8003456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	e000e010 	.word	0xe000e010

08003468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff47 	bl	8003304 <__NVIC_SetPriorityGrouping>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003490:	f7ff ff5c 	bl	800334c <__NVIC_GetPriorityGrouping>
 8003494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff8e 	bl	80033bc <NVIC_EncodePriority>
 80034a0:	4602      	mov	r2, r0
 80034a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff5d 	bl	8003368 <__NVIC_SetPriority>
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffb0 	bl	8003424 <SysTick_Config>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e159      	b.n	80037a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034ec:	2201      	movs	r2, #1
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	f040 8148 	bne.w	800379a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d005      	beq.n	8003522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351e:	2b02      	cmp	r3, #2
 8003520:	d130      	bne.n	8003584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003558:	2201      	movs	r2, #1
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 0201 	and.w	r2, r3, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b03      	cmp	r3, #3
 800358e:	d017      	beq.n	80035c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d123      	bne.n	8003614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	08da      	lsrs	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3208      	adds	r2, #8
 80035d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	08da      	lsrs	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3208      	adds	r2, #8
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	2203      	movs	r2, #3
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80a2 	beq.w	800379a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b57      	ldr	r3, [pc, #348]	; (80037b8 <HAL_GPIO_Init+0x2e8>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	4a56      	ldr	r2, [pc, #344]	; (80037b8 <HAL_GPIO_Init+0x2e8>)
 8003660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003664:	6453      	str	r3, [r2, #68]	; 0x44
 8003666:	4b54      	ldr	r3, [pc, #336]	; (80037b8 <HAL_GPIO_Init+0x2e8>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003672:	4a52      	ldr	r2, [pc, #328]	; (80037bc <HAL_GPIO_Init+0x2ec>)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3302      	adds	r3, #2
 800367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	220f      	movs	r2, #15
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a49      	ldr	r2, [pc, #292]	; (80037c0 <HAL_GPIO_Init+0x2f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d019      	beq.n	80036d2 <HAL_GPIO_Init+0x202>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a48      	ldr	r2, [pc, #288]	; (80037c4 <HAL_GPIO_Init+0x2f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_GPIO_Init+0x1fe>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a47      	ldr	r2, [pc, #284]	; (80037c8 <HAL_GPIO_Init+0x2f8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00d      	beq.n	80036ca <HAL_GPIO_Init+0x1fa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a46      	ldr	r2, [pc, #280]	; (80037cc <HAL_GPIO_Init+0x2fc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <HAL_GPIO_Init+0x1f6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a45      	ldr	r2, [pc, #276]	; (80037d0 <HAL_GPIO_Init+0x300>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_GPIO_Init+0x1f2>
 80036be:	2304      	movs	r3, #4
 80036c0:	e008      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e006      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c6:	2303      	movs	r3, #3
 80036c8:	e004      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e002      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036d2:	2300      	movs	r3, #0
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f002 0203 	and.w	r2, r2, #3
 80036da:	0092      	lsls	r2, r2, #2
 80036dc:	4093      	lsls	r3, r2
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e4:	4935      	ldr	r1, [pc, #212]	; (80037bc <HAL_GPIO_Init+0x2ec>)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f2:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_GPIO_Init+0x304>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003716:	4a2f      	ldr	r2, [pc, #188]	; (80037d4 <HAL_GPIO_Init+0x304>)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800371c:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_GPIO_Init+0x304>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003740:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <HAL_GPIO_Init+0x304>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_GPIO_Init+0x304>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <HAL_GPIO_Init+0x304>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <HAL_GPIO_Init+0x304>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003794:	4a0f      	ldr	r2, [pc, #60]	; (80037d4 <HAL_GPIO_Init+0x304>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3301      	adds	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b0f      	cmp	r3, #15
 80037a4:	f67f aea2 	bls.w	80034ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3724      	adds	r7, #36	; 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40020000 	.word	0x40020000
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	40020c00 	.word	0x40020c00
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e12b      	b.n	8003a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fa70 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	; 0x24
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800383a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800383c:	f002 f95e 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 8003840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4a81      	ldr	r2, [pc, #516]	; (8003a4c <HAL_I2C_Init+0x274>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d807      	bhi.n	800385c <HAL_I2C_Init+0x84>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a80      	ldr	r2, [pc, #512]	; (8003a50 <HAL_I2C_Init+0x278>)
 8003850:	4293      	cmp	r3, r2
 8003852:	bf94      	ite	ls
 8003854:	2301      	movls	r3, #1
 8003856:	2300      	movhi	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e006      	b.n	800386a <HAL_I2C_Init+0x92>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a7d      	ldr	r2, [pc, #500]	; (8003a54 <HAL_I2C_Init+0x27c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	bf94      	ite	ls
 8003864:	2301      	movls	r3, #1
 8003866:	2300      	movhi	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0e7      	b.n	8003a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a78      	ldr	r2, [pc, #480]	; (8003a58 <HAL_I2C_Init+0x280>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0c9b      	lsrs	r3, r3, #18
 800387c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a6a      	ldr	r2, [pc, #424]	; (8003a4c <HAL_I2C_Init+0x274>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d802      	bhi.n	80038ac <HAL_I2C_Init+0xd4>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3301      	adds	r3, #1
 80038aa:	e009      	b.n	80038c0 <HAL_I2C_Init+0xe8>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	4a69      	ldr	r2, [pc, #420]	; (8003a5c <HAL_I2C_Init+0x284>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	3301      	adds	r3, #1
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	495c      	ldr	r1, [pc, #368]	; (8003a4c <HAL_I2C_Init+0x274>)
 80038dc:	428b      	cmp	r3, r1
 80038de:	d819      	bhi.n	8003914 <HAL_I2C_Init+0x13c>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e59      	subs	r1, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ee:	1c59      	adds	r1, r3, #1
 80038f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038f4:	400b      	ands	r3, r1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_I2C_Init+0x138>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1e59      	subs	r1, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fbb1 f3f3 	udiv	r3, r1, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	e051      	b.n	80039b4 <HAL_I2C_Init+0x1dc>
 8003910:	2304      	movs	r3, #4
 8003912:	e04f      	b.n	80039b4 <HAL_I2C_Init+0x1dc>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d111      	bne.n	8003940 <HAL_I2C_Init+0x168>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1e58      	subs	r0, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	440b      	add	r3, r1
 800392a:	fbb0 f3f3 	udiv	r3, r0, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e012      	b.n	8003966 <HAL_I2C_Init+0x18e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	0099      	lsls	r1, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	fbb0 f3f3 	udiv	r3, r0, r3
 8003956:	3301      	adds	r3, #1
 8003958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Init+0x196>
 800396a:	2301      	movs	r3, #1
 800396c:	e022      	b.n	80039b4 <HAL_I2C_Init+0x1dc>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10e      	bne.n	8003994 <HAL_I2C_Init+0x1bc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1e58      	subs	r0, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6859      	ldr	r1, [r3, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	440b      	add	r3, r1
 8003984:	fbb0 f3f3 	udiv	r3, r0, r3
 8003988:	3301      	adds	r3, #1
 800398a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003992:	e00f      	b.n	80039b4 <HAL_I2C_Init+0x1dc>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	0099      	lsls	r1, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	6809      	ldr	r1, [r1, #0]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6911      	ldr	r1, [r2, #16]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68d2      	ldr	r2, [r2, #12]
 80039ee:	4311      	orrs	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	000186a0 	.word	0x000186a0
 8003a50:	001e847f 	.word	0x001e847f
 8003a54:	003d08ff 	.word	0x003d08ff
 8003a58:	431bde83 	.word	0x431bde83
 8003a5c:	10624dd3 	.word	0x10624dd3

08003a60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	817b      	strh	r3, [r7, #10]
 8003a70:	4613      	mov	r3, r2
 8003a72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a74:	f7ff fc16 	bl	80032a4 <HAL_GetTick>
 8003a78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	f040 80e0 	bne.w	8003c48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2319      	movs	r3, #25
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4970      	ldr	r1, [pc, #448]	; (8003c54 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f001 fa24 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0d3      	b.n	8003c4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_I2C_Master_Transmit+0x50>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e0cc      	b.n	8003c4a <HAL_I2C_Master_Transmit+0x1ea>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d007      	beq.n	8003ad6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2221      	movs	r2, #33	; 0x21
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2210      	movs	r2, #16
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a50      	ldr	r2, [pc, #320]	; (8003c58 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b18:	8979      	ldrh	r1, [r7, #10]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 ff10 	bl	8004944 <I2C_MasterRequestWrite>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e08d      	b.n	8003c4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b44:	e066      	b.n	8003c14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f001 fa9e 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d107      	bne.n	8003b6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e06b      	b.n	8003c4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d11b      	bne.n	8003be8 <HAL_I2C_Master_Transmit+0x188>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d017      	beq.n	8003be8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	6a39      	ldr	r1, [r7, #32]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f001 fa8e 	bl	800510e <I2C_WaitOnBTFFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d107      	bne.n	8003c10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e01a      	b.n	8003c4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d194      	bne.n	8003b46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	00100002 	.word	0x00100002
 8003c58:	ffff0000 	.word	0xffff0000

08003c5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	; 0x30
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	460b      	mov	r3, r1
 8003c6a:	817b      	strh	r3, [r7, #10]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff fb18 	bl	80032a4 <HAL_GetTick>
 8003c74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	f040 820b 	bne.w	800409a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2319      	movs	r3, #25
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	497c      	ldr	r1, [pc, #496]	; (8003e80 <HAL_I2C_Master_Receive+0x224>)
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f001 f926 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e1fe      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_I2C_Master_Receive+0x50>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e1f7      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d007      	beq.n	8003cd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2222      	movs	r2, #34	; 0x22
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2210      	movs	r2, #16
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	893a      	ldrh	r2, [r7, #8]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a5c      	ldr	r2, [pc, #368]	; (8003e84 <HAL_I2C_Master_Receive+0x228>)
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d14:	8979      	ldrh	r1, [r7, #10]
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fe94 	bl	8004a48 <I2C_MasterRequestRead>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1b8      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d113      	bne.n	8003d5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d32:	2300      	movs	r3, #0
 8003d34:	623b      	str	r3, [r7, #32]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e18c      	b.n	8004074 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d11b      	bne.n	8003d9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e16c      	b.n	8004074 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d11b      	bne.n	8003dda <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	e14c      	b.n	8004074 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e00:	e138      	b.n	8004074 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	f200 80f1 	bhi.w	8003fee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d123      	bne.n	8003e5c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f001 f9b9 	bl	8005190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e139      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e5a:	e10b      	b.n	8004074 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d14e      	bne.n	8003f02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	4906      	ldr	r1, [pc, #24]	; (8003e88 <HAL_I2C_Master_Receive+0x22c>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f001 f836 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e10e      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
 8003e7e:	bf00      	nop
 8003e80:	00100002 	.word	0x00100002
 8003e84:	ffff0000 	.word	0xffff0000
 8003e88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f00:	e0b8      	b.n	8004074 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4966      	ldr	r1, [pc, #408]	; (80040a4 <HAL_I2C_Master_Receive+0x448>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 ffe7 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0bf      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	2200      	movs	r2, #0
 8003f66:	494f      	ldr	r1, [pc, #316]	; (80040a4 <HAL_I2C_Master_Receive+0x448>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 ffb9 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e091      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fec:	e042      	b.n	8004074 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f001 f8cc 	bl	8005190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e04c      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d118      	bne.n	8004074 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	f47f aec2 	bne.w	8003e02 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	3728      	adds	r7, #40	; 0x28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	00010004 	.word	0x00010004

080040a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	460b      	mov	r3, r1
 80040bc:	813b      	strh	r3, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040c2:	f7ff f8ef 	bl	80032a4 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	f040 80d9 	bne.w	8004288 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2319      	movs	r3, #25
 80040dc:	2201      	movs	r2, #1
 80040de:	496d      	ldr	r1, [pc, #436]	; (8004294 <HAL_I2C_Mem_Write+0x1ec>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fefd 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
 80040ee:	e0cc      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_I2C_Mem_Write+0x56>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e0c5      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d007      	beq.n	8004124 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2221      	movs	r2, #33	; 0x21
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a4d      	ldr	r2, [pc, #308]	; (8004298 <HAL_I2C_Mem_Write+0x1f0>)
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004166:	88f8      	ldrh	r0, [r7, #6]
 8004168:	893a      	ldrh	r2, [r7, #8]
 800416a:	8979      	ldrh	r1, [r7, #10]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	4603      	mov	r3, r0
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fd34 	bl	8004be4 <I2C_RequestMemoryWrite>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d052      	beq.n	8004228 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e081      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 ff7e 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06b      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d11b      	bne.n	8004228 <HAL_I2C_Mem_Write+0x180>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d017      	beq.n	8004228 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1aa      	bne.n	8004186 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 ff6a 	bl	800510e <I2C_WaitOnBTFFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	2b04      	cmp	r3, #4
 8004246:	d107      	bne.n	8004258 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e016      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	00100002 	.word	0x00100002
 8004298:	ffff0000 	.word	0xffff0000

0800429c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	; 0x30
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	4608      	mov	r0, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	461a      	mov	r2, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	817b      	strh	r3, [r7, #10]
 80042ae:	460b      	mov	r3, r1
 80042b0:	813b      	strh	r3, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042b6:	f7fe fff5 	bl	80032a4 <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	f040 8208 	bne.w	80046da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2319      	movs	r3, #25
 80042d0:	2201      	movs	r2, #1
 80042d2:	497b      	ldr	r1, [pc, #492]	; (80044c0 <HAL_I2C_Mem_Read+0x224>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fe03 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
 80042e2:	e1fb      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x56>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e1f4      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d007      	beq.n	8004318 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2222      	movs	r2, #34	; 0x22
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2240      	movs	r2, #64	; 0x40
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <HAL_I2C_Mem_Read+0x228>)
 8004358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800435a:	88f8      	ldrh	r0, [r7, #6]
 800435c:	893a      	ldrh	r2, [r7, #8]
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	4603      	mov	r3, r0
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fcd0 	bl	8004d10 <I2C_RequestMemoryRead>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e1b0      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	d113      	bne.n	80043aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004382:	2300      	movs	r3, #0
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e184      	b.n	80046b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d11b      	bne.n	80043ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e164      	b.n	80046b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d11b      	bne.n	800442a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004400:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	e144      	b.n	80046b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004440:	e138      	b.n	80046b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	2b03      	cmp	r3, #3
 8004448:	f200 80f1 	bhi.w	800462e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	2b01      	cmp	r3, #1
 8004452:	d123      	bne.n	800449c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fe99 	bl	8005190 <I2C_WaitOnRXNEFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e139      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a
 800449a:	e10b      	b.n	80046b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d14e      	bne.n	8004542 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	2200      	movs	r2, #0
 80044ac:	4906      	ldr	r1, [pc, #24]	; (80044c8 <HAL_I2C_Mem_Read+0x22c>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fd16 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e10e      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
 80044be:	bf00      	nop
 80044c0:	00100002 	.word	0x00100002
 80044c4:	ffff0000 	.word	0xffff0000
 80044c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004540:	e0b8      	b.n	80046b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	2200      	movs	r2, #0
 800454a:	4966      	ldr	r1, [pc, #408]	; (80046e4 <HAL_I2C_Mem_Read+0x448>)
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fcc7 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0bf      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	2200      	movs	r2, #0
 80045a6:	494f      	ldr	r1, [pc, #316]	; (80046e4 <HAL_I2C_Mem_Read+0x448>)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fc99 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e091      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800462c:	e042      	b.n	80046b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fdac 	bl	8005190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e04c      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d118      	bne.n	80046b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f47f aec2 	bne.w	8004442 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046da:	2302      	movs	r3, #2
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	00010004 	.word	0x00010004

080046e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	460b      	mov	r3, r1
 80046f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80046f8:	f7fe fdd4 	bl	80032a4 <HAL_GetTick>
 80046fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b20      	cmp	r3, #32
 800470c:	f040 8111 	bne.w	8004932 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2319      	movs	r3, #25
 8004716:	2201      	movs	r2, #1
 8004718:	4988      	ldr	r1, [pc, #544]	; (800493c <HAL_I2C_IsDeviceReady+0x254>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fbe0 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
 8004728:	e104      	b.n	8004934 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_I2C_IsDeviceReady+0x50>
 8004734:	2302      	movs	r3, #2
 8004736:	e0fd      	b.n	8004934 <HAL_I2C_IsDeviceReady+0x24c>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d007      	beq.n	800475e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2224      	movs	r2, #36	; 0x24
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a70      	ldr	r2, [pc, #448]	; (8004940 <HAL_I2C_IsDeviceReady+0x258>)
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004790:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fb9e 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b8:	d103      	bne.n	80047c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e0b6      	b.n	8004934 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047c6:	897b      	ldrh	r3, [r7, #10]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80047d6:	f7fe fd65 	bl	80032a4 <HAL_GetTick>
 80047da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004800:	bf0c      	ite	eq
 8004802:	2301      	moveq	r3, #1
 8004804:	2300      	movne	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800480a:	e025      	b.n	8004858 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800480c:	f7fe fd4a 	bl	80032a4 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <HAL_I2C_IsDeviceReady+0x13a>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d103      	bne.n	800482a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	22a0      	movs	r2, #160	; 0xa0
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2ba0      	cmp	r3, #160	; 0xa0
 8004862:	d005      	beq.n	8004870 <HAL_I2C_IsDeviceReady+0x188>
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <HAL_I2C_IsDeviceReady+0x188>
 800486a:	7dbb      	ldrb	r3, [r7, #22]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0cd      	beq.n	800480c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d129      	bne.n	80048da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004894:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2319      	movs	r3, #25
 80048b2:	2201      	movs	r2, #1
 80048b4:	4921      	ldr	r1, [pc, #132]	; (800493c <HAL_I2C_IsDeviceReady+0x254>)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fb12 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e036      	b.n	8004934 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e02c      	b.n	8004934 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2319      	movs	r3, #25
 80048fa:	2201      	movs	r2, #1
 80048fc:	490f      	ldr	r1, [pc, #60]	; (800493c <HAL_I2C_IsDeviceReady+0x254>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 faee 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e012      	b.n	8004934 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	3301      	adds	r3, #1
 8004912:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	f4ff af32 	bcc.w	8004782 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	00100002 	.word	0x00100002
 8004940:	ffff0000 	.word	0xffff0000

08004944 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	460b      	mov	r3, r1
 8004952:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d006      	beq.n	800496e <I2C_MasterRequestWrite+0x2a>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d003      	beq.n	800496e <I2C_MasterRequestWrite+0x2a>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800496c:	d108      	bne.n	8004980 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e00b      	b.n	8004998 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	2b12      	cmp	r3, #18
 8004986:	d107      	bne.n	8004998 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004996:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fa9b 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049be:	d103      	bne.n	80049c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e035      	b.n	8004a38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d4:	d108      	bne.n	80049e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	e01b      	b.n	8004a20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	11db      	asrs	r3, r3, #7
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0306 	and.w	r3, r3, #6
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f063 030f 	orn	r3, r3, #15
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	490e      	ldr	r1, [pc, #56]	; (8004a40 <I2C_MasterRequestWrite+0xfc>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fac1 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e010      	b.n	8004a38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a16:	897b      	ldrh	r3, [r7, #10]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4907      	ldr	r1, [pc, #28]	; (8004a44 <I2C_MasterRequestWrite+0x100>)
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fab1 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	00010008 	.word	0x00010008
 8004a44:	00010002 	.word	0x00010002

08004a48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	460b      	mov	r3, r1
 8004a56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d006      	beq.n	8004a82 <I2C_MasterRequestRead+0x3a>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d003      	beq.n	8004a82 <I2C_MasterRequestRead+0x3a>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a80:	d108      	bne.n	8004a94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e00b      	b.n	8004aac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	2b11      	cmp	r3, #17
 8004a9a:	d107      	bne.n	8004aac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fa11 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad2:	d103      	bne.n	8004adc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e079      	b.n	8004bd4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae8:	d108      	bne.n	8004afc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]
 8004afa:	e05f      	b.n	8004bbc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004afc:	897b      	ldrh	r3, [r7, #10]
 8004afe:	11db      	asrs	r3, r3, #7
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f003 0306 	and.w	r3, r3, #6
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f063 030f 	orn	r3, r3, #15
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4930      	ldr	r1, [pc, #192]	; (8004bdc <I2C_MasterRequestRead+0x194>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fa37 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e054      	b.n	8004bd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b2a:	897b      	ldrh	r3, [r7, #10]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4929      	ldr	r1, [pc, #164]	; (8004be0 <I2C_MasterRequestRead+0x198>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fa27 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e044      	b.n	8004bd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f9af 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00d      	beq.n	8004ba4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b96:	d103      	bne.n	8004ba0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e017      	b.n	8004bd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ba4:	897b      	ldrh	r3, [r7, #10]
 8004ba6:	11db      	asrs	r3, r3, #7
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f003 0306 	and.w	r3, r3, #6
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f063 030e 	orn	r3, r3, #14
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4907      	ldr	r1, [pc, #28]	; (8004be0 <I2C_MasterRequestRead+0x198>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f9e3 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	00010008 	.word	0x00010008
 8004be0:	00010002 	.word	0x00010002

08004be4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	4608      	mov	r0, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	817b      	strh	r3, [r7, #10]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	813b      	strh	r3, [r7, #8]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f960 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c34:	d103      	bne.n	8004c3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e05f      	b.n	8004d02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c42:	897b      	ldrh	r3, [r7, #10]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	492d      	ldr	r1, [pc, #180]	; (8004d0c <I2C_RequestMemoryWrite+0x128>)
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f998 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e04c      	b.n	8004d02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c80:	6a39      	ldr	r1, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fa02 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d107      	bne.n	8004ca6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e02b      	b.n	8004d02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d105      	bne.n	8004cbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb0:	893b      	ldrh	r3, [r7, #8]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]
 8004cba:	e021      	b.n	8004d00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cbc:	893b      	ldrh	r3, [r7, #8]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	6a39      	ldr	r1, [r7, #32]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f9dc 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00d      	beq.n	8004cf6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d107      	bne.n	8004cf2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e005      	b.n	8004d02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf6:	893b      	ldrh	r3, [r7, #8]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	00010002 	.word	0x00010002

08004d10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	4608      	mov	r0, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	817b      	strh	r3, [r7, #10]
 8004d22:	460b      	mov	r3, r1
 8004d24:	813b      	strh	r3, [r7, #8]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f8c2 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d70:	d103      	bne.n	8004d7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0aa      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d7e:	897b      	ldrh	r3, [r7, #10]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	6a3a      	ldr	r2, [r7, #32]
 8004d92:	4952      	ldr	r1, [pc, #328]	; (8004edc <I2C_RequestMemoryRead+0x1cc>)
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f8fa 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e097      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbc:	6a39      	ldr	r1, [r7, #32]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f964 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d107      	bne.n	8004de2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e076      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dec:	893b      	ldrh	r3, [r7, #8]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	611a      	str	r2, [r3, #16]
 8004df6:	e021      	b.n	8004e3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004df8:	893b      	ldrh	r3, [r7, #8]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e08:	6a39      	ldr	r1, [r7, #32]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f93e 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d107      	bne.n	8004e2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e050      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e32:	893b      	ldrh	r3, [r7, #8]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	6a39      	ldr	r1, [r7, #32]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f923 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00d      	beq.n	8004e68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d107      	bne.n	8004e64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e035      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f82b 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e9e:	d103      	bne.n	8004ea8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e013      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004eac:	897b      	ldrh	r3, [r7, #10]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	4906      	ldr	r1, [pc, #24]	; (8004edc <I2C_RequestMemoryRead+0x1cc>)
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f863 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	00010002 	.word	0x00010002

08004ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef0:	e025      	b.n	8004f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ef8:	d021      	beq.n	8004f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efa:	f7fe f9d3 	bl	80032a4 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d302      	bcc.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d116      	bne.n	8004f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e023      	b.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d10d      	bne.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	43da      	mvns	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	e00c      	b.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d0b6      	beq.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f9c:	e051      	b.n	8005042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fac:	d123      	bne.n	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f043 0204 	orr.w	r2, r3, #4
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e046      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffc:	d021      	beq.n	8005042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fe f951 	bl	80032a4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f043 0220 	orr.w	r2, r3, #32
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e020      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d10c      	bne.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	43da      	mvns	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4013      	ands	r3, r2
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	e00b      	b.n	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	43da      	mvns	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4013      	ands	r3, r2
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d18d      	bne.n	8004f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005098:	e02d      	b.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f8ce 	bl	800523c <I2C_IsAcknowledgeFailed>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e02d      	b.n	8005106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b0:	d021      	beq.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fe f8f7 	bl	80032a4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d116      	bne.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e007      	b.n	8005106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005100:	2b80      	cmp	r3, #128	; 0x80
 8005102:	d1ca      	bne.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800511a:	e02d      	b.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f88d 	bl	800523c <I2C_IsAcknowledgeFailed>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e02d      	b.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005132:	d021      	beq.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005134:	f7fe f8b6 	bl	80032a4 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d116      	bne.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e007      	b.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b04      	cmp	r3, #4
 8005184:	d1ca      	bne.n	800511c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800519c:	e042      	b.n	8005224 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d119      	bne.n	80051e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0210 	mvn.w	r2, #16
 80051b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e029      	b.n	8005234 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e0:	f7fe f860 	bl	80032a4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d302      	bcc.n	80051f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d116      	bne.n	8005224 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e007      	b.n	8005234 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d1b5      	bne.n	800519e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005252:	d11b      	bne.n	800528c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800525c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f043 0204 	orr.w	r2, r3, #4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e267      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d075      	beq.n	80053a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ba:	4b88      	ldr	r3, [pc, #544]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d00c      	beq.n	80052e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c6:	4b85      	ldr	r3, [pc, #532]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d112      	bne.n	80052f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052d2:	4b82      	ldr	r3, [pc, #520]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052de:	d10b      	bne.n	80052f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	4b7e      	ldr	r3, [pc, #504]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d05b      	beq.n	80053a4 <HAL_RCC_OscConfig+0x108>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d157      	bne.n	80053a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e242      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005300:	d106      	bne.n	8005310 <HAL_RCC_OscConfig+0x74>
 8005302:	4b76      	ldr	r3, [pc, #472]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a75      	ldr	r2, [pc, #468]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e01d      	b.n	800534c <HAL_RCC_OscConfig+0xb0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005318:	d10c      	bne.n	8005334 <HAL_RCC_OscConfig+0x98>
 800531a:	4b70      	ldr	r3, [pc, #448]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a6f      	ldr	r2, [pc, #444]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	4b6d      	ldr	r3, [pc, #436]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a6c      	ldr	r2, [pc, #432]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 800532c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e00b      	b.n	800534c <HAL_RCC_OscConfig+0xb0>
 8005334:	4b69      	ldr	r3, [pc, #420]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a68      	ldr	r2, [pc, #416]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 800533a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4b66      	ldr	r3, [pc, #408]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a65      	ldr	r2, [pc, #404]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d013      	beq.n	800537c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005354:	f7fd ffa6 	bl	80032a4 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800535c:	f7fd ffa2 	bl	80032a4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b64      	cmp	r3, #100	; 0x64
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e207      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536e:	4b5b      	ldr	r3, [pc, #364]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0xc0>
 800537a:	e014      	b.n	80053a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fd ff92 	bl	80032a4 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005384:	f7fd ff8e 	bl	80032a4 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	; 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e1f3      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005396:	4b51      	ldr	r3, [pc, #324]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0xe8>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d063      	beq.n	800547a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053b2:	4b4a      	ldr	r3, [pc, #296]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d11c      	bne.n	8005404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ca:	4b44      	ldr	r3, [pc, #272]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d116      	bne.n	8005404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	4b41      	ldr	r3, [pc, #260]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <HAL_RCC_OscConfig+0x152>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d001      	beq.n	80053ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e1c7      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ee:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4937      	ldr	r1, [pc, #220]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005402:	e03a      	b.n	800547a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d020      	beq.n	800544e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800540c:	4b34      	ldr	r3, [pc, #208]	; (80054e0 <HAL_RCC_OscConfig+0x244>)
 800540e:	2201      	movs	r2, #1
 8005410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7fd ff47 	bl	80032a4 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541a:	f7fd ff43 	bl	80032a4 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e1a8      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542c:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005438:	4b28      	ldr	r3, [pc, #160]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4925      	ldr	r1, [pc, #148]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]
 800544c:	e015      	b.n	800547a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800544e:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <HAL_RCC_OscConfig+0x244>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fd ff26 	bl	80032a4 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800545c:	f7fd ff22 	bl	80032a4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e187      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546e:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d036      	beq.n	80054f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <HAL_RCC_OscConfig+0x248>)
 8005490:	2201      	movs	r2, #1
 8005492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005494:	f7fd ff06 	bl	80032a4 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800549c:	f7fd ff02 	bl	80032a4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e167      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ae:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_RCC_OscConfig+0x240>)
 80054b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x200>
 80054ba:	e01b      	b.n	80054f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <HAL_RCC_OscConfig+0x248>)
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c2:	f7fd feef 	bl	80032a4 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c8:	e00e      	b.n	80054e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ca:	f7fd feeb 	bl	80032a4 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d907      	bls.n	80054e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e150      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
 80054dc:	40023800 	.word	0x40023800
 80054e0:	42470000 	.word	0x42470000
 80054e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e8:	4b88      	ldr	r3, [pc, #544]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80054ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1ea      	bne.n	80054ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8097 	beq.w	8005630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005502:	2300      	movs	r3, #0
 8005504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005506:	4b81      	ldr	r3, [pc, #516]	; (800570c <HAL_RCC_OscConfig+0x470>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	4b7d      	ldr	r3, [pc, #500]	; (800570c <HAL_RCC_OscConfig+0x470>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	4a7c      	ldr	r2, [pc, #496]	; (800570c <HAL_RCC_OscConfig+0x470>)
 800551c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005520:	6413      	str	r3, [r2, #64]	; 0x40
 8005522:	4b7a      	ldr	r3, [pc, #488]	; (800570c <HAL_RCC_OscConfig+0x470>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552e:	2301      	movs	r3, #1
 8005530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005532:	4b77      	ldr	r3, [pc, #476]	; (8005710 <HAL_RCC_OscConfig+0x474>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d118      	bne.n	8005570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800553e:	4b74      	ldr	r3, [pc, #464]	; (8005710 <HAL_RCC_OscConfig+0x474>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a73      	ldr	r2, [pc, #460]	; (8005710 <HAL_RCC_OscConfig+0x474>)
 8005544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554a:	f7fd feab 	bl	80032a4 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005552:	f7fd fea7 	bl	80032a4 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e10c      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005564:	4b6a      	ldr	r3, [pc, #424]	; (8005710 <HAL_RCC_OscConfig+0x474>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d106      	bne.n	8005586 <HAL_RCC_OscConfig+0x2ea>
 8005578:	4b64      	ldr	r3, [pc, #400]	; (800570c <HAL_RCC_OscConfig+0x470>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	4a63      	ldr	r2, [pc, #396]	; (800570c <HAL_RCC_OscConfig+0x470>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	6713      	str	r3, [r2, #112]	; 0x70
 8005584:	e01c      	b.n	80055c0 <HAL_RCC_OscConfig+0x324>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b05      	cmp	r3, #5
 800558c:	d10c      	bne.n	80055a8 <HAL_RCC_OscConfig+0x30c>
 800558e:	4b5f      	ldr	r3, [pc, #380]	; (800570c <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	4a5e      	ldr	r2, [pc, #376]	; (800570c <HAL_RCC_OscConfig+0x470>)
 8005594:	f043 0304 	orr.w	r3, r3, #4
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
 800559a:	4b5c      	ldr	r3, [pc, #368]	; (800570c <HAL_RCC_OscConfig+0x470>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	4a5b      	ldr	r2, [pc, #364]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6713      	str	r3, [r2, #112]	; 0x70
 80055a6:	e00b      	b.n	80055c0 <HAL_RCC_OscConfig+0x324>
 80055a8:	4b58      	ldr	r3, [pc, #352]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	4a57      	ldr	r2, [pc, #348]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	6713      	str	r3, [r2, #112]	; 0x70
 80055b4:	4b55      	ldr	r3, [pc, #340]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80055b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b8:	4a54      	ldr	r2, [pc, #336]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80055ba:	f023 0304 	bic.w	r3, r3, #4
 80055be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d015      	beq.n	80055f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c8:	f7fd fe6c 	bl	80032a4 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d0:	f7fd fe68 	bl	80032a4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	; 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0cb      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e6:	4b49      	ldr	r3, [pc, #292]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0ee      	beq.n	80055d0 <HAL_RCC_OscConfig+0x334>
 80055f2:	e014      	b.n	800561e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f4:	f7fd fe56 	bl	80032a4 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055fc:	f7fd fe52 	bl	80032a4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	; 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e0b5      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005612:	4b3e      	ldr	r3, [pc, #248]	; (800570c <HAL_RCC_OscConfig+0x470>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1ee      	bne.n	80055fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d105      	bne.n	8005630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005624:	4b39      	ldr	r3, [pc, #228]	; (800570c <HAL_RCC_OscConfig+0x470>)
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	4a38      	ldr	r2, [pc, #224]	; (800570c <HAL_RCC_OscConfig+0x470>)
 800562a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800562e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a1 	beq.w	800577c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800563a:	4b34      	ldr	r3, [pc, #208]	; (800570c <HAL_RCC_OscConfig+0x470>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b08      	cmp	r3, #8
 8005644:	d05c      	beq.n	8005700 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d141      	bne.n	80056d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <HAL_RCC_OscConfig+0x478>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fd fe26 	bl	80032a4 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565c:	f7fd fe22 	bl	80032a4 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e087      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	4b27      	ldr	r3, [pc, #156]	; (800570c <HAL_RCC_OscConfig+0x470>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	3b01      	subs	r3, #1
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	061b      	lsls	r3, r3, #24
 800569e:	491b      	ldr	r1, [pc, #108]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a4:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <HAL_RCC_OscConfig+0x478>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056aa:	f7fd fdfb 	bl	80032a4 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b2:	f7fd fdf7 	bl	80032a4 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e05c      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x416>
 80056d0:	e054      	b.n	800577c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <HAL_RCC_OscConfig+0x478>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fd fde4 	bl	80032a4 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fd fde0 	bl	80032a4 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e045      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <HAL_RCC_OscConfig+0x470>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x444>
 80056fe:	e03d      	b.n	800577c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d107      	bne.n	8005718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e038      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
 800570c:	40023800 	.word	0x40023800
 8005710:	40007000 	.word	0x40007000
 8005714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_RCC_OscConfig+0x4ec>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d028      	beq.n	8005778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005730:	429a      	cmp	r2, r3
 8005732:	d121      	bne.n	8005778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d11a      	bne.n	8005778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005748:	4013      	ands	r3, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800574e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005750:	4293      	cmp	r3, r2
 8005752:	d111      	bne.n	8005778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	3b01      	subs	r3, #1
 8005762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005764:	429a      	cmp	r2, r3
 8005766:	d107      	bne.n	8005778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005774:	429a      	cmp	r2, r3
 8005776:	d001      	beq.n	800577c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800

0800578c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0cc      	b.n	800593a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057a0:	4b68      	ldr	r3, [pc, #416]	; (8005944 <HAL_RCC_ClockConfig+0x1b8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d90c      	bls.n	80057c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ae:	4b65      	ldr	r3, [pc, #404]	; (8005944 <HAL_RCC_ClockConfig+0x1b8>)
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b6:	4b63      	ldr	r3, [pc, #396]	; (8005944 <HAL_RCC_ClockConfig+0x1b8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0b8      	b.n	800593a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d020      	beq.n	8005816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057e0:	4b59      	ldr	r3, [pc, #356]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4a58      	ldr	r2, [pc, #352]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057f8:	4b53      	ldr	r3, [pc, #332]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4a52      	ldr	r2, [pc, #328]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005804:	4b50      	ldr	r3, [pc, #320]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	494d      	ldr	r1, [pc, #308]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d044      	beq.n	80058ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d107      	bne.n	800583a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582a:	4b47      	ldr	r3, [pc, #284]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d119      	bne.n	800586a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e07f      	b.n	800593a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d003      	beq.n	800584a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005846:	2b03      	cmp	r3, #3
 8005848:	d107      	bne.n	800585a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800584a:	4b3f      	ldr	r3, [pc, #252]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e06f      	b.n	800593a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800585a:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e067      	b.n	800593a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800586a:	4b37      	ldr	r3, [pc, #220]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f023 0203 	bic.w	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4934      	ldr	r1, [pc, #208]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	4313      	orrs	r3, r2
 800587a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800587c:	f7fd fd12 	bl	80032a4 <HAL_GetTick>
 8005880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005882:	e00a      	b.n	800589a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005884:	f7fd fd0e 	bl	80032a4 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005892:	4293      	cmp	r3, r2
 8005894:	d901      	bls.n	800589a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e04f      	b.n	800593a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589a:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 020c 	and.w	r2, r3, #12
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d1eb      	bne.n	8005884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058ac:	4b25      	ldr	r3, [pc, #148]	; (8005944 <HAL_RCC_ClockConfig+0x1b8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d20c      	bcs.n	80058d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <HAL_RCC_ClockConfig+0x1b8>)
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b20      	ldr	r3, [pc, #128]	; (8005944 <HAL_RCC_ClockConfig+0x1b8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e032      	b.n	800593a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e0:	4b19      	ldr	r3, [pc, #100]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4916      	ldr	r1, [pc, #88]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	490e      	ldr	r1, [pc, #56]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005912:	f000 f821 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 8005916:	4602      	mov	r2, r0
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	490a      	ldr	r1, [pc, #40]	; (800594c <HAL_RCC_ClockConfig+0x1c0>)
 8005924:	5ccb      	ldrb	r3, [r1, r3]
 8005926:	fa22 f303 	lsr.w	r3, r2, r3
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <HAL_RCC_ClockConfig+0x1c4>)
 800592c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <HAL_RCC_ClockConfig+0x1c8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd fc72 	bl	800321c <HAL_InitTick>

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40023c00 	.word	0x40023c00
 8005948:	40023800 	.word	0x40023800
 800594c:	08009888 	.word	0x08009888
 8005950:	200000b8 	.word	0x200000b8
 8005954:	200000bc 	.word	0x200000bc

08005958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800595c:	b090      	sub	sp, #64	; 0x40
 800595e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
 8005964:	2300      	movs	r3, #0
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005968:	2300      	movs	r3, #0
 800596a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005970:	4b59      	ldr	r3, [pc, #356]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b08      	cmp	r3, #8
 800597a:	d00d      	beq.n	8005998 <HAL_RCC_GetSysClockFreq+0x40>
 800597c:	2b08      	cmp	r3, #8
 800597e:	f200 80a1 	bhi.w	8005ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0x34>
 8005986:	2b04      	cmp	r3, #4
 8005988:	d003      	beq.n	8005992 <HAL_RCC_GetSysClockFreq+0x3a>
 800598a:	e09b      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b53      	ldr	r3, [pc, #332]	; (8005adc <HAL_RCC_GetSysClockFreq+0x184>)
 800598e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005990:	e09b      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005992:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005996:	e098      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005998:	4b4f      	ldr	r3, [pc, #316]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059a2:	4b4d      	ldr	r3, [pc, #308]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d028      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ae:	4b4a      	ldr	r3, [pc, #296]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	099b      	lsrs	r3, r3, #6
 80059b4:	2200      	movs	r2, #0
 80059b6:	623b      	str	r3, [r7, #32]
 80059b8:	627a      	str	r2, [r7, #36]	; 0x24
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059c0:	2100      	movs	r1, #0
 80059c2:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80059c4:	fb03 f201 	mul.w	r2, r3, r1
 80059c8:	2300      	movs	r3, #0
 80059ca:	fb00 f303 	mul.w	r3, r0, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	4a43      	ldr	r2, [pc, #268]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80059d2:	fba0 1202 	umull	r1, r2, r0, r2
 80059d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d8:	460a      	mov	r2, r1
 80059da:	62ba      	str	r2, [r7, #40]	; 0x28
 80059dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059de:	4413      	add	r3, r2
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	2200      	movs	r2, #0
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	61fa      	str	r2, [r7, #28]
 80059ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059f2:	f7fb f981 	bl	8000cf8 <__aeabi_uldivmod>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4613      	mov	r3, r2
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fe:	e053      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	2200      	movs	r2, #0
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	617a      	str	r2, [r7, #20]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a12:	f04f 0b00 	mov.w	fp, #0
 8005a16:	4652      	mov	r2, sl
 8005a18:	465b      	mov	r3, fp
 8005a1a:	f04f 0000 	mov.w	r0, #0
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	0159      	lsls	r1, r3, #5
 8005a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a28:	0150      	lsls	r0, r2, #5
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8005a32:	eb63 090b 	sbc.w	r9, r3, fp
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8005a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	00eb      	lsls	r3, r5, #3
 8005a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a60:	00e2      	lsls	r2, r4, #3
 8005a62:	4614      	mov	r4, r2
 8005a64:	461d      	mov	r5, r3
 8005a66:	eb14 030a 	adds.w	r3, r4, sl
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	eb45 030b 	adc.w	r3, r5, fp
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7e:	4629      	mov	r1, r5
 8005a80:	028b      	lsls	r3, r1, #10
 8005a82:	4621      	mov	r1, r4
 8005a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a88:	4621      	mov	r1, r4
 8005a8a:	028a      	lsls	r2, r1, #10
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a92:	2200      	movs	r2, #0
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	60fa      	str	r2, [r7, #12]
 8005a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a9c:	f7fb f92c 	bl	8000cf8 <__aeabi_uldivmod>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ac2:	e002      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCC_GetSysClockFreq+0x184>)
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3740      	adds	r7, #64	; 0x40
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	017d7840 	.word	0x017d7840

08005ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	200000b8 	.word	0x200000b8

08005afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b00:	f7ff fff0 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b04:	4602      	mov	r2, r0
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	0a9b      	lsrs	r3, r3, #10
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	4903      	ldr	r1, [pc, #12]	; (8005b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b12:	5ccb      	ldrb	r3, [r1, r3]
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	08009898 	.word	0x08009898

08005b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b28:	f7ff ffdc 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0b5b      	lsrs	r3, r3, #13
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4903      	ldr	r1, [pc, #12]	; (8005b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	08009898 	.word	0x08009898

08005b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e03f      	b.n	8005bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fd fabe 	bl	80030f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2224      	movs	r2, #36	; 0x24
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f929 	bl	8005de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695a      	ldr	r2, [r3, #20]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b08a      	sub	sp, #40	; 0x28
 8005bea:	af02      	add	r7, sp, #8
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d17c      	bne.n	8005d00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_UART_Transmit+0x2c>
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e075      	b.n	8005d02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_UART_Transmit+0x3e>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e06e      	b.n	8005d02 <HAL_UART_Transmit+0x11c>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2221      	movs	r2, #33	; 0x21
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c3a:	f7fd fb33 	bl	80032a4 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	88fa      	ldrh	r2, [r7, #6]
 8005c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d108      	bne.n	8005c68 <HAL_UART_Transmit+0x82>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	e003      	b.n	8005c70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c78:	e02a      	b.n	8005cd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2200      	movs	r2, #0
 8005c82:	2180      	movs	r1, #128	; 0x80
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f840 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e036      	b.n	8005d02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	3302      	adds	r3, #2
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	e007      	b.n	8005cc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1cf      	bne.n	8005c7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2140      	movs	r1, #64	; 0x40
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f810 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e006      	b.n	8005d02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e000      	b.n	8005d02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b090      	sub	sp, #64	; 0x40
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	e050      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d22:	d04c      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d2a:	f7fd fabb 	bl	80032a4 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d241      	bcs.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d5a:	637a      	str	r2, [r7, #52]	; 0x34
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e5      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3314      	adds	r3, #20
 8005d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d8e:	623a      	str	r2, [r7, #32]
 8005d90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	69f9      	ldr	r1, [r7, #28]
 8005d94:	6a3a      	ldr	r2, [r7, #32]
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e5      	bne.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e00f      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	bf0c      	ite	eq
 8005dce:	2301      	moveq	r3, #1
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d09f      	beq.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3740      	adds	r7, #64	; 0x40
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dec:	b0c0      	sub	sp, #256	; 0x100
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e04:	68d9      	ldr	r1, [r3, #12]
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	ea40 0301 	orr.w	r3, r0, r1
 8005e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e40:	f021 010c 	bic.w	r1, r1, #12
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e62:	6999      	ldr	r1, [r3, #24]
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	ea40 0301 	orr.w	r3, r0, r1
 8005e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b8f      	ldr	r3, [pc, #572]	; (80060b4 <UART_SetConfig+0x2cc>)
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d005      	beq.n	8005e88 <UART_SetConfig+0xa0>
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b8d      	ldr	r3, [pc, #564]	; (80060b8 <UART_SetConfig+0x2d0>)
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d104      	bne.n	8005e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e88:	f7ff fe4c 	bl	8005b24 <HAL_RCC_GetPCLK2Freq>
 8005e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e90:	e003      	b.n	8005e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e92:	f7ff fe33 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 8005e96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea4:	f040 810c 	bne.w	80060c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eba:	4622      	mov	r2, r4
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	1891      	adds	r1, r2, r2
 8005ec0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ec2:	415b      	adcs	r3, r3
 8005ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eca:	4621      	mov	r1, r4
 8005ecc:	eb12 0801 	adds.w	r8, r2, r1
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	eb43 0901 	adc.w	r9, r3, r1
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eea:	4690      	mov	r8, r2
 8005eec:	4699      	mov	r9, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	eb18 0303 	adds.w	r3, r8, r3
 8005ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ef8:	462b      	mov	r3, r5
 8005efa:	eb49 0303 	adc.w	r3, r9, r3
 8005efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f16:	460b      	mov	r3, r1
 8005f18:	18db      	adds	r3, r3, r3
 8005f1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	eb42 0303 	adc.w	r3, r2, r3
 8005f22:	657b      	str	r3, [r7, #84]	; 0x54
 8005f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f2c:	f7fa fee4 	bl	8000cf8 <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4b61      	ldr	r3, [pc, #388]	; (80060bc <UART_SetConfig+0x2d4>)
 8005f36:	fba3 2302 	umull	r2, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	011c      	lsls	r4, r3, #4
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f60:	4641      	mov	r1, r8
 8005f62:	eb12 0a01 	adds.w	sl, r2, r1
 8005f66:	4649      	mov	r1, r9
 8005f68:	eb43 0b01 	adc.w	fp, r3, r1
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f80:	4692      	mov	sl, r2
 8005f82:	469b      	mov	fp, r3
 8005f84:	4643      	mov	r3, r8
 8005f86:	eb1a 0303 	adds.w	r3, sl, r3
 8005f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f8e:	464b      	mov	r3, r9
 8005f90:	eb4b 0303 	adc.w	r3, fp, r3
 8005f94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fac:	460b      	mov	r3, r1
 8005fae:	18db      	adds	r3, r3, r3
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	eb42 0303 	adc.w	r3, r2, r3
 8005fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fc2:	f7fa fe99 	bl	8000cf8 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4b3b      	ldr	r3, [pc, #236]	; (80060bc <UART_SetConfig+0x2d4>)
 8005fce:	fba3 2301 	umull	r2, r3, r3, r1
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	2264      	movs	r2, #100	; 0x64
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	1acb      	subs	r3, r1, r3
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fe2:	4b36      	ldr	r3, [pc, #216]	; (80060bc <UART_SetConfig+0x2d4>)
 8005fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ff0:	441c      	add	r4, r3
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	1891      	adds	r1, r2, r2
 800600a:	63b9      	str	r1, [r7, #56]	; 0x38
 800600c:	415b      	adcs	r3, r3
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006014:	4641      	mov	r1, r8
 8006016:	1851      	adds	r1, r2, r1
 8006018:	6339      	str	r1, [r7, #48]	; 0x30
 800601a:	4649      	mov	r1, r9
 800601c:	414b      	adcs	r3, r1
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800602c:	4659      	mov	r1, fp
 800602e:	00cb      	lsls	r3, r1, #3
 8006030:	4651      	mov	r1, sl
 8006032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006036:	4651      	mov	r1, sl
 8006038:	00ca      	lsls	r2, r1, #3
 800603a:	4610      	mov	r0, r2
 800603c:	4619      	mov	r1, r3
 800603e:	4603      	mov	r3, r0
 8006040:	4642      	mov	r2, r8
 8006042:	189b      	adds	r3, r3, r2
 8006044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006048:	464b      	mov	r3, r9
 800604a:	460a      	mov	r2, r1
 800604c:	eb42 0303 	adc.w	r3, r2, r3
 8006050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006060:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006068:	460b      	mov	r3, r1
 800606a:	18db      	adds	r3, r3, r3
 800606c:	62bb      	str	r3, [r7, #40]	; 0x28
 800606e:	4613      	mov	r3, r2
 8006070:	eb42 0303 	adc.w	r3, r2, r3
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800607a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800607e:	f7fa fe3b 	bl	8000cf8 <__aeabi_uldivmod>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <UART_SetConfig+0x2d4>)
 8006088:	fba3 1302 	umull	r1, r3, r3, r2
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	2164      	movs	r1, #100	; 0x64
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	3332      	adds	r3, #50	; 0x32
 800609a:	4a08      	ldr	r2, [pc, #32]	; (80060bc <UART_SetConfig+0x2d4>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	f003 0207 	and.w	r2, r3, #7
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4422      	add	r2, r4
 80060ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060b0:	e105      	b.n	80062be <UART_SetConfig+0x4d6>
 80060b2:	bf00      	nop
 80060b4:	40011000 	.word	0x40011000
 80060b8:	40011400 	.word	0x40011400
 80060bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060d2:	4642      	mov	r2, r8
 80060d4:	464b      	mov	r3, r9
 80060d6:	1891      	adds	r1, r2, r2
 80060d8:	6239      	str	r1, [r7, #32]
 80060da:	415b      	adcs	r3, r3
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
 80060de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060e2:	4641      	mov	r1, r8
 80060e4:	1854      	adds	r4, r2, r1
 80060e6:	4649      	mov	r1, r9
 80060e8:	eb43 0501 	adc.w	r5, r3, r1
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	00eb      	lsls	r3, r5, #3
 80060f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060fa:	00e2      	lsls	r2, r4, #3
 80060fc:	4614      	mov	r4, r2
 80060fe:	461d      	mov	r5, r3
 8006100:	4643      	mov	r3, r8
 8006102:	18e3      	adds	r3, r4, r3
 8006104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006108:	464b      	mov	r3, r9
 800610a:	eb45 0303 	adc.w	r3, r5, r3
 800610e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800611e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800612e:	4629      	mov	r1, r5
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	4621      	mov	r1, r4
 8006134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006138:	4621      	mov	r1, r4
 800613a:	008a      	lsls	r2, r1, #2
 800613c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006140:	f7fa fdda 	bl	8000cf8 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b60      	ldr	r3, [pc, #384]	; (80062cc <UART_SetConfig+0x4e4>)
 800614a:	fba3 2302 	umull	r2, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	011c      	lsls	r4, r3, #4
 8006152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006156:	2200      	movs	r2, #0
 8006158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800615c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	1891      	adds	r1, r2, r2
 800616a:	61b9      	str	r1, [r7, #24]
 800616c:	415b      	adcs	r3, r3
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006174:	4641      	mov	r1, r8
 8006176:	1851      	adds	r1, r2, r1
 8006178:	6139      	str	r1, [r7, #16]
 800617a:	4649      	mov	r1, r9
 800617c:	414b      	adcs	r3, r1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800618c:	4659      	mov	r1, fp
 800618e:	00cb      	lsls	r3, r1, #3
 8006190:	4651      	mov	r1, sl
 8006192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006196:	4651      	mov	r1, sl
 8006198:	00ca      	lsls	r2, r1, #3
 800619a:	4610      	mov	r0, r2
 800619c:	4619      	mov	r1, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	4642      	mov	r2, r8
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061a8:	464b      	mov	r3, r9
 80061aa:	460a      	mov	r2, r1
 80061ac:	eb42 0303 	adc.w	r3, r2, r3
 80061b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80061be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061cc:	4649      	mov	r1, r9
 80061ce:	008b      	lsls	r3, r1, #2
 80061d0:	4641      	mov	r1, r8
 80061d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d6:	4641      	mov	r1, r8
 80061d8:	008a      	lsls	r2, r1, #2
 80061da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061de:	f7fa fd8b 	bl	8000cf8 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4b39      	ldr	r3, [pc, #228]	; (80062cc <UART_SetConfig+0x4e4>)
 80061e8:	fba3 1302 	umull	r1, r3, r3, r2
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	2164      	movs	r1, #100	; 0x64
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	3332      	adds	r3, #50	; 0x32
 80061fa:	4a34      	ldr	r2, [pc, #208]	; (80062cc <UART_SetConfig+0x4e4>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006206:	441c      	add	r4, r3
 8006208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620c:	2200      	movs	r2, #0
 800620e:	673b      	str	r3, [r7, #112]	; 0x70
 8006210:	677a      	str	r2, [r7, #116]	; 0x74
 8006212:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006216:	4642      	mov	r2, r8
 8006218:	464b      	mov	r3, r9
 800621a:	1891      	adds	r1, r2, r2
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	415b      	adcs	r3, r3
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006226:	4641      	mov	r1, r8
 8006228:	1851      	adds	r1, r2, r1
 800622a:	6039      	str	r1, [r7, #0]
 800622c:	4649      	mov	r1, r9
 800622e:	414b      	adcs	r3, r1
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800623e:	4659      	mov	r1, fp
 8006240:	00cb      	lsls	r3, r1, #3
 8006242:	4651      	mov	r1, sl
 8006244:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006248:	4651      	mov	r1, sl
 800624a:	00ca      	lsls	r2, r1, #3
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	4603      	mov	r3, r0
 8006252:	4642      	mov	r2, r8
 8006254:	189b      	adds	r3, r3, r2
 8006256:	66bb      	str	r3, [r7, #104]	; 0x68
 8006258:	464b      	mov	r3, r9
 800625a:	460a      	mov	r2, r1
 800625c:	eb42 0303 	adc.w	r3, r2, r3
 8006260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	663b      	str	r3, [r7, #96]	; 0x60
 800626c:	667a      	str	r2, [r7, #100]	; 0x64
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800627a:	4649      	mov	r1, r9
 800627c:	008b      	lsls	r3, r1, #2
 800627e:	4641      	mov	r1, r8
 8006280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006284:	4641      	mov	r1, r8
 8006286:	008a      	lsls	r2, r1, #2
 8006288:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800628c:	f7fa fd34 	bl	8000cf8 <__aeabi_uldivmod>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <UART_SetConfig+0x4e4>)
 8006296:	fba3 1302 	umull	r1, r3, r3, r2
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	2164      	movs	r1, #100	; 0x64
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	3332      	adds	r3, #50	; 0x32
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <UART_SetConfig+0x4e4>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	f003 020f 	and.w	r2, r3, #15
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4422      	add	r2, r4
 80062bc:	609a      	str	r2, [r3, #8]
}
 80062be:	bf00      	nop
 80062c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062c4:	46bd      	mov	sp, r7
 80062c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ca:	bf00      	nop
 80062cc:	51eb851f 	.word	0x51eb851f

080062d0 <__errno>:
 80062d0:	4b01      	ldr	r3, [pc, #4]	; (80062d8 <__errno+0x8>)
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	200000c4 	.word	0x200000c4

080062dc <__libc_init_array>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4d0d      	ldr	r5, [pc, #52]	; (8006314 <__libc_init_array+0x38>)
 80062e0:	4c0d      	ldr	r4, [pc, #52]	; (8006318 <__libc_init_array+0x3c>)
 80062e2:	1b64      	subs	r4, r4, r5
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	2600      	movs	r6, #0
 80062e8:	42a6      	cmp	r6, r4
 80062ea:	d109      	bne.n	8006300 <__libc_init_array+0x24>
 80062ec:	4d0b      	ldr	r5, [pc, #44]	; (800631c <__libc_init_array+0x40>)
 80062ee:	4c0c      	ldr	r4, [pc, #48]	; (8006320 <__libc_init_array+0x44>)
 80062f0:	f003 fa56 	bl	80097a0 <_init>
 80062f4:	1b64      	subs	r4, r4, r5
 80062f6:	10a4      	asrs	r4, r4, #2
 80062f8:	2600      	movs	r6, #0
 80062fa:	42a6      	cmp	r6, r4
 80062fc:	d105      	bne.n	800630a <__libc_init_array+0x2e>
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	f855 3b04 	ldr.w	r3, [r5], #4
 8006304:	4798      	blx	r3
 8006306:	3601      	adds	r6, #1
 8006308:	e7ee      	b.n	80062e8 <__libc_init_array+0xc>
 800630a:	f855 3b04 	ldr.w	r3, [r5], #4
 800630e:	4798      	blx	r3
 8006310:	3601      	adds	r6, #1
 8006312:	e7f2      	b.n	80062fa <__libc_init_array+0x1e>
 8006314:	08009cf8 	.word	0x08009cf8
 8006318:	08009cf8 	.word	0x08009cf8
 800631c:	08009cf8 	.word	0x08009cf8
 8006320:	08009cfc 	.word	0x08009cfc

08006324 <memset>:
 8006324:	4402      	add	r2, r0
 8006326:	4603      	mov	r3, r0
 8006328:	4293      	cmp	r3, r2
 800632a:	d100      	bne.n	800632e <memset+0xa>
 800632c:	4770      	bx	lr
 800632e:	f803 1b01 	strb.w	r1, [r3], #1
 8006332:	e7f9      	b.n	8006328 <memset+0x4>

08006334 <__cvt>:
 8006334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006338:	ec55 4b10 	vmov	r4, r5, d0
 800633c:	2d00      	cmp	r5, #0
 800633e:	460e      	mov	r6, r1
 8006340:	4619      	mov	r1, r3
 8006342:	462b      	mov	r3, r5
 8006344:	bfbb      	ittet	lt
 8006346:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800634a:	461d      	movlt	r5, r3
 800634c:	2300      	movge	r3, #0
 800634e:	232d      	movlt	r3, #45	; 0x2d
 8006350:	700b      	strb	r3, [r1, #0]
 8006352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006354:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006358:	4691      	mov	r9, r2
 800635a:	f023 0820 	bic.w	r8, r3, #32
 800635e:	bfbc      	itt	lt
 8006360:	4622      	movlt	r2, r4
 8006362:	4614      	movlt	r4, r2
 8006364:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006368:	d005      	beq.n	8006376 <__cvt+0x42>
 800636a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800636e:	d100      	bne.n	8006372 <__cvt+0x3e>
 8006370:	3601      	adds	r6, #1
 8006372:	2102      	movs	r1, #2
 8006374:	e000      	b.n	8006378 <__cvt+0x44>
 8006376:	2103      	movs	r1, #3
 8006378:	ab03      	add	r3, sp, #12
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	ab02      	add	r3, sp, #8
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	ec45 4b10 	vmov	d0, r4, r5
 8006384:	4653      	mov	r3, sl
 8006386:	4632      	mov	r2, r6
 8006388:	f000 fcea 	bl	8006d60 <_dtoa_r>
 800638c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006390:	4607      	mov	r7, r0
 8006392:	d102      	bne.n	800639a <__cvt+0x66>
 8006394:	f019 0f01 	tst.w	r9, #1
 8006398:	d022      	beq.n	80063e0 <__cvt+0xac>
 800639a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800639e:	eb07 0906 	add.w	r9, r7, r6
 80063a2:	d110      	bne.n	80063c6 <__cvt+0x92>
 80063a4:	783b      	ldrb	r3, [r7, #0]
 80063a6:	2b30      	cmp	r3, #48	; 0x30
 80063a8:	d10a      	bne.n	80063c0 <__cvt+0x8c>
 80063aa:	2200      	movs	r2, #0
 80063ac:	2300      	movs	r3, #0
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa fb91 	bl	8000ad8 <__aeabi_dcmpeq>
 80063b6:	b918      	cbnz	r0, 80063c0 <__cvt+0x8c>
 80063b8:	f1c6 0601 	rsb	r6, r6, #1
 80063bc:	f8ca 6000 	str.w	r6, [sl]
 80063c0:	f8da 3000 	ldr.w	r3, [sl]
 80063c4:	4499      	add	r9, r3
 80063c6:	2200      	movs	r2, #0
 80063c8:	2300      	movs	r3, #0
 80063ca:	4620      	mov	r0, r4
 80063cc:	4629      	mov	r1, r5
 80063ce:	f7fa fb83 	bl	8000ad8 <__aeabi_dcmpeq>
 80063d2:	b108      	cbz	r0, 80063d8 <__cvt+0xa4>
 80063d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80063d8:	2230      	movs	r2, #48	; 0x30
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	454b      	cmp	r3, r9
 80063de:	d307      	bcc.n	80063f0 <__cvt+0xbc>
 80063e0:	9b03      	ldr	r3, [sp, #12]
 80063e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063e4:	1bdb      	subs	r3, r3, r7
 80063e6:	4638      	mov	r0, r7
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	b004      	add	sp, #16
 80063ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f0:	1c59      	adds	r1, r3, #1
 80063f2:	9103      	str	r1, [sp, #12]
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e7f0      	b.n	80063da <__cvt+0xa6>

080063f8 <__exponent>:
 80063f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063fa:	4603      	mov	r3, r0
 80063fc:	2900      	cmp	r1, #0
 80063fe:	bfb8      	it	lt
 8006400:	4249      	neglt	r1, r1
 8006402:	f803 2b02 	strb.w	r2, [r3], #2
 8006406:	bfb4      	ite	lt
 8006408:	222d      	movlt	r2, #45	; 0x2d
 800640a:	222b      	movge	r2, #43	; 0x2b
 800640c:	2909      	cmp	r1, #9
 800640e:	7042      	strb	r2, [r0, #1]
 8006410:	dd2a      	ble.n	8006468 <__exponent+0x70>
 8006412:	f10d 0407 	add.w	r4, sp, #7
 8006416:	46a4      	mov	ip, r4
 8006418:	270a      	movs	r7, #10
 800641a:	46a6      	mov	lr, r4
 800641c:	460a      	mov	r2, r1
 800641e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006422:	fb07 1516 	mls	r5, r7, r6, r1
 8006426:	3530      	adds	r5, #48	; 0x30
 8006428:	2a63      	cmp	r2, #99	; 0x63
 800642a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800642e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006432:	4631      	mov	r1, r6
 8006434:	dcf1      	bgt.n	800641a <__exponent+0x22>
 8006436:	3130      	adds	r1, #48	; 0x30
 8006438:	f1ae 0502 	sub.w	r5, lr, #2
 800643c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006440:	1c44      	adds	r4, r0, #1
 8006442:	4629      	mov	r1, r5
 8006444:	4561      	cmp	r1, ip
 8006446:	d30a      	bcc.n	800645e <__exponent+0x66>
 8006448:	f10d 0209 	add.w	r2, sp, #9
 800644c:	eba2 020e 	sub.w	r2, r2, lr
 8006450:	4565      	cmp	r5, ip
 8006452:	bf88      	it	hi
 8006454:	2200      	movhi	r2, #0
 8006456:	4413      	add	r3, r2
 8006458:	1a18      	subs	r0, r3, r0
 800645a:	b003      	add	sp, #12
 800645c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800645e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006462:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006466:	e7ed      	b.n	8006444 <__exponent+0x4c>
 8006468:	2330      	movs	r3, #48	; 0x30
 800646a:	3130      	adds	r1, #48	; 0x30
 800646c:	7083      	strb	r3, [r0, #2]
 800646e:	70c1      	strb	r1, [r0, #3]
 8006470:	1d03      	adds	r3, r0, #4
 8006472:	e7f1      	b.n	8006458 <__exponent+0x60>

08006474 <_printf_float>:
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	ed2d 8b02 	vpush	{d8}
 800647c:	b08d      	sub	sp, #52	; 0x34
 800647e:	460c      	mov	r4, r1
 8006480:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006484:	4616      	mov	r6, r2
 8006486:	461f      	mov	r7, r3
 8006488:	4605      	mov	r5, r0
 800648a:	f001 fa57 	bl	800793c <_localeconv_r>
 800648e:	f8d0 a000 	ldr.w	sl, [r0]
 8006492:	4650      	mov	r0, sl
 8006494:	f7f9 fea4 	bl	80001e0 <strlen>
 8006498:	2300      	movs	r3, #0
 800649a:	930a      	str	r3, [sp, #40]	; 0x28
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	9305      	str	r3, [sp, #20]
 80064a0:	f8d8 3000 	ldr.w	r3, [r8]
 80064a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064a8:	3307      	adds	r3, #7
 80064aa:	f023 0307 	bic.w	r3, r3, #7
 80064ae:	f103 0208 	add.w	r2, r3, #8
 80064b2:	f8c8 2000 	str.w	r2, [r8]
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064c6:	9307      	str	r3, [sp, #28]
 80064c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80064cc:	ee08 0a10 	vmov	s16, r0
 80064d0:	4b9f      	ldr	r3, [pc, #636]	; (8006750 <_printf_float+0x2dc>)
 80064d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064da:	f7fa fb2f 	bl	8000b3c <__aeabi_dcmpun>
 80064de:	bb88      	cbnz	r0, 8006544 <_printf_float+0xd0>
 80064e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064e4:	4b9a      	ldr	r3, [pc, #616]	; (8006750 <_printf_float+0x2dc>)
 80064e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064ea:	f7fa fb09 	bl	8000b00 <__aeabi_dcmple>
 80064ee:	bb48      	cbnz	r0, 8006544 <_printf_float+0xd0>
 80064f0:	2200      	movs	r2, #0
 80064f2:	2300      	movs	r3, #0
 80064f4:	4640      	mov	r0, r8
 80064f6:	4649      	mov	r1, r9
 80064f8:	f7fa faf8 	bl	8000aec <__aeabi_dcmplt>
 80064fc:	b110      	cbz	r0, 8006504 <_printf_float+0x90>
 80064fe:	232d      	movs	r3, #45	; 0x2d
 8006500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006504:	4b93      	ldr	r3, [pc, #588]	; (8006754 <_printf_float+0x2e0>)
 8006506:	4894      	ldr	r0, [pc, #592]	; (8006758 <_printf_float+0x2e4>)
 8006508:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800650c:	bf94      	ite	ls
 800650e:	4698      	movls	r8, r3
 8006510:	4680      	movhi	r8, r0
 8006512:	2303      	movs	r3, #3
 8006514:	6123      	str	r3, [r4, #16]
 8006516:	9b05      	ldr	r3, [sp, #20]
 8006518:	f023 0204 	bic.w	r2, r3, #4
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	f04f 0900 	mov.w	r9, #0
 8006522:	9700      	str	r7, [sp, #0]
 8006524:	4633      	mov	r3, r6
 8006526:	aa0b      	add	r2, sp, #44	; 0x2c
 8006528:	4621      	mov	r1, r4
 800652a:	4628      	mov	r0, r5
 800652c:	f000 f9d8 	bl	80068e0 <_printf_common>
 8006530:	3001      	adds	r0, #1
 8006532:	f040 8090 	bne.w	8006656 <_printf_float+0x1e2>
 8006536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653a:	b00d      	add	sp, #52	; 0x34
 800653c:	ecbd 8b02 	vpop	{d8}
 8006540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006544:	4642      	mov	r2, r8
 8006546:	464b      	mov	r3, r9
 8006548:	4640      	mov	r0, r8
 800654a:	4649      	mov	r1, r9
 800654c:	f7fa faf6 	bl	8000b3c <__aeabi_dcmpun>
 8006550:	b140      	cbz	r0, 8006564 <_printf_float+0xf0>
 8006552:	464b      	mov	r3, r9
 8006554:	2b00      	cmp	r3, #0
 8006556:	bfbc      	itt	lt
 8006558:	232d      	movlt	r3, #45	; 0x2d
 800655a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800655e:	487f      	ldr	r0, [pc, #508]	; (800675c <_printf_float+0x2e8>)
 8006560:	4b7f      	ldr	r3, [pc, #508]	; (8006760 <_printf_float+0x2ec>)
 8006562:	e7d1      	b.n	8006508 <_printf_float+0x94>
 8006564:	6863      	ldr	r3, [r4, #4]
 8006566:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800656a:	9206      	str	r2, [sp, #24]
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	d13f      	bne.n	80065f0 <_printf_float+0x17c>
 8006570:	2306      	movs	r3, #6
 8006572:	6063      	str	r3, [r4, #4]
 8006574:	9b05      	ldr	r3, [sp, #20]
 8006576:	6861      	ldr	r1, [r4, #4]
 8006578:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800657c:	2300      	movs	r3, #0
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	ab0a      	add	r3, sp, #40	; 0x28
 8006582:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006586:	ab09      	add	r3, sp, #36	; 0x24
 8006588:	ec49 8b10 	vmov	d0, r8, r9
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	6022      	str	r2, [r4, #0]
 8006590:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006594:	4628      	mov	r0, r5
 8006596:	f7ff fecd 	bl	8006334 <__cvt>
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800659e:	2b47      	cmp	r3, #71	; 0x47
 80065a0:	4680      	mov	r8, r0
 80065a2:	d108      	bne.n	80065b6 <_printf_float+0x142>
 80065a4:	1cc8      	adds	r0, r1, #3
 80065a6:	db02      	blt.n	80065ae <_printf_float+0x13a>
 80065a8:	6863      	ldr	r3, [r4, #4]
 80065aa:	4299      	cmp	r1, r3
 80065ac:	dd41      	ble.n	8006632 <_printf_float+0x1be>
 80065ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80065b2:	fa5f fb8b 	uxtb.w	fp, fp
 80065b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ba:	d820      	bhi.n	80065fe <_printf_float+0x18a>
 80065bc:	3901      	subs	r1, #1
 80065be:	465a      	mov	r2, fp
 80065c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065c4:	9109      	str	r1, [sp, #36]	; 0x24
 80065c6:	f7ff ff17 	bl	80063f8 <__exponent>
 80065ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065cc:	1813      	adds	r3, r2, r0
 80065ce:	2a01      	cmp	r2, #1
 80065d0:	4681      	mov	r9, r0
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	dc02      	bgt.n	80065dc <_printf_float+0x168>
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	07d2      	lsls	r2, r2, #31
 80065da:	d501      	bpl.n	80065e0 <_printf_float+0x16c>
 80065dc:	3301      	adds	r3, #1
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d09c      	beq.n	8006522 <_printf_float+0xae>
 80065e8:	232d      	movs	r3, #45	; 0x2d
 80065ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ee:	e798      	b.n	8006522 <_printf_float+0xae>
 80065f0:	9a06      	ldr	r2, [sp, #24]
 80065f2:	2a47      	cmp	r2, #71	; 0x47
 80065f4:	d1be      	bne.n	8006574 <_printf_float+0x100>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1bc      	bne.n	8006574 <_printf_float+0x100>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e7b9      	b.n	8006572 <_printf_float+0xfe>
 80065fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006602:	d118      	bne.n	8006636 <_printf_float+0x1c2>
 8006604:	2900      	cmp	r1, #0
 8006606:	6863      	ldr	r3, [r4, #4]
 8006608:	dd0b      	ble.n	8006622 <_printf_float+0x1ae>
 800660a:	6121      	str	r1, [r4, #16]
 800660c:	b913      	cbnz	r3, 8006614 <_printf_float+0x1a0>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	07d0      	lsls	r0, r2, #31
 8006612:	d502      	bpl.n	800661a <_printf_float+0x1a6>
 8006614:	3301      	adds	r3, #1
 8006616:	440b      	add	r3, r1
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	65a1      	str	r1, [r4, #88]	; 0x58
 800661c:	f04f 0900 	mov.w	r9, #0
 8006620:	e7de      	b.n	80065e0 <_printf_float+0x16c>
 8006622:	b913      	cbnz	r3, 800662a <_printf_float+0x1b6>
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	07d2      	lsls	r2, r2, #31
 8006628:	d501      	bpl.n	800662e <_printf_float+0x1ba>
 800662a:	3302      	adds	r3, #2
 800662c:	e7f4      	b.n	8006618 <_printf_float+0x1a4>
 800662e:	2301      	movs	r3, #1
 8006630:	e7f2      	b.n	8006618 <_printf_float+0x1a4>
 8006632:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006638:	4299      	cmp	r1, r3
 800663a:	db05      	blt.n	8006648 <_printf_float+0x1d4>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	6121      	str	r1, [r4, #16]
 8006640:	07d8      	lsls	r0, r3, #31
 8006642:	d5ea      	bpl.n	800661a <_printf_float+0x1a6>
 8006644:	1c4b      	adds	r3, r1, #1
 8006646:	e7e7      	b.n	8006618 <_printf_float+0x1a4>
 8006648:	2900      	cmp	r1, #0
 800664a:	bfd4      	ite	le
 800664c:	f1c1 0202 	rsble	r2, r1, #2
 8006650:	2201      	movgt	r2, #1
 8006652:	4413      	add	r3, r2
 8006654:	e7e0      	b.n	8006618 <_printf_float+0x1a4>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	055a      	lsls	r2, r3, #21
 800665a:	d407      	bmi.n	800666c <_printf_float+0x1f8>
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	4642      	mov	r2, r8
 8006660:	4631      	mov	r1, r6
 8006662:	4628      	mov	r0, r5
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	d12c      	bne.n	80066c4 <_printf_float+0x250>
 800666a:	e764      	b.n	8006536 <_printf_float+0xc2>
 800666c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006670:	f240 80e0 	bls.w	8006834 <_printf_float+0x3c0>
 8006674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006678:	2200      	movs	r2, #0
 800667a:	2300      	movs	r3, #0
 800667c:	f7fa fa2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006680:	2800      	cmp	r0, #0
 8006682:	d034      	beq.n	80066ee <_printf_float+0x27a>
 8006684:	4a37      	ldr	r2, [pc, #220]	; (8006764 <_printf_float+0x2f0>)
 8006686:	2301      	movs	r3, #1
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f af51 	beq.w	8006536 <_printf_float+0xc2>
 8006694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006698:	429a      	cmp	r2, r3
 800669a:	db02      	blt.n	80066a2 <_printf_float+0x22e>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	07d8      	lsls	r0, r3, #31
 80066a0:	d510      	bpl.n	80066c4 <_printf_float+0x250>
 80066a2:	ee18 3a10 	vmov	r3, s16
 80066a6:	4652      	mov	r2, sl
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f af41 	beq.w	8006536 <_printf_float+0xc2>
 80066b4:	f04f 0800 	mov.w	r8, #0
 80066b8:	f104 091a 	add.w	r9, r4, #26
 80066bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066be:	3b01      	subs	r3, #1
 80066c0:	4543      	cmp	r3, r8
 80066c2:	dc09      	bgt.n	80066d8 <_printf_float+0x264>
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	079b      	lsls	r3, r3, #30
 80066c8:	f100 8105 	bmi.w	80068d6 <_printf_float+0x462>
 80066cc:	68e0      	ldr	r0, [r4, #12]
 80066ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d0:	4298      	cmp	r0, r3
 80066d2:	bfb8      	it	lt
 80066d4:	4618      	movlt	r0, r3
 80066d6:	e730      	b.n	800653a <_printf_float+0xc6>
 80066d8:	2301      	movs	r3, #1
 80066da:	464a      	mov	r2, r9
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af27 	beq.w	8006536 <_printf_float+0xc2>
 80066e8:	f108 0801 	add.w	r8, r8, #1
 80066ec:	e7e6      	b.n	80066bc <_printf_float+0x248>
 80066ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dc39      	bgt.n	8006768 <_printf_float+0x2f4>
 80066f4:	4a1b      	ldr	r2, [pc, #108]	; (8006764 <_printf_float+0x2f0>)
 80066f6:	2301      	movs	r3, #1
 80066f8:	4631      	mov	r1, r6
 80066fa:	4628      	mov	r0, r5
 80066fc:	47b8      	blx	r7
 80066fe:	3001      	adds	r0, #1
 8006700:	f43f af19 	beq.w	8006536 <_printf_float+0xc2>
 8006704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006708:	4313      	orrs	r3, r2
 800670a:	d102      	bne.n	8006712 <_printf_float+0x29e>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	07d9      	lsls	r1, r3, #31
 8006710:	d5d8      	bpl.n	80066c4 <_printf_float+0x250>
 8006712:	ee18 3a10 	vmov	r3, s16
 8006716:	4652      	mov	r2, sl
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f af09 	beq.w	8006536 <_printf_float+0xc2>
 8006724:	f04f 0900 	mov.w	r9, #0
 8006728:	f104 0a1a 	add.w	sl, r4, #26
 800672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672e:	425b      	negs	r3, r3
 8006730:	454b      	cmp	r3, r9
 8006732:	dc01      	bgt.n	8006738 <_printf_float+0x2c4>
 8006734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006736:	e792      	b.n	800665e <_printf_float+0x1ea>
 8006738:	2301      	movs	r3, #1
 800673a:	4652      	mov	r2, sl
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f aef7 	beq.w	8006536 <_printf_float+0xc2>
 8006748:	f109 0901 	add.w	r9, r9, #1
 800674c:	e7ee      	b.n	800672c <_printf_float+0x2b8>
 800674e:	bf00      	nop
 8006750:	7fefffff 	.word	0x7fefffff
 8006754:	080098a4 	.word	0x080098a4
 8006758:	080098a8 	.word	0x080098a8
 800675c:	080098b0 	.word	0x080098b0
 8006760:	080098ac 	.word	0x080098ac
 8006764:	080098b4 	.word	0x080098b4
 8006768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800676a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800676c:	429a      	cmp	r2, r3
 800676e:	bfa8      	it	ge
 8006770:	461a      	movge	r2, r3
 8006772:	2a00      	cmp	r2, #0
 8006774:	4691      	mov	r9, r2
 8006776:	dc37      	bgt.n	80067e8 <_printf_float+0x374>
 8006778:	f04f 0b00 	mov.w	fp, #0
 800677c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006780:	f104 021a 	add.w	r2, r4, #26
 8006784:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	eba3 0309 	sub.w	r3, r3, r9
 800678c:	455b      	cmp	r3, fp
 800678e:	dc33      	bgt.n	80067f8 <_printf_float+0x384>
 8006790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006794:	429a      	cmp	r2, r3
 8006796:	db3b      	blt.n	8006810 <_printf_float+0x39c>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	07da      	lsls	r2, r3, #31
 800679c:	d438      	bmi.n	8006810 <_printf_float+0x39c>
 800679e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a0:	9a05      	ldr	r2, [sp, #20]
 80067a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a4:	1a9a      	subs	r2, r3, r2
 80067a6:	eba3 0901 	sub.w	r9, r3, r1
 80067aa:	4591      	cmp	r9, r2
 80067ac:	bfa8      	it	ge
 80067ae:	4691      	movge	r9, r2
 80067b0:	f1b9 0f00 	cmp.w	r9, #0
 80067b4:	dc35      	bgt.n	8006822 <_printf_float+0x3ae>
 80067b6:	f04f 0800 	mov.w	r8, #0
 80067ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067be:	f104 0a1a 	add.w	sl, r4, #26
 80067c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	eba3 0309 	sub.w	r3, r3, r9
 80067cc:	4543      	cmp	r3, r8
 80067ce:	f77f af79 	ble.w	80066c4 <_printf_float+0x250>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4652      	mov	r2, sl
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f aeaa 	beq.w	8006536 <_printf_float+0xc2>
 80067e2:	f108 0801 	add.w	r8, r8, #1
 80067e6:	e7ec      	b.n	80067c2 <_printf_float+0x34e>
 80067e8:	4613      	mov	r3, r2
 80067ea:	4631      	mov	r1, r6
 80067ec:	4642      	mov	r2, r8
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	d1c0      	bne.n	8006778 <_printf_float+0x304>
 80067f6:	e69e      	b.n	8006536 <_printf_float+0xc2>
 80067f8:	2301      	movs	r3, #1
 80067fa:	4631      	mov	r1, r6
 80067fc:	4628      	mov	r0, r5
 80067fe:	9205      	str	r2, [sp, #20]
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f ae97 	beq.w	8006536 <_printf_float+0xc2>
 8006808:	9a05      	ldr	r2, [sp, #20]
 800680a:	f10b 0b01 	add.w	fp, fp, #1
 800680e:	e7b9      	b.n	8006784 <_printf_float+0x310>
 8006810:	ee18 3a10 	vmov	r3, s16
 8006814:	4652      	mov	r2, sl
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	d1be      	bne.n	800679e <_printf_float+0x32a>
 8006820:	e689      	b.n	8006536 <_printf_float+0xc2>
 8006822:	9a05      	ldr	r2, [sp, #20]
 8006824:	464b      	mov	r3, r9
 8006826:	4442      	add	r2, r8
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	d1c1      	bne.n	80067b6 <_printf_float+0x342>
 8006832:	e680      	b.n	8006536 <_printf_float+0xc2>
 8006834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006836:	2a01      	cmp	r2, #1
 8006838:	dc01      	bgt.n	800683e <_printf_float+0x3ca>
 800683a:	07db      	lsls	r3, r3, #31
 800683c:	d538      	bpl.n	80068b0 <_printf_float+0x43c>
 800683e:	2301      	movs	r3, #1
 8006840:	4642      	mov	r2, r8
 8006842:	4631      	mov	r1, r6
 8006844:	4628      	mov	r0, r5
 8006846:	47b8      	blx	r7
 8006848:	3001      	adds	r0, #1
 800684a:	f43f ae74 	beq.w	8006536 <_printf_float+0xc2>
 800684e:	ee18 3a10 	vmov	r3, s16
 8006852:	4652      	mov	r2, sl
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	f43f ae6b 	beq.w	8006536 <_printf_float+0xc2>
 8006860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006864:	2200      	movs	r2, #0
 8006866:	2300      	movs	r3, #0
 8006868:	f7fa f936 	bl	8000ad8 <__aeabi_dcmpeq>
 800686c:	b9d8      	cbnz	r0, 80068a6 <_printf_float+0x432>
 800686e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006870:	f108 0201 	add.w	r2, r8, #1
 8006874:	3b01      	subs	r3, #1
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	d10e      	bne.n	800689e <_printf_float+0x42a>
 8006880:	e659      	b.n	8006536 <_printf_float+0xc2>
 8006882:	2301      	movs	r3, #1
 8006884:	4652      	mov	r2, sl
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f ae52 	beq.w	8006536 <_printf_float+0xc2>
 8006892:	f108 0801 	add.w	r8, r8, #1
 8006896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006898:	3b01      	subs	r3, #1
 800689a:	4543      	cmp	r3, r8
 800689c:	dcf1      	bgt.n	8006882 <_printf_float+0x40e>
 800689e:	464b      	mov	r3, r9
 80068a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068a4:	e6dc      	b.n	8006660 <_printf_float+0x1ec>
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	f104 0a1a 	add.w	sl, r4, #26
 80068ae:	e7f2      	b.n	8006896 <_printf_float+0x422>
 80068b0:	2301      	movs	r3, #1
 80068b2:	4642      	mov	r2, r8
 80068b4:	e7df      	b.n	8006876 <_printf_float+0x402>
 80068b6:	2301      	movs	r3, #1
 80068b8:	464a      	mov	r2, r9
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f ae38 	beq.w	8006536 <_printf_float+0xc2>
 80068c6:	f108 0801 	add.w	r8, r8, #1
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068ce:	1a5b      	subs	r3, r3, r1
 80068d0:	4543      	cmp	r3, r8
 80068d2:	dcf0      	bgt.n	80068b6 <_printf_float+0x442>
 80068d4:	e6fa      	b.n	80066cc <_printf_float+0x258>
 80068d6:	f04f 0800 	mov.w	r8, #0
 80068da:	f104 0919 	add.w	r9, r4, #25
 80068de:	e7f4      	b.n	80068ca <_printf_float+0x456>

080068e0 <_printf_common>:
 80068e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	4616      	mov	r6, r2
 80068e6:	4699      	mov	r9, r3
 80068e8:	688a      	ldr	r2, [r1, #8]
 80068ea:	690b      	ldr	r3, [r1, #16]
 80068ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068f0:	4293      	cmp	r3, r2
 80068f2:	bfb8      	it	lt
 80068f4:	4613      	movlt	r3, r2
 80068f6:	6033      	str	r3, [r6, #0]
 80068f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068fc:	4607      	mov	r7, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	b10a      	cbz	r2, 8006906 <_printf_common+0x26>
 8006902:	3301      	adds	r3, #1
 8006904:	6033      	str	r3, [r6, #0]
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	0699      	lsls	r1, r3, #26
 800690a:	bf42      	ittt	mi
 800690c:	6833      	ldrmi	r3, [r6, #0]
 800690e:	3302      	addmi	r3, #2
 8006910:	6033      	strmi	r3, [r6, #0]
 8006912:	6825      	ldr	r5, [r4, #0]
 8006914:	f015 0506 	ands.w	r5, r5, #6
 8006918:	d106      	bne.n	8006928 <_printf_common+0x48>
 800691a:	f104 0a19 	add.w	sl, r4, #25
 800691e:	68e3      	ldr	r3, [r4, #12]
 8006920:	6832      	ldr	r2, [r6, #0]
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	42ab      	cmp	r3, r5
 8006926:	dc26      	bgt.n	8006976 <_printf_common+0x96>
 8006928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800692c:	1e13      	subs	r3, r2, #0
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	bf18      	it	ne
 8006932:	2301      	movne	r3, #1
 8006934:	0692      	lsls	r2, r2, #26
 8006936:	d42b      	bmi.n	8006990 <_printf_common+0xb0>
 8006938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800693c:	4649      	mov	r1, r9
 800693e:	4638      	mov	r0, r7
 8006940:	47c0      	blx	r8
 8006942:	3001      	adds	r0, #1
 8006944:	d01e      	beq.n	8006984 <_printf_common+0xa4>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	68e5      	ldr	r5, [r4, #12]
 800694a:	6832      	ldr	r2, [r6, #0]
 800694c:	f003 0306 	and.w	r3, r3, #6
 8006950:	2b04      	cmp	r3, #4
 8006952:	bf08      	it	eq
 8006954:	1aad      	subeq	r5, r5, r2
 8006956:	68a3      	ldr	r3, [r4, #8]
 8006958:	6922      	ldr	r2, [r4, #16]
 800695a:	bf0c      	ite	eq
 800695c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006960:	2500      	movne	r5, #0
 8006962:	4293      	cmp	r3, r2
 8006964:	bfc4      	itt	gt
 8006966:	1a9b      	subgt	r3, r3, r2
 8006968:	18ed      	addgt	r5, r5, r3
 800696a:	2600      	movs	r6, #0
 800696c:	341a      	adds	r4, #26
 800696e:	42b5      	cmp	r5, r6
 8006970:	d11a      	bne.n	80069a8 <_printf_common+0xc8>
 8006972:	2000      	movs	r0, #0
 8006974:	e008      	b.n	8006988 <_printf_common+0xa8>
 8006976:	2301      	movs	r3, #1
 8006978:	4652      	mov	r2, sl
 800697a:	4649      	mov	r1, r9
 800697c:	4638      	mov	r0, r7
 800697e:	47c0      	blx	r8
 8006980:	3001      	adds	r0, #1
 8006982:	d103      	bne.n	800698c <_printf_common+0xac>
 8006984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698c:	3501      	adds	r5, #1
 800698e:	e7c6      	b.n	800691e <_printf_common+0x3e>
 8006990:	18e1      	adds	r1, r4, r3
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	2030      	movs	r0, #48	; 0x30
 8006996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800699a:	4422      	add	r2, r4
 800699c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069a4:	3302      	adds	r3, #2
 80069a6:	e7c7      	b.n	8006938 <_printf_common+0x58>
 80069a8:	2301      	movs	r3, #1
 80069aa:	4622      	mov	r2, r4
 80069ac:	4649      	mov	r1, r9
 80069ae:	4638      	mov	r0, r7
 80069b0:	47c0      	blx	r8
 80069b2:	3001      	adds	r0, #1
 80069b4:	d0e6      	beq.n	8006984 <_printf_common+0xa4>
 80069b6:	3601      	adds	r6, #1
 80069b8:	e7d9      	b.n	800696e <_printf_common+0x8e>
	...

080069bc <_printf_i>:
 80069bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c0:	7e0f      	ldrb	r7, [r1, #24]
 80069c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069c4:	2f78      	cmp	r7, #120	; 0x78
 80069c6:	4691      	mov	r9, r2
 80069c8:	4680      	mov	r8, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	469a      	mov	sl, r3
 80069ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069d2:	d807      	bhi.n	80069e4 <_printf_i+0x28>
 80069d4:	2f62      	cmp	r7, #98	; 0x62
 80069d6:	d80a      	bhi.n	80069ee <_printf_i+0x32>
 80069d8:	2f00      	cmp	r7, #0
 80069da:	f000 80d8 	beq.w	8006b8e <_printf_i+0x1d2>
 80069de:	2f58      	cmp	r7, #88	; 0x58
 80069e0:	f000 80a3 	beq.w	8006b2a <_printf_i+0x16e>
 80069e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069ec:	e03a      	b.n	8006a64 <_printf_i+0xa8>
 80069ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069f2:	2b15      	cmp	r3, #21
 80069f4:	d8f6      	bhi.n	80069e4 <_printf_i+0x28>
 80069f6:	a101      	add	r1, pc, #4	; (adr r1, 80069fc <_printf_i+0x40>)
 80069f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069fc:	08006a55 	.word	0x08006a55
 8006a00:	08006a69 	.word	0x08006a69
 8006a04:	080069e5 	.word	0x080069e5
 8006a08:	080069e5 	.word	0x080069e5
 8006a0c:	080069e5 	.word	0x080069e5
 8006a10:	080069e5 	.word	0x080069e5
 8006a14:	08006a69 	.word	0x08006a69
 8006a18:	080069e5 	.word	0x080069e5
 8006a1c:	080069e5 	.word	0x080069e5
 8006a20:	080069e5 	.word	0x080069e5
 8006a24:	080069e5 	.word	0x080069e5
 8006a28:	08006b75 	.word	0x08006b75
 8006a2c:	08006a99 	.word	0x08006a99
 8006a30:	08006b57 	.word	0x08006b57
 8006a34:	080069e5 	.word	0x080069e5
 8006a38:	080069e5 	.word	0x080069e5
 8006a3c:	08006b97 	.word	0x08006b97
 8006a40:	080069e5 	.word	0x080069e5
 8006a44:	08006a99 	.word	0x08006a99
 8006a48:	080069e5 	.word	0x080069e5
 8006a4c:	080069e5 	.word	0x080069e5
 8006a50:	08006b5f 	.word	0x08006b5f
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	1d1a      	adds	r2, r3, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	602a      	str	r2, [r5, #0]
 8006a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a64:	2301      	movs	r3, #1
 8006a66:	e0a3      	b.n	8006bb0 <_printf_i+0x1f4>
 8006a68:	6820      	ldr	r0, [r4, #0]
 8006a6a:	6829      	ldr	r1, [r5, #0]
 8006a6c:	0606      	lsls	r6, r0, #24
 8006a6e:	f101 0304 	add.w	r3, r1, #4
 8006a72:	d50a      	bpl.n	8006a8a <_printf_i+0xce>
 8006a74:	680e      	ldr	r6, [r1, #0]
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	2e00      	cmp	r6, #0
 8006a7a:	da03      	bge.n	8006a84 <_printf_i+0xc8>
 8006a7c:	232d      	movs	r3, #45	; 0x2d
 8006a7e:	4276      	negs	r6, r6
 8006a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a84:	485e      	ldr	r0, [pc, #376]	; (8006c00 <_printf_i+0x244>)
 8006a86:	230a      	movs	r3, #10
 8006a88:	e019      	b.n	8006abe <_printf_i+0x102>
 8006a8a:	680e      	ldr	r6, [r1, #0]
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a92:	bf18      	it	ne
 8006a94:	b236      	sxthne	r6, r6
 8006a96:	e7ef      	b.n	8006a78 <_printf_i+0xbc>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	6820      	ldr	r0, [r4, #0]
 8006a9c:	1d19      	adds	r1, r3, #4
 8006a9e:	6029      	str	r1, [r5, #0]
 8006aa0:	0601      	lsls	r1, r0, #24
 8006aa2:	d501      	bpl.n	8006aa8 <_printf_i+0xec>
 8006aa4:	681e      	ldr	r6, [r3, #0]
 8006aa6:	e002      	b.n	8006aae <_printf_i+0xf2>
 8006aa8:	0646      	lsls	r6, r0, #25
 8006aaa:	d5fb      	bpl.n	8006aa4 <_printf_i+0xe8>
 8006aac:	881e      	ldrh	r6, [r3, #0]
 8006aae:	4854      	ldr	r0, [pc, #336]	; (8006c00 <_printf_i+0x244>)
 8006ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2308      	moveq	r3, #8
 8006ab6:	230a      	movne	r3, #10
 8006ab8:	2100      	movs	r1, #0
 8006aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006abe:	6865      	ldr	r5, [r4, #4]
 8006ac0:	60a5      	str	r5, [r4, #8]
 8006ac2:	2d00      	cmp	r5, #0
 8006ac4:	bfa2      	ittt	ge
 8006ac6:	6821      	ldrge	r1, [r4, #0]
 8006ac8:	f021 0104 	bicge.w	r1, r1, #4
 8006acc:	6021      	strge	r1, [r4, #0]
 8006ace:	b90e      	cbnz	r6, 8006ad4 <_printf_i+0x118>
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	d04d      	beq.n	8006b70 <_printf_i+0x1b4>
 8006ad4:	4615      	mov	r5, r2
 8006ad6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ada:	fb03 6711 	mls	r7, r3, r1, r6
 8006ade:	5dc7      	ldrb	r7, [r0, r7]
 8006ae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ae4:	4637      	mov	r7, r6
 8006ae6:	42bb      	cmp	r3, r7
 8006ae8:	460e      	mov	r6, r1
 8006aea:	d9f4      	bls.n	8006ad6 <_printf_i+0x11a>
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d10b      	bne.n	8006b08 <_printf_i+0x14c>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	07de      	lsls	r6, r3, #31
 8006af4:	d508      	bpl.n	8006b08 <_printf_i+0x14c>
 8006af6:	6923      	ldr	r3, [r4, #16]
 8006af8:	6861      	ldr	r1, [r4, #4]
 8006afa:	4299      	cmp	r1, r3
 8006afc:	bfde      	ittt	le
 8006afe:	2330      	movle	r3, #48	; 0x30
 8006b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b04:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b08:	1b52      	subs	r2, r2, r5
 8006b0a:	6122      	str	r2, [r4, #16]
 8006b0c:	f8cd a000 	str.w	sl, [sp]
 8006b10:	464b      	mov	r3, r9
 8006b12:	aa03      	add	r2, sp, #12
 8006b14:	4621      	mov	r1, r4
 8006b16:	4640      	mov	r0, r8
 8006b18:	f7ff fee2 	bl	80068e0 <_printf_common>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d14c      	bne.n	8006bba <_printf_i+0x1fe>
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b24:	b004      	add	sp, #16
 8006b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2a:	4835      	ldr	r0, [pc, #212]	; (8006c00 <_printf_i+0x244>)
 8006b2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b30:	6829      	ldr	r1, [r5, #0]
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b38:	6029      	str	r1, [r5, #0]
 8006b3a:	061d      	lsls	r5, r3, #24
 8006b3c:	d514      	bpl.n	8006b68 <_printf_i+0x1ac>
 8006b3e:	07df      	lsls	r7, r3, #31
 8006b40:	bf44      	itt	mi
 8006b42:	f043 0320 	orrmi.w	r3, r3, #32
 8006b46:	6023      	strmi	r3, [r4, #0]
 8006b48:	b91e      	cbnz	r6, 8006b52 <_printf_i+0x196>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	f023 0320 	bic.w	r3, r3, #32
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	2310      	movs	r3, #16
 8006b54:	e7b0      	b.n	8006ab8 <_printf_i+0xfc>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	f043 0320 	orr.w	r3, r3, #32
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	2378      	movs	r3, #120	; 0x78
 8006b60:	4828      	ldr	r0, [pc, #160]	; (8006c04 <_printf_i+0x248>)
 8006b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b66:	e7e3      	b.n	8006b30 <_printf_i+0x174>
 8006b68:	0659      	lsls	r1, r3, #25
 8006b6a:	bf48      	it	mi
 8006b6c:	b2b6      	uxthmi	r6, r6
 8006b6e:	e7e6      	b.n	8006b3e <_printf_i+0x182>
 8006b70:	4615      	mov	r5, r2
 8006b72:	e7bb      	b.n	8006aec <_printf_i+0x130>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	6826      	ldr	r6, [r4, #0]
 8006b78:	6961      	ldr	r1, [r4, #20]
 8006b7a:	1d18      	adds	r0, r3, #4
 8006b7c:	6028      	str	r0, [r5, #0]
 8006b7e:	0635      	lsls	r5, r6, #24
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	d501      	bpl.n	8006b88 <_printf_i+0x1cc>
 8006b84:	6019      	str	r1, [r3, #0]
 8006b86:	e002      	b.n	8006b8e <_printf_i+0x1d2>
 8006b88:	0670      	lsls	r0, r6, #25
 8006b8a:	d5fb      	bpl.n	8006b84 <_printf_i+0x1c8>
 8006b8c:	8019      	strh	r1, [r3, #0]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	6123      	str	r3, [r4, #16]
 8006b92:	4615      	mov	r5, r2
 8006b94:	e7ba      	b.n	8006b0c <_printf_i+0x150>
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	1d1a      	adds	r2, r3, #4
 8006b9a:	602a      	str	r2, [r5, #0]
 8006b9c:	681d      	ldr	r5, [r3, #0]
 8006b9e:	6862      	ldr	r2, [r4, #4]
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f7f9 fb24 	bl	80001f0 <memchr>
 8006ba8:	b108      	cbz	r0, 8006bae <_printf_i+0x1f2>
 8006baa:	1b40      	subs	r0, r0, r5
 8006bac:	6060      	str	r0, [r4, #4]
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bb8:	e7a8      	b.n	8006b0c <_printf_i+0x150>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	47d0      	blx	sl
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d0ab      	beq.n	8006b20 <_printf_i+0x164>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	079b      	lsls	r3, r3, #30
 8006bcc:	d413      	bmi.n	8006bf6 <_printf_i+0x23a>
 8006bce:	68e0      	ldr	r0, [r4, #12]
 8006bd0:	9b03      	ldr	r3, [sp, #12]
 8006bd2:	4298      	cmp	r0, r3
 8006bd4:	bfb8      	it	lt
 8006bd6:	4618      	movlt	r0, r3
 8006bd8:	e7a4      	b.n	8006b24 <_printf_i+0x168>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4632      	mov	r2, r6
 8006bde:	4649      	mov	r1, r9
 8006be0:	4640      	mov	r0, r8
 8006be2:	47d0      	blx	sl
 8006be4:	3001      	adds	r0, #1
 8006be6:	d09b      	beq.n	8006b20 <_printf_i+0x164>
 8006be8:	3501      	adds	r5, #1
 8006bea:	68e3      	ldr	r3, [r4, #12]
 8006bec:	9903      	ldr	r1, [sp, #12]
 8006bee:	1a5b      	subs	r3, r3, r1
 8006bf0:	42ab      	cmp	r3, r5
 8006bf2:	dcf2      	bgt.n	8006bda <_printf_i+0x21e>
 8006bf4:	e7eb      	b.n	8006bce <_printf_i+0x212>
 8006bf6:	2500      	movs	r5, #0
 8006bf8:	f104 0619 	add.w	r6, r4, #25
 8006bfc:	e7f5      	b.n	8006bea <_printf_i+0x22e>
 8006bfe:	bf00      	nop
 8006c00:	080098b6 	.word	0x080098b6
 8006c04:	080098c7 	.word	0x080098c7

08006c08 <siprintf>:
 8006c08:	b40e      	push	{r1, r2, r3}
 8006c0a:	b500      	push	{lr}
 8006c0c:	b09c      	sub	sp, #112	; 0x70
 8006c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c10:	9002      	str	r0, [sp, #8]
 8006c12:	9006      	str	r0, [sp, #24]
 8006c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c18:	4809      	ldr	r0, [pc, #36]	; (8006c40 <siprintf+0x38>)
 8006c1a:	9107      	str	r1, [sp, #28]
 8006c1c:	9104      	str	r1, [sp, #16]
 8006c1e:	4909      	ldr	r1, [pc, #36]	; (8006c44 <siprintf+0x3c>)
 8006c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c24:	9105      	str	r1, [sp, #20]
 8006c26:	6800      	ldr	r0, [r0, #0]
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	a902      	add	r1, sp, #8
 8006c2c:	f001 fb76 	bl	800831c <_svfiprintf_r>
 8006c30:	9b02      	ldr	r3, [sp, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	b01c      	add	sp, #112	; 0x70
 8006c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c3c:	b003      	add	sp, #12
 8006c3e:	4770      	bx	lr
 8006c40:	200000c4 	.word	0x200000c4
 8006c44:	ffff0208 	.word	0xffff0208

08006c48 <quorem>:
 8006c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	6903      	ldr	r3, [r0, #16]
 8006c4e:	690c      	ldr	r4, [r1, #16]
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	4607      	mov	r7, r0
 8006c54:	f2c0 8081 	blt.w	8006d5a <quorem+0x112>
 8006c58:	3c01      	subs	r4, #1
 8006c5a:	f101 0814 	add.w	r8, r1, #20
 8006c5e:	f100 0514 	add.w	r5, r0, #20
 8006c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c70:	3301      	adds	r3, #1
 8006c72:	429a      	cmp	r2, r3
 8006c74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c80:	d331      	bcc.n	8006ce6 <quorem+0x9e>
 8006c82:	f04f 0e00 	mov.w	lr, #0
 8006c86:	4640      	mov	r0, r8
 8006c88:	46ac      	mov	ip, r5
 8006c8a:	46f2      	mov	sl, lr
 8006c8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c90:	b293      	uxth	r3, r2
 8006c92:	fb06 e303 	mla	r3, r6, r3, lr
 8006c96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ebaa 0303 	sub.w	r3, sl, r3
 8006ca0:	f8dc a000 	ldr.w	sl, [ip]
 8006ca4:	0c12      	lsrs	r2, r2, #16
 8006ca6:	fa13 f38a 	uxtah	r3, r3, sl
 8006caa:	fb06 e202 	mla	r2, r6, r2, lr
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006cc4:	4581      	cmp	r9, r0
 8006cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cca:	f84c 3b04 	str.w	r3, [ip], #4
 8006cce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006cd2:	d2db      	bcs.n	8006c8c <quorem+0x44>
 8006cd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006cd8:	b92b      	cbnz	r3, 8006ce6 <quorem+0x9e>
 8006cda:	9b01      	ldr	r3, [sp, #4]
 8006cdc:	3b04      	subs	r3, #4
 8006cde:	429d      	cmp	r5, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	d32e      	bcc.n	8006d42 <quorem+0xfa>
 8006ce4:	613c      	str	r4, [r7, #16]
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f001 f8c4 	bl	8007e74 <__mcmp>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	db24      	blt.n	8006d3a <quorem+0xf2>
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f04f 0c00 	mov.w	ip, #0
 8006cf8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cfc:	f8d0 e000 	ldr.w	lr, [r0]
 8006d00:	b293      	uxth	r3, r2
 8006d02:	ebac 0303 	sub.w	r3, ip, r3
 8006d06:	0c12      	lsrs	r2, r2, #16
 8006d08:	fa13 f38e 	uxtah	r3, r3, lr
 8006d0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d1a:	45c1      	cmp	r9, r8
 8006d1c:	f840 3b04 	str.w	r3, [r0], #4
 8006d20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d24:	d2e8      	bcs.n	8006cf8 <quorem+0xb0>
 8006d26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d2e:	b922      	cbnz	r2, 8006d3a <quorem+0xf2>
 8006d30:	3b04      	subs	r3, #4
 8006d32:	429d      	cmp	r5, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	d30a      	bcc.n	8006d4e <quorem+0x106>
 8006d38:	613c      	str	r4, [r7, #16]
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	b003      	add	sp, #12
 8006d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	3b04      	subs	r3, #4
 8006d46:	2a00      	cmp	r2, #0
 8006d48:	d1cc      	bne.n	8006ce4 <quorem+0x9c>
 8006d4a:	3c01      	subs	r4, #1
 8006d4c:	e7c7      	b.n	8006cde <quorem+0x96>
 8006d4e:	6812      	ldr	r2, [r2, #0]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	d1f0      	bne.n	8006d38 <quorem+0xf0>
 8006d56:	3c01      	subs	r4, #1
 8006d58:	e7eb      	b.n	8006d32 <quorem+0xea>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e7ee      	b.n	8006d3c <quorem+0xf4>
	...

08006d60 <_dtoa_r>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	ed2d 8b04 	vpush	{d8-d9}
 8006d68:	ec57 6b10 	vmov	r6, r7, d0
 8006d6c:	b093      	sub	sp, #76	; 0x4c
 8006d6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d74:	9106      	str	r1, [sp, #24]
 8006d76:	ee10 aa10 	vmov	sl, s0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8006d80:	46bb      	mov	fp, r7
 8006d82:	b975      	cbnz	r5, 8006da2 <_dtoa_r+0x42>
 8006d84:	2010      	movs	r0, #16
 8006d86:	f000 fddd 	bl	8007944 <malloc>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	6260      	str	r0, [r4, #36]	; 0x24
 8006d8e:	b920      	cbnz	r0, 8006d9a <_dtoa_r+0x3a>
 8006d90:	4ba7      	ldr	r3, [pc, #668]	; (8007030 <_dtoa_r+0x2d0>)
 8006d92:	21ea      	movs	r1, #234	; 0xea
 8006d94:	48a7      	ldr	r0, [pc, #668]	; (8007034 <_dtoa_r+0x2d4>)
 8006d96:	f001 fbd1 	bl	800853c <__assert_func>
 8006d9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d9e:	6005      	str	r5, [r0, #0]
 8006da0:	60c5      	str	r5, [r0, #12]
 8006da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	b151      	cbz	r1, 8006dbe <_dtoa_r+0x5e>
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	604a      	str	r2, [r1, #4]
 8006dac:	2301      	movs	r3, #1
 8006dae:	4093      	lsls	r3, r2
 8006db0:	608b      	str	r3, [r1, #8]
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 fe1c 	bl	80079f0 <_Bfree>
 8006db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	1e3b      	subs	r3, r7, #0
 8006dc0:	bfaa      	itet	ge
 8006dc2:	2300      	movge	r3, #0
 8006dc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006dc8:	f8c8 3000 	strge.w	r3, [r8]
 8006dcc:	4b9a      	ldr	r3, [pc, #616]	; (8007038 <_dtoa_r+0x2d8>)
 8006dce:	bfbc      	itt	lt
 8006dd0:	2201      	movlt	r2, #1
 8006dd2:	f8c8 2000 	strlt.w	r2, [r8]
 8006dd6:	ea33 030b 	bics.w	r3, r3, fp
 8006dda:	d11b      	bne.n	8006e14 <_dtoa_r+0xb4>
 8006ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dde:	f242 730f 	movw	r3, #9999	; 0x270f
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006de8:	4333      	orrs	r3, r6
 8006dea:	f000 8592 	beq.w	8007912 <_dtoa_r+0xbb2>
 8006dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006df0:	b963      	cbnz	r3, 8006e0c <_dtoa_r+0xac>
 8006df2:	4b92      	ldr	r3, [pc, #584]	; (800703c <_dtoa_r+0x2dc>)
 8006df4:	e022      	b.n	8006e3c <_dtoa_r+0xdc>
 8006df6:	4b92      	ldr	r3, [pc, #584]	; (8007040 <_dtoa_r+0x2e0>)
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	9801      	ldr	r0, [sp, #4]
 8006e02:	b013      	add	sp, #76	; 0x4c
 8006e04:	ecbd 8b04 	vpop	{d8-d9}
 8006e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0c:	4b8b      	ldr	r3, [pc, #556]	; (800703c <_dtoa_r+0x2dc>)
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	3303      	adds	r3, #3
 8006e12:	e7f3      	b.n	8006dfc <_dtoa_r+0x9c>
 8006e14:	2200      	movs	r2, #0
 8006e16:	2300      	movs	r3, #0
 8006e18:	4650      	mov	r0, sl
 8006e1a:	4659      	mov	r1, fp
 8006e1c:	f7f9 fe5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e20:	ec4b ab19 	vmov	d9, sl, fp
 8006e24:	4680      	mov	r8, r0
 8006e26:	b158      	cbz	r0, 8006e40 <_dtoa_r+0xe0>
 8006e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 856b 	beq.w	800790c <_dtoa_r+0xbac>
 8006e36:	4883      	ldr	r0, [pc, #524]	; (8007044 <_dtoa_r+0x2e4>)
 8006e38:	6018      	str	r0, [r3, #0]
 8006e3a:	1e43      	subs	r3, r0, #1
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	e7df      	b.n	8006e00 <_dtoa_r+0xa0>
 8006e40:	ec4b ab10 	vmov	d0, sl, fp
 8006e44:	aa10      	add	r2, sp, #64	; 0x40
 8006e46:	a911      	add	r1, sp, #68	; 0x44
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f001 f8b9 	bl	8007fc0 <__d2b>
 8006e4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006e52:	ee08 0a10 	vmov	s16, r0
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	f000 8084 	beq.w	8006f64 <_dtoa_r+0x204>
 8006e5c:	ee19 3a90 	vmov	r3, s19
 8006e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e68:	4656      	mov	r6, sl
 8006e6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006e76:	4b74      	ldr	r3, [pc, #464]	; (8007048 <_dtoa_r+0x2e8>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	f7f9 fa0b 	bl	8000298 <__aeabi_dsub>
 8006e82:	a365      	add	r3, pc, #404	; (adr r3, 8007018 <_dtoa_r+0x2b8>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f7f9 fbbe 	bl	8000608 <__aeabi_dmul>
 8006e8c:	a364      	add	r3, pc, #400	; (adr r3, 8007020 <_dtoa_r+0x2c0>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f7f9 fa03 	bl	800029c <__adddf3>
 8006e96:	4606      	mov	r6, r0
 8006e98:	4628      	mov	r0, r5
 8006e9a:	460f      	mov	r7, r1
 8006e9c:	f7f9 fb4a 	bl	8000534 <__aeabi_i2d>
 8006ea0:	a361      	add	r3, pc, #388	; (adr r3, 8007028 <_dtoa_r+0x2c8>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 fbaf 	bl	8000608 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4630      	mov	r0, r6
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	f7f9 f9f3 	bl	800029c <__adddf3>
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	460f      	mov	r7, r1
 8006eba:	f7f9 fe55 	bl	8000b68 <__aeabi_d2iz>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	9000      	str	r0, [sp, #0]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 fe10 	bl	8000aec <__aeabi_dcmplt>
 8006ecc:	b150      	cbz	r0, 8006ee4 <_dtoa_r+0x184>
 8006ece:	9800      	ldr	r0, [sp, #0]
 8006ed0:	f7f9 fb30 	bl	8000534 <__aeabi_i2d>
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	f7f9 fdfe 	bl	8000ad8 <__aeabi_dcmpeq>
 8006edc:	b910      	cbnz	r0, 8006ee4 <_dtoa_r+0x184>
 8006ede:	9b00      	ldr	r3, [sp, #0]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	9b00      	ldr	r3, [sp, #0]
 8006ee6:	2b16      	cmp	r3, #22
 8006ee8:	d85a      	bhi.n	8006fa0 <_dtoa_r+0x240>
 8006eea:	9a00      	ldr	r2, [sp, #0]
 8006eec:	4b57      	ldr	r3, [pc, #348]	; (800704c <_dtoa_r+0x2ec>)
 8006eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	ec51 0b19 	vmov	r0, r1, d9
 8006efa:	f7f9 fdf7 	bl	8000aec <__aeabi_dcmplt>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d050      	beq.n	8006fa4 <_dtoa_r+0x244>
 8006f02:	9b00      	ldr	r3, [sp, #0]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f0e:	1b5d      	subs	r5, r3, r5
 8006f10:	1e6b      	subs	r3, r5, #1
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	bf45      	ittet	mi
 8006f16:	f1c5 0301 	rsbmi	r3, r5, #1
 8006f1a:	9304      	strmi	r3, [sp, #16]
 8006f1c:	2300      	movpl	r3, #0
 8006f1e:	2300      	movmi	r3, #0
 8006f20:	bf4c      	ite	mi
 8006f22:	9305      	strmi	r3, [sp, #20]
 8006f24:	9304      	strpl	r3, [sp, #16]
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db3d      	blt.n	8006fa8 <_dtoa_r+0x248>
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	9a00      	ldr	r2, [sp, #0]
 8006f30:	920a      	str	r2, [sp, #40]	; 0x28
 8006f32:	4413      	add	r3, r2
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	2300      	movs	r3, #0
 8006f38:	9307      	str	r3, [sp, #28]
 8006f3a:	9b06      	ldr	r3, [sp, #24]
 8006f3c:	2b09      	cmp	r3, #9
 8006f3e:	f200 8089 	bhi.w	8007054 <_dtoa_r+0x2f4>
 8006f42:	2b05      	cmp	r3, #5
 8006f44:	bfc4      	itt	gt
 8006f46:	3b04      	subgt	r3, #4
 8006f48:	9306      	strgt	r3, [sp, #24]
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f50:	bfcc      	ite	gt
 8006f52:	2500      	movgt	r5, #0
 8006f54:	2501      	movle	r5, #1
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	f200 8087 	bhi.w	800706a <_dtoa_r+0x30a>
 8006f5c:	e8df f003 	tbb	[pc, r3]
 8006f60:	59383a2d 	.word	0x59383a2d
 8006f64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f68:	441d      	add	r5, r3
 8006f6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	bfc1      	itttt	gt
 8006f72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006f7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f82:	bfda      	itte	le
 8006f84:	f1c3 0320 	rsble	r3, r3, #32
 8006f88:	fa06 f003 	lslle.w	r0, r6, r3
 8006f8c:	4318      	orrgt	r0, r3
 8006f8e:	f7f9 fac1 	bl	8000514 <__aeabi_ui2d>
 8006f92:	2301      	movs	r3, #1
 8006f94:	4606      	mov	r6, r0
 8006f96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f9a:	3d01      	subs	r5, #1
 8006f9c:	930e      	str	r3, [sp, #56]	; 0x38
 8006f9e:	e76a      	b.n	8006e76 <_dtoa_r+0x116>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e7b2      	b.n	8006f0a <_dtoa_r+0x1aa>
 8006fa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fa6:	e7b1      	b.n	8006f0c <_dtoa_r+0x1ac>
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	9a00      	ldr	r2, [sp, #0]
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	9304      	str	r3, [sp, #16]
 8006fb0:	4253      	negs	r3, r2
 8006fb2:	9307      	str	r3, [sp, #28]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006fb8:	e7bf      	b.n	8006f3a <_dtoa_r+0x1da>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9308      	str	r3, [sp, #32]
 8006fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dc55      	bgt.n	8007070 <_dtoa_r+0x310>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8006fce:	e00c      	b.n	8006fea <_dtoa_r+0x28a>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e7f3      	b.n	8006fbc <_dtoa_r+0x25c>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fd8:	9308      	str	r3, [sp, #32]
 8006fda:	9b00      	ldr	r3, [sp, #0]
 8006fdc:	4413      	add	r3, r2
 8006fde:	9302      	str	r3, [sp, #8]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	9303      	str	r3, [sp, #12]
 8006fe6:	bfb8      	it	lt
 8006fe8:	2301      	movlt	r3, #1
 8006fea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006fec:	2200      	movs	r2, #0
 8006fee:	6042      	str	r2, [r0, #4]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	f102 0614 	add.w	r6, r2, #20
 8006ff6:	429e      	cmp	r6, r3
 8006ff8:	6841      	ldr	r1, [r0, #4]
 8006ffa:	d93d      	bls.n	8007078 <_dtoa_r+0x318>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 fcb7 	bl	8007970 <_Balloc>
 8007002:	9001      	str	r0, [sp, #4]
 8007004:	2800      	cmp	r0, #0
 8007006:	d13b      	bne.n	8007080 <_dtoa_r+0x320>
 8007008:	4b11      	ldr	r3, [pc, #68]	; (8007050 <_dtoa_r+0x2f0>)
 800700a:	4602      	mov	r2, r0
 800700c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007010:	e6c0      	b.n	8006d94 <_dtoa_r+0x34>
 8007012:	2301      	movs	r3, #1
 8007014:	e7df      	b.n	8006fd6 <_dtoa_r+0x276>
 8007016:	bf00      	nop
 8007018:	636f4361 	.word	0x636f4361
 800701c:	3fd287a7 	.word	0x3fd287a7
 8007020:	8b60c8b3 	.word	0x8b60c8b3
 8007024:	3fc68a28 	.word	0x3fc68a28
 8007028:	509f79fb 	.word	0x509f79fb
 800702c:	3fd34413 	.word	0x3fd34413
 8007030:	080098e5 	.word	0x080098e5
 8007034:	080098fc 	.word	0x080098fc
 8007038:	7ff00000 	.word	0x7ff00000
 800703c:	080098e1 	.word	0x080098e1
 8007040:	080098d8 	.word	0x080098d8
 8007044:	080098b5 	.word	0x080098b5
 8007048:	3ff80000 	.word	0x3ff80000
 800704c:	080099f0 	.word	0x080099f0
 8007050:	08009957 	.word	0x08009957
 8007054:	2501      	movs	r5, #1
 8007056:	2300      	movs	r3, #0
 8007058:	9306      	str	r3, [sp, #24]
 800705a:	9508      	str	r5, [sp, #32]
 800705c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007060:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007064:	2200      	movs	r2, #0
 8007066:	2312      	movs	r3, #18
 8007068:	e7b0      	b.n	8006fcc <_dtoa_r+0x26c>
 800706a:	2301      	movs	r3, #1
 800706c:	9308      	str	r3, [sp, #32]
 800706e:	e7f5      	b.n	800705c <_dtoa_r+0x2fc>
 8007070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007072:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007076:	e7b8      	b.n	8006fea <_dtoa_r+0x28a>
 8007078:	3101      	adds	r1, #1
 800707a:	6041      	str	r1, [r0, #4]
 800707c:	0052      	lsls	r2, r2, #1
 800707e:	e7b8      	b.n	8006ff2 <_dtoa_r+0x292>
 8007080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007082:	9a01      	ldr	r2, [sp, #4]
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	2b0e      	cmp	r3, #14
 800708a:	f200 809d 	bhi.w	80071c8 <_dtoa_r+0x468>
 800708e:	2d00      	cmp	r5, #0
 8007090:	f000 809a 	beq.w	80071c8 <_dtoa_r+0x468>
 8007094:	9b00      	ldr	r3, [sp, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	dd32      	ble.n	8007100 <_dtoa_r+0x3a0>
 800709a:	4ab7      	ldr	r2, [pc, #732]	; (8007378 <_dtoa_r+0x618>)
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070a8:	9b00      	ldr	r3, [sp, #0]
 80070aa:	05d8      	lsls	r0, r3, #23
 80070ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80070b0:	d516      	bpl.n	80070e0 <_dtoa_r+0x380>
 80070b2:	4bb2      	ldr	r3, [pc, #712]	; (800737c <_dtoa_r+0x61c>)
 80070b4:	ec51 0b19 	vmov	r0, r1, d9
 80070b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070bc:	f7f9 fbce 	bl	800085c <__aeabi_ddiv>
 80070c0:	f007 070f 	and.w	r7, r7, #15
 80070c4:	4682      	mov	sl, r0
 80070c6:	468b      	mov	fp, r1
 80070c8:	2503      	movs	r5, #3
 80070ca:	4eac      	ldr	r6, [pc, #688]	; (800737c <_dtoa_r+0x61c>)
 80070cc:	b957      	cbnz	r7, 80070e4 <_dtoa_r+0x384>
 80070ce:	4642      	mov	r2, r8
 80070d0:	464b      	mov	r3, r9
 80070d2:	4650      	mov	r0, sl
 80070d4:	4659      	mov	r1, fp
 80070d6:	f7f9 fbc1 	bl	800085c <__aeabi_ddiv>
 80070da:	4682      	mov	sl, r0
 80070dc:	468b      	mov	fp, r1
 80070de:	e028      	b.n	8007132 <_dtoa_r+0x3d2>
 80070e0:	2502      	movs	r5, #2
 80070e2:	e7f2      	b.n	80070ca <_dtoa_r+0x36a>
 80070e4:	07f9      	lsls	r1, r7, #31
 80070e6:	d508      	bpl.n	80070fa <_dtoa_r+0x39a>
 80070e8:	4640      	mov	r0, r8
 80070ea:	4649      	mov	r1, r9
 80070ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070f0:	f7f9 fa8a 	bl	8000608 <__aeabi_dmul>
 80070f4:	3501      	adds	r5, #1
 80070f6:	4680      	mov	r8, r0
 80070f8:	4689      	mov	r9, r1
 80070fa:	107f      	asrs	r7, r7, #1
 80070fc:	3608      	adds	r6, #8
 80070fe:	e7e5      	b.n	80070cc <_dtoa_r+0x36c>
 8007100:	f000 809b 	beq.w	800723a <_dtoa_r+0x4da>
 8007104:	9b00      	ldr	r3, [sp, #0]
 8007106:	4f9d      	ldr	r7, [pc, #628]	; (800737c <_dtoa_r+0x61c>)
 8007108:	425e      	negs	r6, r3
 800710a:	4b9b      	ldr	r3, [pc, #620]	; (8007378 <_dtoa_r+0x618>)
 800710c:	f006 020f 	and.w	r2, r6, #15
 8007110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	ec51 0b19 	vmov	r0, r1, d9
 800711c:	f7f9 fa74 	bl	8000608 <__aeabi_dmul>
 8007120:	1136      	asrs	r6, r6, #4
 8007122:	4682      	mov	sl, r0
 8007124:	468b      	mov	fp, r1
 8007126:	2300      	movs	r3, #0
 8007128:	2502      	movs	r5, #2
 800712a:	2e00      	cmp	r6, #0
 800712c:	d17a      	bne.n	8007224 <_dtoa_r+0x4c4>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1d3      	bne.n	80070da <_dtoa_r+0x37a>
 8007132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8082 	beq.w	800723e <_dtoa_r+0x4de>
 800713a:	4b91      	ldr	r3, [pc, #580]	; (8007380 <_dtoa_r+0x620>)
 800713c:	2200      	movs	r2, #0
 800713e:	4650      	mov	r0, sl
 8007140:	4659      	mov	r1, fp
 8007142:	f7f9 fcd3 	bl	8000aec <__aeabi_dcmplt>
 8007146:	2800      	cmp	r0, #0
 8007148:	d079      	beq.n	800723e <_dtoa_r+0x4de>
 800714a:	9b03      	ldr	r3, [sp, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d076      	beq.n	800723e <_dtoa_r+0x4de>
 8007150:	9b02      	ldr	r3, [sp, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dd36      	ble.n	80071c4 <_dtoa_r+0x464>
 8007156:	9b00      	ldr	r3, [sp, #0]
 8007158:	4650      	mov	r0, sl
 800715a:	4659      	mov	r1, fp
 800715c:	1e5f      	subs	r7, r3, #1
 800715e:	2200      	movs	r2, #0
 8007160:	4b88      	ldr	r3, [pc, #544]	; (8007384 <_dtoa_r+0x624>)
 8007162:	f7f9 fa51 	bl	8000608 <__aeabi_dmul>
 8007166:	9e02      	ldr	r6, [sp, #8]
 8007168:	4682      	mov	sl, r0
 800716a:	468b      	mov	fp, r1
 800716c:	3501      	adds	r5, #1
 800716e:	4628      	mov	r0, r5
 8007170:	f7f9 f9e0 	bl	8000534 <__aeabi_i2d>
 8007174:	4652      	mov	r2, sl
 8007176:	465b      	mov	r3, fp
 8007178:	f7f9 fa46 	bl	8000608 <__aeabi_dmul>
 800717c:	4b82      	ldr	r3, [pc, #520]	; (8007388 <_dtoa_r+0x628>)
 800717e:	2200      	movs	r2, #0
 8007180:	f7f9 f88c 	bl	800029c <__adddf3>
 8007184:	46d0      	mov	r8, sl
 8007186:	46d9      	mov	r9, fp
 8007188:	4682      	mov	sl, r0
 800718a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800718e:	2e00      	cmp	r6, #0
 8007190:	d158      	bne.n	8007244 <_dtoa_r+0x4e4>
 8007192:	4b7e      	ldr	r3, [pc, #504]	; (800738c <_dtoa_r+0x62c>)
 8007194:	2200      	movs	r2, #0
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	f7f9 f87d 	bl	8000298 <__aeabi_dsub>
 800719e:	4652      	mov	r2, sl
 80071a0:	465b      	mov	r3, fp
 80071a2:	4680      	mov	r8, r0
 80071a4:	4689      	mov	r9, r1
 80071a6:	f7f9 fcbf 	bl	8000b28 <__aeabi_dcmpgt>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	f040 8295 	bne.w	80076da <_dtoa_r+0x97a>
 80071b0:	4652      	mov	r2, sl
 80071b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071b6:	4640      	mov	r0, r8
 80071b8:	4649      	mov	r1, r9
 80071ba:	f7f9 fc97 	bl	8000aec <__aeabi_dcmplt>
 80071be:	2800      	cmp	r0, #0
 80071c0:	f040 8289 	bne.w	80076d6 <_dtoa_r+0x976>
 80071c4:	ec5b ab19 	vmov	sl, fp, d9
 80071c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f2c0 8148 	blt.w	8007460 <_dtoa_r+0x700>
 80071d0:	9a00      	ldr	r2, [sp, #0]
 80071d2:	2a0e      	cmp	r2, #14
 80071d4:	f300 8144 	bgt.w	8007460 <_dtoa_r+0x700>
 80071d8:	4b67      	ldr	r3, [pc, #412]	; (8007378 <_dtoa_r+0x618>)
 80071da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f280 80d5 	bge.w	8007394 <_dtoa_r+0x634>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f300 80d1 	bgt.w	8007394 <_dtoa_r+0x634>
 80071f2:	f040 826f 	bne.w	80076d4 <_dtoa_r+0x974>
 80071f6:	4b65      	ldr	r3, [pc, #404]	; (800738c <_dtoa_r+0x62c>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 fa03 	bl	8000608 <__aeabi_dmul>
 8007202:	4652      	mov	r2, sl
 8007204:	465b      	mov	r3, fp
 8007206:	f7f9 fc85 	bl	8000b14 <__aeabi_dcmpge>
 800720a:	9e03      	ldr	r6, [sp, #12]
 800720c:	4637      	mov	r7, r6
 800720e:	2800      	cmp	r0, #0
 8007210:	f040 8245 	bne.w	800769e <_dtoa_r+0x93e>
 8007214:	9d01      	ldr	r5, [sp, #4]
 8007216:	2331      	movs	r3, #49	; 0x31
 8007218:	f805 3b01 	strb.w	r3, [r5], #1
 800721c:	9b00      	ldr	r3, [sp, #0]
 800721e:	3301      	adds	r3, #1
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	e240      	b.n	80076a6 <_dtoa_r+0x946>
 8007224:	07f2      	lsls	r2, r6, #31
 8007226:	d505      	bpl.n	8007234 <_dtoa_r+0x4d4>
 8007228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800722c:	f7f9 f9ec 	bl	8000608 <__aeabi_dmul>
 8007230:	3501      	adds	r5, #1
 8007232:	2301      	movs	r3, #1
 8007234:	1076      	asrs	r6, r6, #1
 8007236:	3708      	adds	r7, #8
 8007238:	e777      	b.n	800712a <_dtoa_r+0x3ca>
 800723a:	2502      	movs	r5, #2
 800723c:	e779      	b.n	8007132 <_dtoa_r+0x3d2>
 800723e:	9f00      	ldr	r7, [sp, #0]
 8007240:	9e03      	ldr	r6, [sp, #12]
 8007242:	e794      	b.n	800716e <_dtoa_r+0x40e>
 8007244:	9901      	ldr	r1, [sp, #4]
 8007246:	4b4c      	ldr	r3, [pc, #304]	; (8007378 <_dtoa_r+0x618>)
 8007248:	4431      	add	r1, r6
 800724a:	910d      	str	r1, [sp, #52]	; 0x34
 800724c:	9908      	ldr	r1, [sp, #32]
 800724e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007252:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007256:	2900      	cmp	r1, #0
 8007258:	d043      	beq.n	80072e2 <_dtoa_r+0x582>
 800725a:	494d      	ldr	r1, [pc, #308]	; (8007390 <_dtoa_r+0x630>)
 800725c:	2000      	movs	r0, #0
 800725e:	f7f9 fafd 	bl	800085c <__aeabi_ddiv>
 8007262:	4652      	mov	r2, sl
 8007264:	465b      	mov	r3, fp
 8007266:	f7f9 f817 	bl	8000298 <__aeabi_dsub>
 800726a:	9d01      	ldr	r5, [sp, #4]
 800726c:	4682      	mov	sl, r0
 800726e:	468b      	mov	fp, r1
 8007270:	4649      	mov	r1, r9
 8007272:	4640      	mov	r0, r8
 8007274:	f7f9 fc78 	bl	8000b68 <__aeabi_d2iz>
 8007278:	4606      	mov	r6, r0
 800727a:	f7f9 f95b 	bl	8000534 <__aeabi_i2d>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4640      	mov	r0, r8
 8007284:	4649      	mov	r1, r9
 8007286:	f7f9 f807 	bl	8000298 <__aeabi_dsub>
 800728a:	3630      	adds	r6, #48	; 0x30
 800728c:	f805 6b01 	strb.w	r6, [r5], #1
 8007290:	4652      	mov	r2, sl
 8007292:	465b      	mov	r3, fp
 8007294:	4680      	mov	r8, r0
 8007296:	4689      	mov	r9, r1
 8007298:	f7f9 fc28 	bl	8000aec <__aeabi_dcmplt>
 800729c:	2800      	cmp	r0, #0
 800729e:	d163      	bne.n	8007368 <_dtoa_r+0x608>
 80072a0:	4642      	mov	r2, r8
 80072a2:	464b      	mov	r3, r9
 80072a4:	4936      	ldr	r1, [pc, #216]	; (8007380 <_dtoa_r+0x620>)
 80072a6:	2000      	movs	r0, #0
 80072a8:	f7f8 fff6 	bl	8000298 <__aeabi_dsub>
 80072ac:	4652      	mov	r2, sl
 80072ae:	465b      	mov	r3, fp
 80072b0:	f7f9 fc1c 	bl	8000aec <__aeabi_dcmplt>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f040 80b5 	bne.w	8007424 <_dtoa_r+0x6c4>
 80072ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072bc:	429d      	cmp	r5, r3
 80072be:	d081      	beq.n	80071c4 <_dtoa_r+0x464>
 80072c0:	4b30      	ldr	r3, [pc, #192]	; (8007384 <_dtoa_r+0x624>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	4650      	mov	r0, sl
 80072c6:	4659      	mov	r1, fp
 80072c8:	f7f9 f99e 	bl	8000608 <__aeabi_dmul>
 80072cc:	4b2d      	ldr	r3, [pc, #180]	; (8007384 <_dtoa_r+0x624>)
 80072ce:	4682      	mov	sl, r0
 80072d0:	468b      	mov	fp, r1
 80072d2:	4640      	mov	r0, r8
 80072d4:	4649      	mov	r1, r9
 80072d6:	2200      	movs	r2, #0
 80072d8:	f7f9 f996 	bl	8000608 <__aeabi_dmul>
 80072dc:	4680      	mov	r8, r0
 80072de:	4689      	mov	r9, r1
 80072e0:	e7c6      	b.n	8007270 <_dtoa_r+0x510>
 80072e2:	4650      	mov	r0, sl
 80072e4:	4659      	mov	r1, fp
 80072e6:	f7f9 f98f 	bl	8000608 <__aeabi_dmul>
 80072ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ec:	9d01      	ldr	r5, [sp, #4]
 80072ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80072f0:	4682      	mov	sl, r0
 80072f2:	468b      	mov	fp, r1
 80072f4:	4649      	mov	r1, r9
 80072f6:	4640      	mov	r0, r8
 80072f8:	f7f9 fc36 	bl	8000b68 <__aeabi_d2iz>
 80072fc:	4606      	mov	r6, r0
 80072fe:	f7f9 f919 	bl	8000534 <__aeabi_i2d>
 8007302:	3630      	adds	r6, #48	; 0x30
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	f7f8 ffc4 	bl	8000298 <__aeabi_dsub>
 8007310:	f805 6b01 	strb.w	r6, [r5], #1
 8007314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007316:	429d      	cmp	r5, r3
 8007318:	4680      	mov	r8, r0
 800731a:	4689      	mov	r9, r1
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	d124      	bne.n	800736c <_dtoa_r+0x60c>
 8007322:	4b1b      	ldr	r3, [pc, #108]	; (8007390 <_dtoa_r+0x630>)
 8007324:	4650      	mov	r0, sl
 8007326:	4659      	mov	r1, fp
 8007328:	f7f8 ffb8 	bl	800029c <__adddf3>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4640      	mov	r0, r8
 8007332:	4649      	mov	r1, r9
 8007334:	f7f9 fbf8 	bl	8000b28 <__aeabi_dcmpgt>
 8007338:	2800      	cmp	r0, #0
 800733a:	d173      	bne.n	8007424 <_dtoa_r+0x6c4>
 800733c:	4652      	mov	r2, sl
 800733e:	465b      	mov	r3, fp
 8007340:	4913      	ldr	r1, [pc, #76]	; (8007390 <_dtoa_r+0x630>)
 8007342:	2000      	movs	r0, #0
 8007344:	f7f8 ffa8 	bl	8000298 <__aeabi_dsub>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4640      	mov	r0, r8
 800734e:	4649      	mov	r1, r9
 8007350:	f7f9 fbcc 	bl	8000aec <__aeabi_dcmplt>
 8007354:	2800      	cmp	r0, #0
 8007356:	f43f af35 	beq.w	80071c4 <_dtoa_r+0x464>
 800735a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800735c:	1e6b      	subs	r3, r5, #1
 800735e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007360:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007364:	2b30      	cmp	r3, #48	; 0x30
 8007366:	d0f8      	beq.n	800735a <_dtoa_r+0x5fa>
 8007368:	9700      	str	r7, [sp, #0]
 800736a:	e049      	b.n	8007400 <_dtoa_r+0x6a0>
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <_dtoa_r+0x624>)
 800736e:	f7f9 f94b 	bl	8000608 <__aeabi_dmul>
 8007372:	4680      	mov	r8, r0
 8007374:	4689      	mov	r9, r1
 8007376:	e7bd      	b.n	80072f4 <_dtoa_r+0x594>
 8007378:	080099f0 	.word	0x080099f0
 800737c:	080099c8 	.word	0x080099c8
 8007380:	3ff00000 	.word	0x3ff00000
 8007384:	40240000 	.word	0x40240000
 8007388:	401c0000 	.word	0x401c0000
 800738c:	40140000 	.word	0x40140000
 8007390:	3fe00000 	.word	0x3fe00000
 8007394:	9d01      	ldr	r5, [sp, #4]
 8007396:	4656      	mov	r6, sl
 8007398:	465f      	mov	r7, fp
 800739a:	4642      	mov	r2, r8
 800739c:	464b      	mov	r3, r9
 800739e:	4630      	mov	r0, r6
 80073a0:	4639      	mov	r1, r7
 80073a2:	f7f9 fa5b 	bl	800085c <__aeabi_ddiv>
 80073a6:	f7f9 fbdf 	bl	8000b68 <__aeabi_d2iz>
 80073aa:	4682      	mov	sl, r0
 80073ac:	f7f9 f8c2 	bl	8000534 <__aeabi_i2d>
 80073b0:	4642      	mov	r2, r8
 80073b2:	464b      	mov	r3, r9
 80073b4:	f7f9 f928 	bl	8000608 <__aeabi_dmul>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4630      	mov	r0, r6
 80073be:	4639      	mov	r1, r7
 80073c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80073c4:	f7f8 ff68 	bl	8000298 <__aeabi_dsub>
 80073c8:	f805 6b01 	strb.w	r6, [r5], #1
 80073cc:	9e01      	ldr	r6, [sp, #4]
 80073ce:	9f03      	ldr	r7, [sp, #12]
 80073d0:	1bae      	subs	r6, r5, r6
 80073d2:	42b7      	cmp	r7, r6
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	d135      	bne.n	8007446 <_dtoa_r+0x6e6>
 80073da:	f7f8 ff5f 	bl	800029c <__adddf3>
 80073de:	4642      	mov	r2, r8
 80073e0:	464b      	mov	r3, r9
 80073e2:	4606      	mov	r6, r0
 80073e4:	460f      	mov	r7, r1
 80073e6:	f7f9 fb9f 	bl	8000b28 <__aeabi_dcmpgt>
 80073ea:	b9d0      	cbnz	r0, 8007422 <_dtoa_r+0x6c2>
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f9 fb70 	bl	8000ad8 <__aeabi_dcmpeq>
 80073f8:	b110      	cbz	r0, 8007400 <_dtoa_r+0x6a0>
 80073fa:	f01a 0f01 	tst.w	sl, #1
 80073fe:	d110      	bne.n	8007422 <_dtoa_r+0x6c2>
 8007400:	4620      	mov	r0, r4
 8007402:	ee18 1a10 	vmov	r1, s16
 8007406:	f000 faf3 	bl	80079f0 <_Bfree>
 800740a:	2300      	movs	r3, #0
 800740c:	9800      	ldr	r0, [sp, #0]
 800740e:	702b      	strb	r3, [r5, #0]
 8007410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007412:	3001      	adds	r0, #1
 8007414:	6018      	str	r0, [r3, #0]
 8007416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007418:	2b00      	cmp	r3, #0
 800741a:	f43f acf1 	beq.w	8006e00 <_dtoa_r+0xa0>
 800741e:	601d      	str	r5, [r3, #0]
 8007420:	e4ee      	b.n	8006e00 <_dtoa_r+0xa0>
 8007422:	9f00      	ldr	r7, [sp, #0]
 8007424:	462b      	mov	r3, r5
 8007426:	461d      	mov	r5, r3
 8007428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800742c:	2a39      	cmp	r2, #57	; 0x39
 800742e:	d106      	bne.n	800743e <_dtoa_r+0x6de>
 8007430:	9a01      	ldr	r2, [sp, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d1f7      	bne.n	8007426 <_dtoa_r+0x6c6>
 8007436:	9901      	ldr	r1, [sp, #4]
 8007438:	2230      	movs	r2, #48	; 0x30
 800743a:	3701      	adds	r7, #1
 800743c:	700a      	strb	r2, [r1, #0]
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	3201      	adds	r2, #1
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	e790      	b.n	8007368 <_dtoa_r+0x608>
 8007446:	4ba6      	ldr	r3, [pc, #664]	; (80076e0 <_dtoa_r+0x980>)
 8007448:	2200      	movs	r2, #0
 800744a:	f7f9 f8dd 	bl	8000608 <__aeabi_dmul>
 800744e:	2200      	movs	r2, #0
 8007450:	2300      	movs	r3, #0
 8007452:	4606      	mov	r6, r0
 8007454:	460f      	mov	r7, r1
 8007456:	f7f9 fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800745a:	2800      	cmp	r0, #0
 800745c:	d09d      	beq.n	800739a <_dtoa_r+0x63a>
 800745e:	e7cf      	b.n	8007400 <_dtoa_r+0x6a0>
 8007460:	9a08      	ldr	r2, [sp, #32]
 8007462:	2a00      	cmp	r2, #0
 8007464:	f000 80d7 	beq.w	8007616 <_dtoa_r+0x8b6>
 8007468:	9a06      	ldr	r2, [sp, #24]
 800746a:	2a01      	cmp	r2, #1
 800746c:	f300 80ba 	bgt.w	80075e4 <_dtoa_r+0x884>
 8007470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007472:	2a00      	cmp	r2, #0
 8007474:	f000 80b2 	beq.w	80075dc <_dtoa_r+0x87c>
 8007478:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800747c:	9e07      	ldr	r6, [sp, #28]
 800747e:	9d04      	ldr	r5, [sp, #16]
 8007480:	9a04      	ldr	r2, [sp, #16]
 8007482:	441a      	add	r2, r3
 8007484:	9204      	str	r2, [sp, #16]
 8007486:	9a05      	ldr	r2, [sp, #20]
 8007488:	2101      	movs	r1, #1
 800748a:	441a      	add	r2, r3
 800748c:	4620      	mov	r0, r4
 800748e:	9205      	str	r2, [sp, #20]
 8007490:	f000 fb66 	bl	8007b60 <__i2b>
 8007494:	4607      	mov	r7, r0
 8007496:	2d00      	cmp	r5, #0
 8007498:	dd0c      	ble.n	80074b4 <_dtoa_r+0x754>
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	dd09      	ble.n	80074b4 <_dtoa_r+0x754>
 80074a0:	42ab      	cmp	r3, r5
 80074a2:	9a04      	ldr	r2, [sp, #16]
 80074a4:	bfa8      	it	ge
 80074a6:	462b      	movge	r3, r5
 80074a8:	1ad2      	subs	r2, r2, r3
 80074aa:	9204      	str	r2, [sp, #16]
 80074ac:	9a05      	ldr	r2, [sp, #20]
 80074ae:	1aed      	subs	r5, r5, r3
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	9305      	str	r3, [sp, #20]
 80074b4:	9b07      	ldr	r3, [sp, #28]
 80074b6:	b31b      	cbz	r3, 8007500 <_dtoa_r+0x7a0>
 80074b8:	9b08      	ldr	r3, [sp, #32]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80af 	beq.w	800761e <_dtoa_r+0x8be>
 80074c0:	2e00      	cmp	r6, #0
 80074c2:	dd13      	ble.n	80074ec <_dtoa_r+0x78c>
 80074c4:	4639      	mov	r1, r7
 80074c6:	4632      	mov	r2, r6
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fc09 	bl	8007ce0 <__pow5mult>
 80074ce:	ee18 2a10 	vmov	r2, s16
 80074d2:	4601      	mov	r1, r0
 80074d4:	4607      	mov	r7, r0
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 fb58 	bl	8007b8c <__multiply>
 80074dc:	ee18 1a10 	vmov	r1, s16
 80074e0:	4680      	mov	r8, r0
 80074e2:	4620      	mov	r0, r4
 80074e4:	f000 fa84 	bl	80079f0 <_Bfree>
 80074e8:	ee08 8a10 	vmov	s16, r8
 80074ec:	9b07      	ldr	r3, [sp, #28]
 80074ee:	1b9a      	subs	r2, r3, r6
 80074f0:	d006      	beq.n	8007500 <_dtoa_r+0x7a0>
 80074f2:	ee18 1a10 	vmov	r1, s16
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fbf2 	bl	8007ce0 <__pow5mult>
 80074fc:	ee08 0a10 	vmov	s16, r0
 8007500:	2101      	movs	r1, #1
 8007502:	4620      	mov	r0, r4
 8007504:	f000 fb2c 	bl	8007b60 <__i2b>
 8007508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750a:	2b00      	cmp	r3, #0
 800750c:	4606      	mov	r6, r0
 800750e:	f340 8088 	ble.w	8007622 <_dtoa_r+0x8c2>
 8007512:	461a      	mov	r2, r3
 8007514:	4601      	mov	r1, r0
 8007516:	4620      	mov	r0, r4
 8007518:	f000 fbe2 	bl	8007ce0 <__pow5mult>
 800751c:	9b06      	ldr	r3, [sp, #24]
 800751e:	2b01      	cmp	r3, #1
 8007520:	4606      	mov	r6, r0
 8007522:	f340 8081 	ble.w	8007628 <_dtoa_r+0x8c8>
 8007526:	f04f 0800 	mov.w	r8, #0
 800752a:	6933      	ldr	r3, [r6, #16]
 800752c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007530:	6918      	ldr	r0, [r3, #16]
 8007532:	f000 fac5 	bl	8007ac0 <__hi0bits>
 8007536:	f1c0 0020 	rsb	r0, r0, #32
 800753a:	9b05      	ldr	r3, [sp, #20]
 800753c:	4418      	add	r0, r3
 800753e:	f010 001f 	ands.w	r0, r0, #31
 8007542:	f000 8092 	beq.w	800766a <_dtoa_r+0x90a>
 8007546:	f1c0 0320 	rsb	r3, r0, #32
 800754a:	2b04      	cmp	r3, #4
 800754c:	f340 808a 	ble.w	8007664 <_dtoa_r+0x904>
 8007550:	f1c0 001c 	rsb	r0, r0, #28
 8007554:	9b04      	ldr	r3, [sp, #16]
 8007556:	4403      	add	r3, r0
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	9b05      	ldr	r3, [sp, #20]
 800755c:	4403      	add	r3, r0
 800755e:	4405      	add	r5, r0
 8007560:	9305      	str	r3, [sp, #20]
 8007562:	9b04      	ldr	r3, [sp, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	dd07      	ble.n	8007578 <_dtoa_r+0x818>
 8007568:	ee18 1a10 	vmov	r1, s16
 800756c:	461a      	mov	r2, r3
 800756e:	4620      	mov	r0, r4
 8007570:	f000 fc10 	bl	8007d94 <__lshift>
 8007574:	ee08 0a10 	vmov	s16, r0
 8007578:	9b05      	ldr	r3, [sp, #20]
 800757a:	2b00      	cmp	r3, #0
 800757c:	dd05      	ble.n	800758a <_dtoa_r+0x82a>
 800757e:	4631      	mov	r1, r6
 8007580:	461a      	mov	r2, r3
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fc06 	bl	8007d94 <__lshift>
 8007588:	4606      	mov	r6, r0
 800758a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d06e      	beq.n	800766e <_dtoa_r+0x90e>
 8007590:	ee18 0a10 	vmov	r0, s16
 8007594:	4631      	mov	r1, r6
 8007596:	f000 fc6d 	bl	8007e74 <__mcmp>
 800759a:	2800      	cmp	r0, #0
 800759c:	da67      	bge.n	800766e <_dtoa_r+0x90e>
 800759e:	9b00      	ldr	r3, [sp, #0]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	ee18 1a10 	vmov	r1, s16
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	220a      	movs	r2, #10
 80075aa:	2300      	movs	r3, #0
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 fa41 	bl	8007a34 <__multadd>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	ee08 0a10 	vmov	s16, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 81b1 	beq.w	8007920 <_dtoa_r+0xbc0>
 80075be:	2300      	movs	r3, #0
 80075c0:	4639      	mov	r1, r7
 80075c2:	220a      	movs	r2, #10
 80075c4:	4620      	mov	r0, r4
 80075c6:	f000 fa35 	bl	8007a34 <__multadd>
 80075ca:	9b02      	ldr	r3, [sp, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	4607      	mov	r7, r0
 80075d0:	f300 808e 	bgt.w	80076f0 <_dtoa_r+0x990>
 80075d4:	9b06      	ldr	r3, [sp, #24]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	dc51      	bgt.n	800767e <_dtoa_r+0x91e>
 80075da:	e089      	b.n	80076f0 <_dtoa_r+0x990>
 80075dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075e2:	e74b      	b.n	800747c <_dtoa_r+0x71c>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	1e5e      	subs	r6, r3, #1
 80075e8:	9b07      	ldr	r3, [sp, #28]
 80075ea:	42b3      	cmp	r3, r6
 80075ec:	bfbf      	itttt	lt
 80075ee:	9b07      	ldrlt	r3, [sp, #28]
 80075f0:	9607      	strlt	r6, [sp, #28]
 80075f2:	1af2      	sublt	r2, r6, r3
 80075f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80075f6:	bfb6      	itet	lt
 80075f8:	189b      	addlt	r3, r3, r2
 80075fa:	1b9e      	subge	r6, r3, r6
 80075fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	bfb8      	it	lt
 8007602:	2600      	movlt	r6, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	bfb7      	itett	lt
 8007608:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800760c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007610:	1a9d      	sublt	r5, r3, r2
 8007612:	2300      	movlt	r3, #0
 8007614:	e734      	b.n	8007480 <_dtoa_r+0x720>
 8007616:	9e07      	ldr	r6, [sp, #28]
 8007618:	9d04      	ldr	r5, [sp, #16]
 800761a:	9f08      	ldr	r7, [sp, #32]
 800761c:	e73b      	b.n	8007496 <_dtoa_r+0x736>
 800761e:	9a07      	ldr	r2, [sp, #28]
 8007620:	e767      	b.n	80074f2 <_dtoa_r+0x792>
 8007622:	9b06      	ldr	r3, [sp, #24]
 8007624:	2b01      	cmp	r3, #1
 8007626:	dc18      	bgt.n	800765a <_dtoa_r+0x8fa>
 8007628:	f1ba 0f00 	cmp.w	sl, #0
 800762c:	d115      	bne.n	800765a <_dtoa_r+0x8fa>
 800762e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007632:	b993      	cbnz	r3, 800765a <_dtoa_r+0x8fa>
 8007634:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007638:	0d1b      	lsrs	r3, r3, #20
 800763a:	051b      	lsls	r3, r3, #20
 800763c:	b183      	cbz	r3, 8007660 <_dtoa_r+0x900>
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	3301      	adds	r3, #1
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	9b05      	ldr	r3, [sp, #20]
 8007646:	3301      	adds	r3, #1
 8007648:	9305      	str	r3, [sp, #20]
 800764a:	f04f 0801 	mov.w	r8, #1
 800764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007650:	2b00      	cmp	r3, #0
 8007652:	f47f af6a 	bne.w	800752a <_dtoa_r+0x7ca>
 8007656:	2001      	movs	r0, #1
 8007658:	e76f      	b.n	800753a <_dtoa_r+0x7da>
 800765a:	f04f 0800 	mov.w	r8, #0
 800765e:	e7f6      	b.n	800764e <_dtoa_r+0x8ee>
 8007660:	4698      	mov	r8, r3
 8007662:	e7f4      	b.n	800764e <_dtoa_r+0x8ee>
 8007664:	f43f af7d 	beq.w	8007562 <_dtoa_r+0x802>
 8007668:	4618      	mov	r0, r3
 800766a:	301c      	adds	r0, #28
 800766c:	e772      	b.n	8007554 <_dtoa_r+0x7f4>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	dc37      	bgt.n	80076e4 <_dtoa_r+0x984>
 8007674:	9b06      	ldr	r3, [sp, #24]
 8007676:	2b02      	cmp	r3, #2
 8007678:	dd34      	ble.n	80076e4 <_dtoa_r+0x984>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	9302      	str	r3, [sp, #8]
 800767e:	9b02      	ldr	r3, [sp, #8]
 8007680:	b96b      	cbnz	r3, 800769e <_dtoa_r+0x93e>
 8007682:	4631      	mov	r1, r6
 8007684:	2205      	movs	r2, #5
 8007686:	4620      	mov	r0, r4
 8007688:	f000 f9d4 	bl	8007a34 <__multadd>
 800768c:	4601      	mov	r1, r0
 800768e:	4606      	mov	r6, r0
 8007690:	ee18 0a10 	vmov	r0, s16
 8007694:	f000 fbee 	bl	8007e74 <__mcmp>
 8007698:	2800      	cmp	r0, #0
 800769a:	f73f adbb 	bgt.w	8007214 <_dtoa_r+0x4b4>
 800769e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a0:	9d01      	ldr	r5, [sp, #4]
 80076a2:	43db      	mvns	r3, r3
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	f04f 0800 	mov.w	r8, #0
 80076aa:	4631      	mov	r1, r6
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 f99f 	bl	80079f0 <_Bfree>
 80076b2:	2f00      	cmp	r7, #0
 80076b4:	f43f aea4 	beq.w	8007400 <_dtoa_r+0x6a0>
 80076b8:	f1b8 0f00 	cmp.w	r8, #0
 80076bc:	d005      	beq.n	80076ca <_dtoa_r+0x96a>
 80076be:	45b8      	cmp	r8, r7
 80076c0:	d003      	beq.n	80076ca <_dtoa_r+0x96a>
 80076c2:	4641      	mov	r1, r8
 80076c4:	4620      	mov	r0, r4
 80076c6:	f000 f993 	bl	80079f0 <_Bfree>
 80076ca:	4639      	mov	r1, r7
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 f98f 	bl	80079f0 <_Bfree>
 80076d2:	e695      	b.n	8007400 <_dtoa_r+0x6a0>
 80076d4:	2600      	movs	r6, #0
 80076d6:	4637      	mov	r7, r6
 80076d8:	e7e1      	b.n	800769e <_dtoa_r+0x93e>
 80076da:	9700      	str	r7, [sp, #0]
 80076dc:	4637      	mov	r7, r6
 80076de:	e599      	b.n	8007214 <_dtoa_r+0x4b4>
 80076e0:	40240000 	.word	0x40240000
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 80ca 	beq.w	8007880 <_dtoa_r+0xb20>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	9302      	str	r3, [sp, #8]
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	dd05      	ble.n	8007700 <_dtoa_r+0x9a0>
 80076f4:	4639      	mov	r1, r7
 80076f6:	462a      	mov	r2, r5
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 fb4b 	bl	8007d94 <__lshift>
 80076fe:	4607      	mov	r7, r0
 8007700:	f1b8 0f00 	cmp.w	r8, #0
 8007704:	d05b      	beq.n	80077be <_dtoa_r+0xa5e>
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	4620      	mov	r0, r4
 800770a:	f000 f931 	bl	8007970 <_Balloc>
 800770e:	4605      	mov	r5, r0
 8007710:	b928      	cbnz	r0, 800771e <_dtoa_r+0x9be>
 8007712:	4b87      	ldr	r3, [pc, #540]	; (8007930 <_dtoa_r+0xbd0>)
 8007714:	4602      	mov	r2, r0
 8007716:	f240 21ea 	movw	r1, #746	; 0x2ea
 800771a:	f7ff bb3b 	b.w	8006d94 <_dtoa_r+0x34>
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	3202      	adds	r2, #2
 8007722:	0092      	lsls	r2, r2, #2
 8007724:	f107 010c 	add.w	r1, r7, #12
 8007728:	300c      	adds	r0, #12
 800772a:	f000 f913 	bl	8007954 <memcpy>
 800772e:	2201      	movs	r2, #1
 8007730:	4629      	mov	r1, r5
 8007732:	4620      	mov	r0, r4
 8007734:	f000 fb2e 	bl	8007d94 <__lshift>
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	f103 0901 	add.w	r9, r3, #1
 800773e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007742:	4413      	add	r3, r2
 8007744:	9305      	str	r3, [sp, #20]
 8007746:	f00a 0301 	and.w	r3, sl, #1
 800774a:	46b8      	mov	r8, r7
 800774c:	9304      	str	r3, [sp, #16]
 800774e:	4607      	mov	r7, r0
 8007750:	4631      	mov	r1, r6
 8007752:	ee18 0a10 	vmov	r0, s16
 8007756:	f7ff fa77 	bl	8006c48 <quorem>
 800775a:	4641      	mov	r1, r8
 800775c:	9002      	str	r0, [sp, #8]
 800775e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007762:	ee18 0a10 	vmov	r0, s16
 8007766:	f000 fb85 	bl	8007e74 <__mcmp>
 800776a:	463a      	mov	r2, r7
 800776c:	9003      	str	r0, [sp, #12]
 800776e:	4631      	mov	r1, r6
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fb9b 	bl	8007eac <__mdiff>
 8007776:	68c2      	ldr	r2, [r0, #12]
 8007778:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800777c:	4605      	mov	r5, r0
 800777e:	bb02      	cbnz	r2, 80077c2 <_dtoa_r+0xa62>
 8007780:	4601      	mov	r1, r0
 8007782:	ee18 0a10 	vmov	r0, s16
 8007786:	f000 fb75 	bl	8007e74 <__mcmp>
 800778a:	4602      	mov	r2, r0
 800778c:	4629      	mov	r1, r5
 800778e:	4620      	mov	r0, r4
 8007790:	9207      	str	r2, [sp, #28]
 8007792:	f000 f92d 	bl	80079f0 <_Bfree>
 8007796:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800779a:	ea43 0102 	orr.w	r1, r3, r2
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	430b      	orrs	r3, r1
 80077a2:	464d      	mov	r5, r9
 80077a4:	d10f      	bne.n	80077c6 <_dtoa_r+0xa66>
 80077a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077aa:	d02a      	beq.n	8007802 <_dtoa_r+0xaa2>
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dd02      	ble.n	80077b8 <_dtoa_r+0xa58>
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80077b8:	f88b a000 	strb.w	sl, [fp]
 80077bc:	e775      	b.n	80076aa <_dtoa_r+0x94a>
 80077be:	4638      	mov	r0, r7
 80077c0:	e7ba      	b.n	8007738 <_dtoa_r+0x9d8>
 80077c2:	2201      	movs	r2, #1
 80077c4:	e7e2      	b.n	800778c <_dtoa_r+0xa2c>
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	db04      	blt.n	80077d6 <_dtoa_r+0xa76>
 80077cc:	9906      	ldr	r1, [sp, #24]
 80077ce:	430b      	orrs	r3, r1
 80077d0:	9904      	ldr	r1, [sp, #16]
 80077d2:	430b      	orrs	r3, r1
 80077d4:	d122      	bne.n	800781c <_dtoa_r+0xabc>
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	ddee      	ble.n	80077b8 <_dtoa_r+0xa58>
 80077da:	ee18 1a10 	vmov	r1, s16
 80077de:	2201      	movs	r2, #1
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fad7 	bl	8007d94 <__lshift>
 80077e6:	4631      	mov	r1, r6
 80077e8:	ee08 0a10 	vmov	s16, r0
 80077ec:	f000 fb42 	bl	8007e74 <__mcmp>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	dc03      	bgt.n	80077fc <_dtoa_r+0xa9c>
 80077f4:	d1e0      	bne.n	80077b8 <_dtoa_r+0xa58>
 80077f6:	f01a 0f01 	tst.w	sl, #1
 80077fa:	d0dd      	beq.n	80077b8 <_dtoa_r+0xa58>
 80077fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007800:	d1d7      	bne.n	80077b2 <_dtoa_r+0xa52>
 8007802:	2339      	movs	r3, #57	; 0x39
 8007804:	f88b 3000 	strb.w	r3, [fp]
 8007808:	462b      	mov	r3, r5
 800780a:	461d      	mov	r5, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007812:	2a39      	cmp	r2, #57	; 0x39
 8007814:	d071      	beq.n	80078fa <_dtoa_r+0xb9a>
 8007816:	3201      	adds	r2, #1
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	e746      	b.n	80076aa <_dtoa_r+0x94a>
 800781c:	2a00      	cmp	r2, #0
 800781e:	dd07      	ble.n	8007830 <_dtoa_r+0xad0>
 8007820:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007824:	d0ed      	beq.n	8007802 <_dtoa_r+0xaa2>
 8007826:	f10a 0301 	add.w	r3, sl, #1
 800782a:	f88b 3000 	strb.w	r3, [fp]
 800782e:	e73c      	b.n	80076aa <_dtoa_r+0x94a>
 8007830:	9b05      	ldr	r3, [sp, #20]
 8007832:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007836:	4599      	cmp	r9, r3
 8007838:	d047      	beq.n	80078ca <_dtoa_r+0xb6a>
 800783a:	ee18 1a10 	vmov	r1, s16
 800783e:	2300      	movs	r3, #0
 8007840:	220a      	movs	r2, #10
 8007842:	4620      	mov	r0, r4
 8007844:	f000 f8f6 	bl	8007a34 <__multadd>
 8007848:	45b8      	cmp	r8, r7
 800784a:	ee08 0a10 	vmov	s16, r0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	f04f 020a 	mov.w	r2, #10
 8007856:	4641      	mov	r1, r8
 8007858:	4620      	mov	r0, r4
 800785a:	d106      	bne.n	800786a <_dtoa_r+0xb0a>
 800785c:	f000 f8ea 	bl	8007a34 <__multadd>
 8007860:	4680      	mov	r8, r0
 8007862:	4607      	mov	r7, r0
 8007864:	f109 0901 	add.w	r9, r9, #1
 8007868:	e772      	b.n	8007750 <_dtoa_r+0x9f0>
 800786a:	f000 f8e3 	bl	8007a34 <__multadd>
 800786e:	4639      	mov	r1, r7
 8007870:	4680      	mov	r8, r0
 8007872:	2300      	movs	r3, #0
 8007874:	220a      	movs	r2, #10
 8007876:	4620      	mov	r0, r4
 8007878:	f000 f8dc 	bl	8007a34 <__multadd>
 800787c:	4607      	mov	r7, r0
 800787e:	e7f1      	b.n	8007864 <_dtoa_r+0xb04>
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	9302      	str	r3, [sp, #8]
 8007884:	9d01      	ldr	r5, [sp, #4]
 8007886:	ee18 0a10 	vmov	r0, s16
 800788a:	4631      	mov	r1, r6
 800788c:	f7ff f9dc 	bl	8006c48 <quorem>
 8007890:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	f805 ab01 	strb.w	sl, [r5], #1
 800789a:	1aea      	subs	r2, r5, r3
 800789c:	9b02      	ldr	r3, [sp, #8]
 800789e:	4293      	cmp	r3, r2
 80078a0:	dd09      	ble.n	80078b6 <_dtoa_r+0xb56>
 80078a2:	ee18 1a10 	vmov	r1, s16
 80078a6:	2300      	movs	r3, #0
 80078a8:	220a      	movs	r2, #10
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 f8c2 	bl	8007a34 <__multadd>
 80078b0:	ee08 0a10 	vmov	s16, r0
 80078b4:	e7e7      	b.n	8007886 <_dtoa_r+0xb26>
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bfc8      	it	gt
 80078bc:	461d      	movgt	r5, r3
 80078be:	9b01      	ldr	r3, [sp, #4]
 80078c0:	bfd8      	it	le
 80078c2:	2501      	movle	r5, #1
 80078c4:	441d      	add	r5, r3
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	ee18 1a10 	vmov	r1, s16
 80078ce:	2201      	movs	r2, #1
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 fa5f 	bl	8007d94 <__lshift>
 80078d6:	4631      	mov	r1, r6
 80078d8:	ee08 0a10 	vmov	s16, r0
 80078dc:	f000 faca 	bl	8007e74 <__mcmp>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	dc91      	bgt.n	8007808 <_dtoa_r+0xaa8>
 80078e4:	d102      	bne.n	80078ec <_dtoa_r+0xb8c>
 80078e6:	f01a 0f01 	tst.w	sl, #1
 80078ea:	d18d      	bne.n	8007808 <_dtoa_r+0xaa8>
 80078ec:	462b      	mov	r3, r5
 80078ee:	461d      	mov	r5, r3
 80078f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078f4:	2a30      	cmp	r2, #48	; 0x30
 80078f6:	d0fa      	beq.n	80078ee <_dtoa_r+0xb8e>
 80078f8:	e6d7      	b.n	80076aa <_dtoa_r+0x94a>
 80078fa:	9a01      	ldr	r2, [sp, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d184      	bne.n	800780a <_dtoa_r+0xaaa>
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	2331      	movs	r3, #49	; 0x31
 8007908:	7013      	strb	r3, [r2, #0]
 800790a:	e6ce      	b.n	80076aa <_dtoa_r+0x94a>
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <_dtoa_r+0xbd4>)
 800790e:	f7ff ba95 	b.w	8006e3c <_dtoa_r+0xdc>
 8007912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007914:	2b00      	cmp	r3, #0
 8007916:	f47f aa6e 	bne.w	8006df6 <_dtoa_r+0x96>
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <_dtoa_r+0xbd8>)
 800791c:	f7ff ba8e 	b.w	8006e3c <_dtoa_r+0xdc>
 8007920:	9b02      	ldr	r3, [sp, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	dcae      	bgt.n	8007884 <_dtoa_r+0xb24>
 8007926:	9b06      	ldr	r3, [sp, #24]
 8007928:	2b02      	cmp	r3, #2
 800792a:	f73f aea8 	bgt.w	800767e <_dtoa_r+0x91e>
 800792e:	e7a9      	b.n	8007884 <_dtoa_r+0xb24>
 8007930:	08009957 	.word	0x08009957
 8007934:	080098b4 	.word	0x080098b4
 8007938:	080098d8 	.word	0x080098d8

0800793c <_localeconv_r>:
 800793c:	4800      	ldr	r0, [pc, #0]	; (8007940 <_localeconv_r+0x4>)
 800793e:	4770      	bx	lr
 8007940:	20000218 	.word	0x20000218

08007944 <malloc>:
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <malloc+0xc>)
 8007946:	4601      	mov	r1, r0
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	f000 bc17 	b.w	800817c <_malloc_r>
 800794e:	bf00      	nop
 8007950:	200000c4 	.word	0x200000c4

08007954 <memcpy>:
 8007954:	440a      	add	r2, r1
 8007956:	4291      	cmp	r1, r2
 8007958:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800795c:	d100      	bne.n	8007960 <memcpy+0xc>
 800795e:	4770      	bx	lr
 8007960:	b510      	push	{r4, lr}
 8007962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800796a:	4291      	cmp	r1, r2
 800796c:	d1f9      	bne.n	8007962 <memcpy+0xe>
 800796e:	bd10      	pop	{r4, pc}

08007970 <_Balloc>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	b976      	cbnz	r6, 8007998 <_Balloc+0x28>
 800797a:	2010      	movs	r0, #16
 800797c:	f7ff ffe2 	bl	8007944 <malloc>
 8007980:	4602      	mov	r2, r0
 8007982:	6260      	str	r0, [r4, #36]	; 0x24
 8007984:	b920      	cbnz	r0, 8007990 <_Balloc+0x20>
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <_Balloc+0x78>)
 8007988:	4818      	ldr	r0, [pc, #96]	; (80079ec <_Balloc+0x7c>)
 800798a:	2166      	movs	r1, #102	; 0x66
 800798c:	f000 fdd6 	bl	800853c <__assert_func>
 8007990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007994:	6006      	str	r6, [r0, #0]
 8007996:	60c6      	str	r6, [r0, #12]
 8007998:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800799a:	68f3      	ldr	r3, [r6, #12]
 800799c:	b183      	cbz	r3, 80079c0 <_Balloc+0x50>
 800799e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079a6:	b9b8      	cbnz	r0, 80079d8 <_Balloc+0x68>
 80079a8:	2101      	movs	r1, #1
 80079aa:	fa01 f605 	lsl.w	r6, r1, r5
 80079ae:	1d72      	adds	r2, r6, #5
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 fb60 	bl	8008078 <_calloc_r>
 80079b8:	b160      	cbz	r0, 80079d4 <_Balloc+0x64>
 80079ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079be:	e00e      	b.n	80079de <_Balloc+0x6e>
 80079c0:	2221      	movs	r2, #33	; 0x21
 80079c2:	2104      	movs	r1, #4
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fb57 	bl	8008078 <_calloc_r>
 80079ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079cc:	60f0      	str	r0, [r6, #12]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e4      	bne.n	800799e <_Balloc+0x2e>
 80079d4:	2000      	movs	r0, #0
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	6802      	ldr	r2, [r0, #0]
 80079da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079de:	2300      	movs	r3, #0
 80079e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079e4:	e7f7      	b.n	80079d6 <_Balloc+0x66>
 80079e6:	bf00      	nop
 80079e8:	080098e5 	.word	0x080098e5
 80079ec:	08009968 	.word	0x08009968

080079f0 <_Bfree>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079f4:	4605      	mov	r5, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	b976      	cbnz	r6, 8007a18 <_Bfree+0x28>
 80079fa:	2010      	movs	r0, #16
 80079fc:	f7ff ffa2 	bl	8007944 <malloc>
 8007a00:	4602      	mov	r2, r0
 8007a02:	6268      	str	r0, [r5, #36]	; 0x24
 8007a04:	b920      	cbnz	r0, 8007a10 <_Bfree+0x20>
 8007a06:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <_Bfree+0x3c>)
 8007a08:	4809      	ldr	r0, [pc, #36]	; (8007a30 <_Bfree+0x40>)
 8007a0a:	218a      	movs	r1, #138	; 0x8a
 8007a0c:	f000 fd96 	bl	800853c <__assert_func>
 8007a10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a14:	6006      	str	r6, [r0, #0]
 8007a16:	60c6      	str	r6, [r0, #12]
 8007a18:	b13c      	cbz	r4, 8007a2a <_Bfree+0x3a>
 8007a1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a1c:	6862      	ldr	r2, [r4, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a24:	6021      	str	r1, [r4, #0]
 8007a26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	080098e5 	.word	0x080098e5
 8007a30:	08009968 	.word	0x08009968

08007a34 <__multadd>:
 8007a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a38:	690d      	ldr	r5, [r1, #16]
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	461e      	mov	r6, r3
 8007a40:	f101 0c14 	add.w	ip, r1, #20
 8007a44:	2000      	movs	r0, #0
 8007a46:	f8dc 3000 	ldr.w	r3, [ip]
 8007a4a:	b299      	uxth	r1, r3
 8007a4c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a50:	0c1e      	lsrs	r6, r3, #16
 8007a52:	0c0b      	lsrs	r3, r1, #16
 8007a54:	fb02 3306 	mla	r3, r2, r6, r3
 8007a58:	b289      	uxth	r1, r1
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a60:	4285      	cmp	r5, r0
 8007a62:	f84c 1b04 	str.w	r1, [ip], #4
 8007a66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a6a:	dcec      	bgt.n	8007a46 <__multadd+0x12>
 8007a6c:	b30e      	cbz	r6, 8007ab2 <__multadd+0x7e>
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	42ab      	cmp	r3, r5
 8007a72:	dc19      	bgt.n	8007aa8 <__multadd+0x74>
 8007a74:	6861      	ldr	r1, [r4, #4]
 8007a76:	4638      	mov	r0, r7
 8007a78:	3101      	adds	r1, #1
 8007a7a:	f7ff ff79 	bl	8007970 <_Balloc>
 8007a7e:	4680      	mov	r8, r0
 8007a80:	b928      	cbnz	r0, 8007a8e <__multadd+0x5a>
 8007a82:	4602      	mov	r2, r0
 8007a84:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <__multadd+0x84>)
 8007a86:	480d      	ldr	r0, [pc, #52]	; (8007abc <__multadd+0x88>)
 8007a88:	21b5      	movs	r1, #181	; 0xb5
 8007a8a:	f000 fd57 	bl	800853c <__assert_func>
 8007a8e:	6922      	ldr	r2, [r4, #16]
 8007a90:	3202      	adds	r2, #2
 8007a92:	f104 010c 	add.w	r1, r4, #12
 8007a96:	0092      	lsls	r2, r2, #2
 8007a98:	300c      	adds	r0, #12
 8007a9a:	f7ff ff5b 	bl	8007954 <memcpy>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7ff ffa5 	bl	80079f0 <_Bfree>
 8007aa6:	4644      	mov	r4, r8
 8007aa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007aac:	3501      	adds	r5, #1
 8007aae:	615e      	str	r6, [r3, #20]
 8007ab0:	6125      	str	r5, [r4, #16]
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab8:	08009957 	.word	0x08009957
 8007abc:	08009968 	.word	0x08009968

08007ac0 <__hi0bits>:
 8007ac0:	0c03      	lsrs	r3, r0, #16
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	b9d3      	cbnz	r3, 8007afc <__hi0bits+0x3c>
 8007ac6:	0400      	lsls	r0, r0, #16
 8007ac8:	2310      	movs	r3, #16
 8007aca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ace:	bf04      	itt	eq
 8007ad0:	0200      	lsleq	r0, r0, #8
 8007ad2:	3308      	addeq	r3, #8
 8007ad4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ad8:	bf04      	itt	eq
 8007ada:	0100      	lsleq	r0, r0, #4
 8007adc:	3304      	addeq	r3, #4
 8007ade:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ae2:	bf04      	itt	eq
 8007ae4:	0080      	lsleq	r0, r0, #2
 8007ae6:	3302      	addeq	r3, #2
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	db05      	blt.n	8007af8 <__hi0bits+0x38>
 8007aec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007af0:	f103 0301 	add.w	r3, r3, #1
 8007af4:	bf08      	it	eq
 8007af6:	2320      	moveq	r3, #32
 8007af8:	4618      	mov	r0, r3
 8007afa:	4770      	bx	lr
 8007afc:	2300      	movs	r3, #0
 8007afe:	e7e4      	b.n	8007aca <__hi0bits+0xa>

08007b00 <__lo0bits>:
 8007b00:	6803      	ldr	r3, [r0, #0]
 8007b02:	f013 0207 	ands.w	r2, r3, #7
 8007b06:	4601      	mov	r1, r0
 8007b08:	d00b      	beq.n	8007b22 <__lo0bits+0x22>
 8007b0a:	07da      	lsls	r2, r3, #31
 8007b0c:	d423      	bmi.n	8007b56 <__lo0bits+0x56>
 8007b0e:	0798      	lsls	r0, r3, #30
 8007b10:	bf49      	itett	mi
 8007b12:	085b      	lsrmi	r3, r3, #1
 8007b14:	089b      	lsrpl	r3, r3, #2
 8007b16:	2001      	movmi	r0, #1
 8007b18:	600b      	strmi	r3, [r1, #0]
 8007b1a:	bf5c      	itt	pl
 8007b1c:	600b      	strpl	r3, [r1, #0]
 8007b1e:	2002      	movpl	r0, #2
 8007b20:	4770      	bx	lr
 8007b22:	b298      	uxth	r0, r3
 8007b24:	b9a8      	cbnz	r0, 8007b52 <__lo0bits+0x52>
 8007b26:	0c1b      	lsrs	r3, r3, #16
 8007b28:	2010      	movs	r0, #16
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	b90a      	cbnz	r2, 8007b32 <__lo0bits+0x32>
 8007b2e:	3008      	adds	r0, #8
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	071a      	lsls	r2, r3, #28
 8007b34:	bf04      	itt	eq
 8007b36:	091b      	lsreq	r3, r3, #4
 8007b38:	3004      	addeq	r0, #4
 8007b3a:	079a      	lsls	r2, r3, #30
 8007b3c:	bf04      	itt	eq
 8007b3e:	089b      	lsreq	r3, r3, #2
 8007b40:	3002      	addeq	r0, #2
 8007b42:	07da      	lsls	r2, r3, #31
 8007b44:	d403      	bmi.n	8007b4e <__lo0bits+0x4e>
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	f100 0001 	add.w	r0, r0, #1
 8007b4c:	d005      	beq.n	8007b5a <__lo0bits+0x5a>
 8007b4e:	600b      	str	r3, [r1, #0]
 8007b50:	4770      	bx	lr
 8007b52:	4610      	mov	r0, r2
 8007b54:	e7e9      	b.n	8007b2a <__lo0bits+0x2a>
 8007b56:	2000      	movs	r0, #0
 8007b58:	4770      	bx	lr
 8007b5a:	2020      	movs	r0, #32
 8007b5c:	4770      	bx	lr
	...

08007b60 <__i2b>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	2101      	movs	r1, #1
 8007b66:	f7ff ff03 	bl	8007970 <_Balloc>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	b928      	cbnz	r0, 8007b7a <__i2b+0x1a>
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <__i2b+0x24>)
 8007b70:	4805      	ldr	r0, [pc, #20]	; (8007b88 <__i2b+0x28>)
 8007b72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b76:	f000 fce1 	bl	800853c <__assert_func>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	6144      	str	r4, [r0, #20]
 8007b7e:	6103      	str	r3, [r0, #16]
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	bf00      	nop
 8007b84:	08009957 	.word	0x08009957
 8007b88:	08009968 	.word	0x08009968

08007b8c <__multiply>:
 8007b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	4691      	mov	r9, r2
 8007b92:	690a      	ldr	r2, [r1, #16]
 8007b94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	bfb8      	it	lt
 8007b9c:	460b      	movlt	r3, r1
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	bfbc      	itt	lt
 8007ba2:	464c      	movlt	r4, r9
 8007ba4:	4699      	movlt	r9, r3
 8007ba6:	6927      	ldr	r7, [r4, #16]
 8007ba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007bac:	68a3      	ldr	r3, [r4, #8]
 8007bae:	6861      	ldr	r1, [r4, #4]
 8007bb0:	eb07 060a 	add.w	r6, r7, sl
 8007bb4:	42b3      	cmp	r3, r6
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	bfb8      	it	lt
 8007bba:	3101      	addlt	r1, #1
 8007bbc:	f7ff fed8 	bl	8007970 <_Balloc>
 8007bc0:	b930      	cbnz	r0, 8007bd0 <__multiply+0x44>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4b44      	ldr	r3, [pc, #272]	; (8007cd8 <__multiply+0x14c>)
 8007bc6:	4845      	ldr	r0, [pc, #276]	; (8007cdc <__multiply+0x150>)
 8007bc8:	f240 115d 	movw	r1, #349	; 0x15d
 8007bcc:	f000 fcb6 	bl	800853c <__assert_func>
 8007bd0:	f100 0514 	add.w	r5, r0, #20
 8007bd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bd8:	462b      	mov	r3, r5
 8007bda:	2200      	movs	r2, #0
 8007bdc:	4543      	cmp	r3, r8
 8007bde:	d321      	bcc.n	8007c24 <__multiply+0x98>
 8007be0:	f104 0314 	add.w	r3, r4, #20
 8007be4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007be8:	f109 0314 	add.w	r3, r9, #20
 8007bec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bf0:	9202      	str	r2, [sp, #8]
 8007bf2:	1b3a      	subs	r2, r7, r4
 8007bf4:	3a15      	subs	r2, #21
 8007bf6:	f022 0203 	bic.w	r2, r2, #3
 8007bfa:	3204      	adds	r2, #4
 8007bfc:	f104 0115 	add.w	r1, r4, #21
 8007c00:	428f      	cmp	r7, r1
 8007c02:	bf38      	it	cc
 8007c04:	2204      	movcc	r2, #4
 8007c06:	9201      	str	r2, [sp, #4]
 8007c08:	9a02      	ldr	r2, [sp, #8]
 8007c0a:	9303      	str	r3, [sp, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d80c      	bhi.n	8007c2a <__multiply+0x9e>
 8007c10:	2e00      	cmp	r6, #0
 8007c12:	dd03      	ble.n	8007c1c <__multiply+0x90>
 8007c14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d05a      	beq.n	8007cd2 <__multiply+0x146>
 8007c1c:	6106      	str	r6, [r0, #16]
 8007c1e:	b005      	add	sp, #20
 8007c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c24:	f843 2b04 	str.w	r2, [r3], #4
 8007c28:	e7d8      	b.n	8007bdc <__multiply+0x50>
 8007c2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c2e:	f1ba 0f00 	cmp.w	sl, #0
 8007c32:	d024      	beq.n	8007c7e <__multiply+0xf2>
 8007c34:	f104 0e14 	add.w	lr, r4, #20
 8007c38:	46a9      	mov	r9, r5
 8007c3a:	f04f 0c00 	mov.w	ip, #0
 8007c3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c42:	f8d9 1000 	ldr.w	r1, [r9]
 8007c46:	fa1f fb82 	uxth.w	fp, r2
 8007c4a:	b289      	uxth	r1, r1
 8007c4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c54:	f8d9 2000 	ldr.w	r2, [r9]
 8007c58:	4461      	add	r1, ip
 8007c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c66:	b289      	uxth	r1, r1
 8007c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c6c:	4577      	cmp	r7, lr
 8007c6e:	f849 1b04 	str.w	r1, [r9], #4
 8007c72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c76:	d8e2      	bhi.n	8007c3e <__multiply+0xb2>
 8007c78:	9a01      	ldr	r2, [sp, #4]
 8007c7a:	f845 c002 	str.w	ip, [r5, r2]
 8007c7e:	9a03      	ldr	r2, [sp, #12]
 8007c80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c84:	3304      	adds	r3, #4
 8007c86:	f1b9 0f00 	cmp.w	r9, #0
 8007c8a:	d020      	beq.n	8007cce <__multiply+0x142>
 8007c8c:	6829      	ldr	r1, [r5, #0]
 8007c8e:	f104 0c14 	add.w	ip, r4, #20
 8007c92:	46ae      	mov	lr, r5
 8007c94:	f04f 0a00 	mov.w	sl, #0
 8007c98:	f8bc b000 	ldrh.w	fp, [ip]
 8007c9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ca0:	fb09 220b 	mla	r2, r9, fp, r2
 8007ca4:	4492      	add	sl, r2
 8007ca6:	b289      	uxth	r1, r1
 8007ca8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007cac:	f84e 1b04 	str.w	r1, [lr], #4
 8007cb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007cb4:	f8be 1000 	ldrh.w	r1, [lr]
 8007cb8:	0c12      	lsrs	r2, r2, #16
 8007cba:	fb09 1102 	mla	r1, r9, r2, r1
 8007cbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007cc2:	4567      	cmp	r7, ip
 8007cc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cc8:	d8e6      	bhi.n	8007c98 <__multiply+0x10c>
 8007cca:	9a01      	ldr	r2, [sp, #4]
 8007ccc:	50a9      	str	r1, [r5, r2]
 8007cce:	3504      	adds	r5, #4
 8007cd0:	e79a      	b.n	8007c08 <__multiply+0x7c>
 8007cd2:	3e01      	subs	r6, #1
 8007cd4:	e79c      	b.n	8007c10 <__multiply+0x84>
 8007cd6:	bf00      	nop
 8007cd8:	08009957 	.word	0x08009957
 8007cdc:	08009968 	.word	0x08009968

08007ce0 <__pow5mult>:
 8007ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce4:	4615      	mov	r5, r2
 8007ce6:	f012 0203 	ands.w	r2, r2, #3
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	d007      	beq.n	8007d00 <__pow5mult+0x20>
 8007cf0:	4c25      	ldr	r4, [pc, #148]	; (8007d88 <__pow5mult+0xa8>)
 8007cf2:	3a01      	subs	r2, #1
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cfa:	f7ff fe9b 	bl	8007a34 <__multadd>
 8007cfe:	4607      	mov	r7, r0
 8007d00:	10ad      	asrs	r5, r5, #2
 8007d02:	d03d      	beq.n	8007d80 <__pow5mult+0xa0>
 8007d04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d06:	b97c      	cbnz	r4, 8007d28 <__pow5mult+0x48>
 8007d08:	2010      	movs	r0, #16
 8007d0a:	f7ff fe1b 	bl	8007944 <malloc>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	6270      	str	r0, [r6, #36]	; 0x24
 8007d12:	b928      	cbnz	r0, 8007d20 <__pow5mult+0x40>
 8007d14:	4b1d      	ldr	r3, [pc, #116]	; (8007d8c <__pow5mult+0xac>)
 8007d16:	481e      	ldr	r0, [pc, #120]	; (8007d90 <__pow5mult+0xb0>)
 8007d18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d1c:	f000 fc0e 	bl	800853c <__assert_func>
 8007d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d24:	6004      	str	r4, [r0, #0]
 8007d26:	60c4      	str	r4, [r0, #12]
 8007d28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d30:	b94c      	cbnz	r4, 8007d46 <__pow5mult+0x66>
 8007d32:	f240 2171 	movw	r1, #625	; 0x271
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7ff ff12 	bl	8007b60 <__i2b>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d42:	4604      	mov	r4, r0
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	f04f 0900 	mov.w	r9, #0
 8007d4a:	07eb      	lsls	r3, r5, #31
 8007d4c:	d50a      	bpl.n	8007d64 <__pow5mult+0x84>
 8007d4e:	4639      	mov	r1, r7
 8007d50:	4622      	mov	r2, r4
 8007d52:	4630      	mov	r0, r6
 8007d54:	f7ff ff1a 	bl	8007b8c <__multiply>
 8007d58:	4639      	mov	r1, r7
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fe47 	bl	80079f0 <_Bfree>
 8007d62:	4647      	mov	r7, r8
 8007d64:	106d      	asrs	r5, r5, #1
 8007d66:	d00b      	beq.n	8007d80 <__pow5mult+0xa0>
 8007d68:	6820      	ldr	r0, [r4, #0]
 8007d6a:	b938      	cbnz	r0, 8007d7c <__pow5mult+0x9c>
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff ff0b 	bl	8007b8c <__multiply>
 8007d76:	6020      	str	r0, [r4, #0]
 8007d78:	f8c0 9000 	str.w	r9, [r0]
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	e7e4      	b.n	8007d4a <__pow5mult+0x6a>
 8007d80:	4638      	mov	r0, r7
 8007d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d86:	bf00      	nop
 8007d88:	08009ab8 	.word	0x08009ab8
 8007d8c:	080098e5 	.word	0x080098e5
 8007d90:	08009968 	.word	0x08009968

08007d94 <__lshift>:
 8007d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d98:	460c      	mov	r4, r1
 8007d9a:	6849      	ldr	r1, [r1, #4]
 8007d9c:	6923      	ldr	r3, [r4, #16]
 8007d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	4607      	mov	r7, r0
 8007da6:	4691      	mov	r9, r2
 8007da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007dac:	f108 0601 	add.w	r6, r8, #1
 8007db0:	42b3      	cmp	r3, r6
 8007db2:	db0b      	blt.n	8007dcc <__lshift+0x38>
 8007db4:	4638      	mov	r0, r7
 8007db6:	f7ff fddb 	bl	8007970 <_Balloc>
 8007dba:	4605      	mov	r5, r0
 8007dbc:	b948      	cbnz	r0, 8007dd2 <__lshift+0x3e>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	4b2a      	ldr	r3, [pc, #168]	; (8007e6c <__lshift+0xd8>)
 8007dc2:	482b      	ldr	r0, [pc, #172]	; (8007e70 <__lshift+0xdc>)
 8007dc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007dc8:	f000 fbb8 	bl	800853c <__assert_func>
 8007dcc:	3101      	adds	r1, #1
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	e7ee      	b.n	8007db0 <__lshift+0x1c>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f100 0114 	add.w	r1, r0, #20
 8007dd8:	f100 0210 	add.w	r2, r0, #16
 8007ddc:	4618      	mov	r0, r3
 8007dde:	4553      	cmp	r3, sl
 8007de0:	db37      	blt.n	8007e52 <__lshift+0xbe>
 8007de2:	6920      	ldr	r0, [r4, #16]
 8007de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007de8:	f104 0314 	add.w	r3, r4, #20
 8007dec:	f019 091f 	ands.w	r9, r9, #31
 8007df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007df4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007df8:	d02f      	beq.n	8007e5a <__lshift+0xc6>
 8007dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8007dfe:	468a      	mov	sl, r1
 8007e00:	f04f 0c00 	mov.w	ip, #0
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	fa02 f209 	lsl.w	r2, r2, r9
 8007e0a:	ea42 020c 	orr.w	r2, r2, ip
 8007e0e:	f84a 2b04 	str.w	r2, [sl], #4
 8007e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e16:	4298      	cmp	r0, r3
 8007e18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e1c:	d8f2      	bhi.n	8007e04 <__lshift+0x70>
 8007e1e:	1b03      	subs	r3, r0, r4
 8007e20:	3b15      	subs	r3, #21
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	3304      	adds	r3, #4
 8007e28:	f104 0215 	add.w	r2, r4, #21
 8007e2c:	4290      	cmp	r0, r2
 8007e2e:	bf38      	it	cc
 8007e30:	2304      	movcc	r3, #4
 8007e32:	f841 c003 	str.w	ip, [r1, r3]
 8007e36:	f1bc 0f00 	cmp.w	ip, #0
 8007e3a:	d001      	beq.n	8007e40 <__lshift+0xac>
 8007e3c:	f108 0602 	add.w	r6, r8, #2
 8007e40:	3e01      	subs	r6, #1
 8007e42:	4638      	mov	r0, r7
 8007e44:	612e      	str	r6, [r5, #16]
 8007e46:	4621      	mov	r1, r4
 8007e48:	f7ff fdd2 	bl	80079f0 <_Bfree>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e56:	3301      	adds	r3, #1
 8007e58:	e7c1      	b.n	8007dde <__lshift+0x4a>
 8007e5a:	3904      	subs	r1, #4
 8007e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e60:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e64:	4298      	cmp	r0, r3
 8007e66:	d8f9      	bhi.n	8007e5c <__lshift+0xc8>
 8007e68:	e7ea      	b.n	8007e40 <__lshift+0xac>
 8007e6a:	bf00      	nop
 8007e6c:	08009957 	.word	0x08009957
 8007e70:	08009968 	.word	0x08009968

08007e74 <__mcmp>:
 8007e74:	b530      	push	{r4, r5, lr}
 8007e76:	6902      	ldr	r2, [r0, #16]
 8007e78:	690c      	ldr	r4, [r1, #16]
 8007e7a:	1b12      	subs	r2, r2, r4
 8007e7c:	d10e      	bne.n	8007e9c <__mcmp+0x28>
 8007e7e:	f100 0314 	add.w	r3, r0, #20
 8007e82:	3114      	adds	r1, #20
 8007e84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e94:	42a5      	cmp	r5, r4
 8007e96:	d003      	beq.n	8007ea0 <__mcmp+0x2c>
 8007e98:	d305      	bcc.n	8007ea6 <__mcmp+0x32>
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	bd30      	pop	{r4, r5, pc}
 8007ea0:	4283      	cmp	r3, r0
 8007ea2:	d3f3      	bcc.n	8007e8c <__mcmp+0x18>
 8007ea4:	e7fa      	b.n	8007e9c <__mcmp+0x28>
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eaa:	e7f7      	b.n	8007e9c <__mcmp+0x28>

08007eac <__mdiff>:
 8007eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	4690      	mov	r8, r2
 8007eba:	f7ff ffdb 	bl	8007e74 <__mcmp>
 8007ebe:	1e05      	subs	r5, r0, #0
 8007ec0:	d110      	bne.n	8007ee4 <__mdiff+0x38>
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff fd53 	bl	8007970 <_Balloc>
 8007eca:	b930      	cbnz	r0, 8007eda <__mdiff+0x2e>
 8007ecc:	4b3a      	ldr	r3, [pc, #232]	; (8007fb8 <__mdiff+0x10c>)
 8007ece:	4602      	mov	r2, r0
 8007ed0:	f240 2132 	movw	r1, #562	; 0x232
 8007ed4:	4839      	ldr	r0, [pc, #228]	; (8007fbc <__mdiff+0x110>)
 8007ed6:	f000 fb31 	bl	800853c <__assert_func>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee4:	bfa4      	itt	ge
 8007ee6:	4643      	movge	r3, r8
 8007ee8:	46a0      	movge	r8, r4
 8007eea:	4630      	mov	r0, r6
 8007eec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ef0:	bfa6      	itte	ge
 8007ef2:	461c      	movge	r4, r3
 8007ef4:	2500      	movge	r5, #0
 8007ef6:	2501      	movlt	r5, #1
 8007ef8:	f7ff fd3a 	bl	8007970 <_Balloc>
 8007efc:	b920      	cbnz	r0, 8007f08 <__mdiff+0x5c>
 8007efe:	4b2e      	ldr	r3, [pc, #184]	; (8007fb8 <__mdiff+0x10c>)
 8007f00:	4602      	mov	r2, r0
 8007f02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f06:	e7e5      	b.n	8007ed4 <__mdiff+0x28>
 8007f08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f0c:	6926      	ldr	r6, [r4, #16]
 8007f0e:	60c5      	str	r5, [r0, #12]
 8007f10:	f104 0914 	add.w	r9, r4, #20
 8007f14:	f108 0514 	add.w	r5, r8, #20
 8007f18:	f100 0e14 	add.w	lr, r0, #20
 8007f1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f24:	f108 0210 	add.w	r2, r8, #16
 8007f28:	46f2      	mov	sl, lr
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f34:	fa1f f883 	uxth.w	r8, r3
 8007f38:	fa11 f18b 	uxtah	r1, r1, fp
 8007f3c:	0c1b      	lsrs	r3, r3, #16
 8007f3e:	eba1 0808 	sub.w	r8, r1, r8
 8007f42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f4a:	fa1f f888 	uxth.w	r8, r8
 8007f4e:	1419      	asrs	r1, r3, #16
 8007f50:	454e      	cmp	r6, r9
 8007f52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f56:	f84a 3b04 	str.w	r3, [sl], #4
 8007f5a:	d8e7      	bhi.n	8007f2c <__mdiff+0x80>
 8007f5c:	1b33      	subs	r3, r6, r4
 8007f5e:	3b15      	subs	r3, #21
 8007f60:	f023 0303 	bic.w	r3, r3, #3
 8007f64:	3304      	adds	r3, #4
 8007f66:	3415      	adds	r4, #21
 8007f68:	42a6      	cmp	r6, r4
 8007f6a:	bf38      	it	cc
 8007f6c:	2304      	movcc	r3, #4
 8007f6e:	441d      	add	r5, r3
 8007f70:	4473      	add	r3, lr
 8007f72:	469e      	mov	lr, r3
 8007f74:	462e      	mov	r6, r5
 8007f76:	4566      	cmp	r6, ip
 8007f78:	d30e      	bcc.n	8007f98 <__mdiff+0xec>
 8007f7a:	f10c 0203 	add.w	r2, ip, #3
 8007f7e:	1b52      	subs	r2, r2, r5
 8007f80:	f022 0203 	bic.w	r2, r2, #3
 8007f84:	3d03      	subs	r5, #3
 8007f86:	45ac      	cmp	ip, r5
 8007f88:	bf38      	it	cc
 8007f8a:	2200      	movcc	r2, #0
 8007f8c:	441a      	add	r2, r3
 8007f8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f92:	b17b      	cbz	r3, 8007fb4 <__mdiff+0x108>
 8007f94:	6107      	str	r7, [r0, #16]
 8007f96:	e7a3      	b.n	8007ee0 <__mdiff+0x34>
 8007f98:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f9c:	fa11 f288 	uxtah	r2, r1, r8
 8007fa0:	1414      	asrs	r4, r2, #16
 8007fa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007fa6:	b292      	uxth	r2, r2
 8007fa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fac:	f84e 2b04 	str.w	r2, [lr], #4
 8007fb0:	1421      	asrs	r1, r4, #16
 8007fb2:	e7e0      	b.n	8007f76 <__mdiff+0xca>
 8007fb4:	3f01      	subs	r7, #1
 8007fb6:	e7ea      	b.n	8007f8e <__mdiff+0xe2>
 8007fb8:	08009957 	.word	0x08009957
 8007fbc:	08009968 	.word	0x08009968

08007fc0 <__d2b>:
 8007fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	4689      	mov	r9, r1
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	ec57 6b10 	vmov	r6, r7, d0
 8007fcc:	4690      	mov	r8, r2
 8007fce:	f7ff fccf 	bl	8007970 <_Balloc>
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	b930      	cbnz	r0, 8007fe4 <__d2b+0x24>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b25      	ldr	r3, [pc, #148]	; (8008070 <__d2b+0xb0>)
 8007fda:	4826      	ldr	r0, [pc, #152]	; (8008074 <__d2b+0xb4>)
 8007fdc:	f240 310a 	movw	r1, #778	; 0x30a
 8007fe0:	f000 faac 	bl	800853c <__assert_func>
 8007fe4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fec:	bb35      	cbnz	r5, 800803c <__d2b+0x7c>
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	d028      	beq.n	8008046 <__d2b+0x86>
 8007ff4:	4668      	mov	r0, sp
 8007ff6:	9600      	str	r6, [sp, #0]
 8007ff8:	f7ff fd82 	bl	8007b00 <__lo0bits>
 8007ffc:	9900      	ldr	r1, [sp, #0]
 8007ffe:	b300      	cbz	r0, 8008042 <__d2b+0x82>
 8008000:	9a01      	ldr	r2, [sp, #4]
 8008002:	f1c0 0320 	rsb	r3, r0, #32
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	430b      	orrs	r3, r1
 800800c:	40c2      	lsrs	r2, r0
 800800e:	6163      	str	r3, [r4, #20]
 8008010:	9201      	str	r2, [sp, #4]
 8008012:	9b01      	ldr	r3, [sp, #4]
 8008014:	61a3      	str	r3, [r4, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	bf14      	ite	ne
 800801a:	2202      	movne	r2, #2
 800801c:	2201      	moveq	r2, #1
 800801e:	6122      	str	r2, [r4, #16]
 8008020:	b1d5      	cbz	r5, 8008058 <__d2b+0x98>
 8008022:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008026:	4405      	add	r5, r0
 8008028:	f8c9 5000 	str.w	r5, [r9]
 800802c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008030:	f8c8 0000 	str.w	r0, [r8]
 8008034:	4620      	mov	r0, r4
 8008036:	b003      	add	sp, #12
 8008038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800803c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008040:	e7d5      	b.n	8007fee <__d2b+0x2e>
 8008042:	6161      	str	r1, [r4, #20]
 8008044:	e7e5      	b.n	8008012 <__d2b+0x52>
 8008046:	a801      	add	r0, sp, #4
 8008048:	f7ff fd5a 	bl	8007b00 <__lo0bits>
 800804c:	9b01      	ldr	r3, [sp, #4]
 800804e:	6163      	str	r3, [r4, #20]
 8008050:	2201      	movs	r2, #1
 8008052:	6122      	str	r2, [r4, #16]
 8008054:	3020      	adds	r0, #32
 8008056:	e7e3      	b.n	8008020 <__d2b+0x60>
 8008058:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800805c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008060:	f8c9 0000 	str.w	r0, [r9]
 8008064:	6918      	ldr	r0, [r3, #16]
 8008066:	f7ff fd2b 	bl	8007ac0 <__hi0bits>
 800806a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800806e:	e7df      	b.n	8008030 <__d2b+0x70>
 8008070:	08009957 	.word	0x08009957
 8008074:	08009968 	.word	0x08009968

08008078 <_calloc_r>:
 8008078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800807a:	fba1 2402 	umull	r2, r4, r1, r2
 800807e:	b94c      	cbnz	r4, 8008094 <_calloc_r+0x1c>
 8008080:	4611      	mov	r1, r2
 8008082:	9201      	str	r2, [sp, #4]
 8008084:	f000 f87a 	bl	800817c <_malloc_r>
 8008088:	9a01      	ldr	r2, [sp, #4]
 800808a:	4605      	mov	r5, r0
 800808c:	b930      	cbnz	r0, 800809c <_calloc_r+0x24>
 800808e:	4628      	mov	r0, r5
 8008090:	b003      	add	sp, #12
 8008092:	bd30      	pop	{r4, r5, pc}
 8008094:	220c      	movs	r2, #12
 8008096:	6002      	str	r2, [r0, #0]
 8008098:	2500      	movs	r5, #0
 800809a:	e7f8      	b.n	800808e <_calloc_r+0x16>
 800809c:	4621      	mov	r1, r4
 800809e:	f7fe f941 	bl	8006324 <memset>
 80080a2:	e7f4      	b.n	800808e <_calloc_r+0x16>

080080a4 <_free_r>:
 80080a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080a6:	2900      	cmp	r1, #0
 80080a8:	d044      	beq.n	8008134 <_free_r+0x90>
 80080aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ae:	9001      	str	r0, [sp, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f1a1 0404 	sub.w	r4, r1, #4
 80080b6:	bfb8      	it	lt
 80080b8:	18e4      	addlt	r4, r4, r3
 80080ba:	f000 fa9b 	bl	80085f4 <__malloc_lock>
 80080be:	4a1e      	ldr	r2, [pc, #120]	; (8008138 <_free_r+0x94>)
 80080c0:	9801      	ldr	r0, [sp, #4]
 80080c2:	6813      	ldr	r3, [r2, #0]
 80080c4:	b933      	cbnz	r3, 80080d4 <_free_r+0x30>
 80080c6:	6063      	str	r3, [r4, #4]
 80080c8:	6014      	str	r4, [r2, #0]
 80080ca:	b003      	add	sp, #12
 80080cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d0:	f000 ba96 	b.w	8008600 <__malloc_unlock>
 80080d4:	42a3      	cmp	r3, r4
 80080d6:	d908      	bls.n	80080ea <_free_r+0x46>
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	1961      	adds	r1, r4, r5
 80080dc:	428b      	cmp	r3, r1
 80080de:	bf01      	itttt	eq
 80080e0:	6819      	ldreq	r1, [r3, #0]
 80080e2:	685b      	ldreq	r3, [r3, #4]
 80080e4:	1949      	addeq	r1, r1, r5
 80080e6:	6021      	streq	r1, [r4, #0]
 80080e8:	e7ed      	b.n	80080c6 <_free_r+0x22>
 80080ea:	461a      	mov	r2, r3
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	b10b      	cbz	r3, 80080f4 <_free_r+0x50>
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	d9fa      	bls.n	80080ea <_free_r+0x46>
 80080f4:	6811      	ldr	r1, [r2, #0]
 80080f6:	1855      	adds	r5, r2, r1
 80080f8:	42a5      	cmp	r5, r4
 80080fa:	d10b      	bne.n	8008114 <_free_r+0x70>
 80080fc:	6824      	ldr	r4, [r4, #0]
 80080fe:	4421      	add	r1, r4
 8008100:	1854      	adds	r4, r2, r1
 8008102:	42a3      	cmp	r3, r4
 8008104:	6011      	str	r1, [r2, #0]
 8008106:	d1e0      	bne.n	80080ca <_free_r+0x26>
 8008108:	681c      	ldr	r4, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	6053      	str	r3, [r2, #4]
 800810e:	4421      	add	r1, r4
 8008110:	6011      	str	r1, [r2, #0]
 8008112:	e7da      	b.n	80080ca <_free_r+0x26>
 8008114:	d902      	bls.n	800811c <_free_r+0x78>
 8008116:	230c      	movs	r3, #12
 8008118:	6003      	str	r3, [r0, #0]
 800811a:	e7d6      	b.n	80080ca <_free_r+0x26>
 800811c:	6825      	ldr	r5, [r4, #0]
 800811e:	1961      	adds	r1, r4, r5
 8008120:	428b      	cmp	r3, r1
 8008122:	bf04      	itt	eq
 8008124:	6819      	ldreq	r1, [r3, #0]
 8008126:	685b      	ldreq	r3, [r3, #4]
 8008128:	6063      	str	r3, [r4, #4]
 800812a:	bf04      	itt	eq
 800812c:	1949      	addeq	r1, r1, r5
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	6054      	str	r4, [r2, #4]
 8008132:	e7ca      	b.n	80080ca <_free_r+0x26>
 8008134:	b003      	add	sp, #12
 8008136:	bd30      	pop	{r4, r5, pc}
 8008138:	200005a8 	.word	0x200005a8

0800813c <sbrk_aligned>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	4e0e      	ldr	r6, [pc, #56]	; (8008178 <sbrk_aligned+0x3c>)
 8008140:	460c      	mov	r4, r1
 8008142:	6831      	ldr	r1, [r6, #0]
 8008144:	4605      	mov	r5, r0
 8008146:	b911      	cbnz	r1, 800814e <sbrk_aligned+0x12>
 8008148:	f000 f9e8 	bl	800851c <_sbrk_r>
 800814c:	6030      	str	r0, [r6, #0]
 800814e:	4621      	mov	r1, r4
 8008150:	4628      	mov	r0, r5
 8008152:	f000 f9e3 	bl	800851c <_sbrk_r>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d00a      	beq.n	8008170 <sbrk_aligned+0x34>
 800815a:	1cc4      	adds	r4, r0, #3
 800815c:	f024 0403 	bic.w	r4, r4, #3
 8008160:	42a0      	cmp	r0, r4
 8008162:	d007      	beq.n	8008174 <sbrk_aligned+0x38>
 8008164:	1a21      	subs	r1, r4, r0
 8008166:	4628      	mov	r0, r5
 8008168:	f000 f9d8 	bl	800851c <_sbrk_r>
 800816c:	3001      	adds	r0, #1
 800816e:	d101      	bne.n	8008174 <sbrk_aligned+0x38>
 8008170:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008174:	4620      	mov	r0, r4
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	200005ac 	.word	0x200005ac

0800817c <_malloc_r>:
 800817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008180:	1ccd      	adds	r5, r1, #3
 8008182:	f025 0503 	bic.w	r5, r5, #3
 8008186:	3508      	adds	r5, #8
 8008188:	2d0c      	cmp	r5, #12
 800818a:	bf38      	it	cc
 800818c:	250c      	movcc	r5, #12
 800818e:	2d00      	cmp	r5, #0
 8008190:	4607      	mov	r7, r0
 8008192:	db01      	blt.n	8008198 <_malloc_r+0x1c>
 8008194:	42a9      	cmp	r1, r5
 8008196:	d905      	bls.n	80081a4 <_malloc_r+0x28>
 8008198:	230c      	movs	r3, #12
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	2600      	movs	r6, #0
 800819e:	4630      	mov	r0, r6
 80081a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a4:	4e2e      	ldr	r6, [pc, #184]	; (8008260 <_malloc_r+0xe4>)
 80081a6:	f000 fa25 	bl	80085f4 <__malloc_lock>
 80081aa:	6833      	ldr	r3, [r6, #0]
 80081ac:	461c      	mov	r4, r3
 80081ae:	bb34      	cbnz	r4, 80081fe <_malloc_r+0x82>
 80081b0:	4629      	mov	r1, r5
 80081b2:	4638      	mov	r0, r7
 80081b4:	f7ff ffc2 	bl	800813c <sbrk_aligned>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	4604      	mov	r4, r0
 80081bc:	d14d      	bne.n	800825a <_malloc_r+0xde>
 80081be:	6834      	ldr	r4, [r6, #0]
 80081c0:	4626      	mov	r6, r4
 80081c2:	2e00      	cmp	r6, #0
 80081c4:	d140      	bne.n	8008248 <_malloc_r+0xcc>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	4631      	mov	r1, r6
 80081ca:	4638      	mov	r0, r7
 80081cc:	eb04 0803 	add.w	r8, r4, r3
 80081d0:	f000 f9a4 	bl	800851c <_sbrk_r>
 80081d4:	4580      	cmp	r8, r0
 80081d6:	d13a      	bne.n	800824e <_malloc_r+0xd2>
 80081d8:	6821      	ldr	r1, [r4, #0]
 80081da:	3503      	adds	r5, #3
 80081dc:	1a6d      	subs	r5, r5, r1
 80081de:	f025 0503 	bic.w	r5, r5, #3
 80081e2:	3508      	adds	r5, #8
 80081e4:	2d0c      	cmp	r5, #12
 80081e6:	bf38      	it	cc
 80081e8:	250c      	movcc	r5, #12
 80081ea:	4629      	mov	r1, r5
 80081ec:	4638      	mov	r0, r7
 80081ee:	f7ff ffa5 	bl	800813c <sbrk_aligned>
 80081f2:	3001      	adds	r0, #1
 80081f4:	d02b      	beq.n	800824e <_malloc_r+0xd2>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	442b      	add	r3, r5
 80081fa:	6023      	str	r3, [r4, #0]
 80081fc:	e00e      	b.n	800821c <_malloc_r+0xa0>
 80081fe:	6822      	ldr	r2, [r4, #0]
 8008200:	1b52      	subs	r2, r2, r5
 8008202:	d41e      	bmi.n	8008242 <_malloc_r+0xc6>
 8008204:	2a0b      	cmp	r2, #11
 8008206:	d916      	bls.n	8008236 <_malloc_r+0xba>
 8008208:	1961      	adds	r1, r4, r5
 800820a:	42a3      	cmp	r3, r4
 800820c:	6025      	str	r5, [r4, #0]
 800820e:	bf18      	it	ne
 8008210:	6059      	strne	r1, [r3, #4]
 8008212:	6863      	ldr	r3, [r4, #4]
 8008214:	bf08      	it	eq
 8008216:	6031      	streq	r1, [r6, #0]
 8008218:	5162      	str	r2, [r4, r5]
 800821a:	604b      	str	r3, [r1, #4]
 800821c:	4638      	mov	r0, r7
 800821e:	f104 060b 	add.w	r6, r4, #11
 8008222:	f000 f9ed 	bl	8008600 <__malloc_unlock>
 8008226:	f026 0607 	bic.w	r6, r6, #7
 800822a:	1d23      	adds	r3, r4, #4
 800822c:	1af2      	subs	r2, r6, r3
 800822e:	d0b6      	beq.n	800819e <_malloc_r+0x22>
 8008230:	1b9b      	subs	r3, r3, r6
 8008232:	50a3      	str	r3, [r4, r2]
 8008234:	e7b3      	b.n	800819e <_malloc_r+0x22>
 8008236:	6862      	ldr	r2, [r4, #4]
 8008238:	42a3      	cmp	r3, r4
 800823a:	bf0c      	ite	eq
 800823c:	6032      	streq	r2, [r6, #0]
 800823e:	605a      	strne	r2, [r3, #4]
 8008240:	e7ec      	b.n	800821c <_malloc_r+0xa0>
 8008242:	4623      	mov	r3, r4
 8008244:	6864      	ldr	r4, [r4, #4]
 8008246:	e7b2      	b.n	80081ae <_malloc_r+0x32>
 8008248:	4634      	mov	r4, r6
 800824a:	6876      	ldr	r6, [r6, #4]
 800824c:	e7b9      	b.n	80081c2 <_malloc_r+0x46>
 800824e:	230c      	movs	r3, #12
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4638      	mov	r0, r7
 8008254:	f000 f9d4 	bl	8008600 <__malloc_unlock>
 8008258:	e7a1      	b.n	800819e <_malloc_r+0x22>
 800825a:	6025      	str	r5, [r4, #0]
 800825c:	e7de      	b.n	800821c <_malloc_r+0xa0>
 800825e:	bf00      	nop
 8008260:	200005a8 	.word	0x200005a8

08008264 <__ssputs_r>:
 8008264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	688e      	ldr	r6, [r1, #8]
 800826a:	429e      	cmp	r6, r3
 800826c:	4682      	mov	sl, r0
 800826e:	460c      	mov	r4, r1
 8008270:	4690      	mov	r8, r2
 8008272:	461f      	mov	r7, r3
 8008274:	d838      	bhi.n	80082e8 <__ssputs_r+0x84>
 8008276:	898a      	ldrh	r2, [r1, #12]
 8008278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800827c:	d032      	beq.n	80082e4 <__ssputs_r+0x80>
 800827e:	6825      	ldr	r5, [r4, #0]
 8008280:	6909      	ldr	r1, [r1, #16]
 8008282:	eba5 0901 	sub.w	r9, r5, r1
 8008286:	6965      	ldr	r5, [r4, #20]
 8008288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800828c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008290:	3301      	adds	r3, #1
 8008292:	444b      	add	r3, r9
 8008294:	106d      	asrs	r5, r5, #1
 8008296:	429d      	cmp	r5, r3
 8008298:	bf38      	it	cc
 800829a:	461d      	movcc	r5, r3
 800829c:	0553      	lsls	r3, r2, #21
 800829e:	d531      	bpl.n	8008304 <__ssputs_r+0xa0>
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7ff ff6b 	bl	800817c <_malloc_r>
 80082a6:	4606      	mov	r6, r0
 80082a8:	b950      	cbnz	r0, 80082c0 <__ssputs_r+0x5c>
 80082aa:	230c      	movs	r3, #12
 80082ac:	f8ca 3000 	str.w	r3, [sl]
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	6921      	ldr	r1, [r4, #16]
 80082c2:	464a      	mov	r2, r9
 80082c4:	f7ff fb46 	bl	8007954 <memcpy>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	6126      	str	r6, [r4, #16]
 80082d6:	6165      	str	r5, [r4, #20]
 80082d8:	444e      	add	r6, r9
 80082da:	eba5 0509 	sub.w	r5, r5, r9
 80082de:	6026      	str	r6, [r4, #0]
 80082e0:	60a5      	str	r5, [r4, #8]
 80082e2:	463e      	mov	r6, r7
 80082e4:	42be      	cmp	r6, r7
 80082e6:	d900      	bls.n	80082ea <__ssputs_r+0x86>
 80082e8:	463e      	mov	r6, r7
 80082ea:	6820      	ldr	r0, [r4, #0]
 80082ec:	4632      	mov	r2, r6
 80082ee:	4641      	mov	r1, r8
 80082f0:	f000 f966 	bl	80085c0 <memmove>
 80082f4:	68a3      	ldr	r3, [r4, #8]
 80082f6:	1b9b      	subs	r3, r3, r6
 80082f8:	60a3      	str	r3, [r4, #8]
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	4433      	add	r3, r6
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	2000      	movs	r0, #0
 8008302:	e7db      	b.n	80082bc <__ssputs_r+0x58>
 8008304:	462a      	mov	r2, r5
 8008306:	f000 f981 	bl	800860c <_realloc_r>
 800830a:	4606      	mov	r6, r0
 800830c:	2800      	cmp	r0, #0
 800830e:	d1e1      	bne.n	80082d4 <__ssputs_r+0x70>
 8008310:	6921      	ldr	r1, [r4, #16]
 8008312:	4650      	mov	r0, sl
 8008314:	f7ff fec6 	bl	80080a4 <_free_r>
 8008318:	e7c7      	b.n	80082aa <__ssputs_r+0x46>
	...

0800831c <_svfiprintf_r>:
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	4698      	mov	r8, r3
 8008322:	898b      	ldrh	r3, [r1, #12]
 8008324:	061b      	lsls	r3, r3, #24
 8008326:	b09d      	sub	sp, #116	; 0x74
 8008328:	4607      	mov	r7, r0
 800832a:	460d      	mov	r5, r1
 800832c:	4614      	mov	r4, r2
 800832e:	d50e      	bpl.n	800834e <_svfiprintf_r+0x32>
 8008330:	690b      	ldr	r3, [r1, #16]
 8008332:	b963      	cbnz	r3, 800834e <_svfiprintf_r+0x32>
 8008334:	2140      	movs	r1, #64	; 0x40
 8008336:	f7ff ff21 	bl	800817c <_malloc_r>
 800833a:	6028      	str	r0, [r5, #0]
 800833c:	6128      	str	r0, [r5, #16]
 800833e:	b920      	cbnz	r0, 800834a <_svfiprintf_r+0x2e>
 8008340:	230c      	movs	r3, #12
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008348:	e0d1      	b.n	80084ee <_svfiprintf_r+0x1d2>
 800834a:	2340      	movs	r3, #64	; 0x40
 800834c:	616b      	str	r3, [r5, #20]
 800834e:	2300      	movs	r3, #0
 8008350:	9309      	str	r3, [sp, #36]	; 0x24
 8008352:	2320      	movs	r3, #32
 8008354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008358:	f8cd 800c 	str.w	r8, [sp, #12]
 800835c:	2330      	movs	r3, #48	; 0x30
 800835e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008508 <_svfiprintf_r+0x1ec>
 8008362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008366:	f04f 0901 	mov.w	r9, #1
 800836a:	4623      	mov	r3, r4
 800836c:	469a      	mov	sl, r3
 800836e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008372:	b10a      	cbz	r2, 8008378 <_svfiprintf_r+0x5c>
 8008374:	2a25      	cmp	r2, #37	; 0x25
 8008376:	d1f9      	bne.n	800836c <_svfiprintf_r+0x50>
 8008378:	ebba 0b04 	subs.w	fp, sl, r4
 800837c:	d00b      	beq.n	8008396 <_svfiprintf_r+0x7a>
 800837e:	465b      	mov	r3, fp
 8008380:	4622      	mov	r2, r4
 8008382:	4629      	mov	r1, r5
 8008384:	4638      	mov	r0, r7
 8008386:	f7ff ff6d 	bl	8008264 <__ssputs_r>
 800838a:	3001      	adds	r0, #1
 800838c:	f000 80aa 	beq.w	80084e4 <_svfiprintf_r+0x1c8>
 8008390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008392:	445a      	add	r2, fp
 8008394:	9209      	str	r2, [sp, #36]	; 0x24
 8008396:	f89a 3000 	ldrb.w	r3, [sl]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80a2 	beq.w	80084e4 <_svfiprintf_r+0x1c8>
 80083a0:	2300      	movs	r3, #0
 80083a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083aa:	f10a 0a01 	add.w	sl, sl, #1
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	9307      	str	r3, [sp, #28]
 80083b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083b6:	931a      	str	r3, [sp, #104]	; 0x68
 80083b8:	4654      	mov	r4, sl
 80083ba:	2205      	movs	r2, #5
 80083bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c0:	4851      	ldr	r0, [pc, #324]	; (8008508 <_svfiprintf_r+0x1ec>)
 80083c2:	f7f7 ff15 	bl	80001f0 <memchr>
 80083c6:	9a04      	ldr	r2, [sp, #16]
 80083c8:	b9d8      	cbnz	r0, 8008402 <_svfiprintf_r+0xe6>
 80083ca:	06d0      	lsls	r0, r2, #27
 80083cc:	bf44      	itt	mi
 80083ce:	2320      	movmi	r3, #32
 80083d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d4:	0711      	lsls	r1, r2, #28
 80083d6:	bf44      	itt	mi
 80083d8:	232b      	movmi	r3, #43	; 0x2b
 80083da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083de:	f89a 3000 	ldrb.w	r3, [sl]
 80083e2:	2b2a      	cmp	r3, #42	; 0x2a
 80083e4:	d015      	beq.n	8008412 <_svfiprintf_r+0xf6>
 80083e6:	9a07      	ldr	r2, [sp, #28]
 80083e8:	4654      	mov	r4, sl
 80083ea:	2000      	movs	r0, #0
 80083ec:	f04f 0c0a 	mov.w	ip, #10
 80083f0:	4621      	mov	r1, r4
 80083f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f6:	3b30      	subs	r3, #48	; 0x30
 80083f8:	2b09      	cmp	r3, #9
 80083fa:	d94e      	bls.n	800849a <_svfiprintf_r+0x17e>
 80083fc:	b1b0      	cbz	r0, 800842c <_svfiprintf_r+0x110>
 80083fe:	9207      	str	r2, [sp, #28]
 8008400:	e014      	b.n	800842c <_svfiprintf_r+0x110>
 8008402:	eba0 0308 	sub.w	r3, r0, r8
 8008406:	fa09 f303 	lsl.w	r3, r9, r3
 800840a:	4313      	orrs	r3, r2
 800840c:	9304      	str	r3, [sp, #16]
 800840e:	46a2      	mov	sl, r4
 8008410:	e7d2      	b.n	80083b8 <_svfiprintf_r+0x9c>
 8008412:	9b03      	ldr	r3, [sp, #12]
 8008414:	1d19      	adds	r1, r3, #4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	9103      	str	r1, [sp, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	bfbb      	ittet	lt
 800841e:	425b      	neglt	r3, r3
 8008420:	f042 0202 	orrlt.w	r2, r2, #2
 8008424:	9307      	strge	r3, [sp, #28]
 8008426:	9307      	strlt	r3, [sp, #28]
 8008428:	bfb8      	it	lt
 800842a:	9204      	strlt	r2, [sp, #16]
 800842c:	7823      	ldrb	r3, [r4, #0]
 800842e:	2b2e      	cmp	r3, #46	; 0x2e
 8008430:	d10c      	bne.n	800844c <_svfiprintf_r+0x130>
 8008432:	7863      	ldrb	r3, [r4, #1]
 8008434:	2b2a      	cmp	r3, #42	; 0x2a
 8008436:	d135      	bne.n	80084a4 <_svfiprintf_r+0x188>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	1d1a      	adds	r2, r3, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	9203      	str	r2, [sp, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	bfb8      	it	lt
 8008444:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008448:	3402      	adds	r4, #2
 800844a:	9305      	str	r3, [sp, #20]
 800844c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008518 <_svfiprintf_r+0x1fc>
 8008450:	7821      	ldrb	r1, [r4, #0]
 8008452:	2203      	movs	r2, #3
 8008454:	4650      	mov	r0, sl
 8008456:	f7f7 fecb 	bl	80001f0 <memchr>
 800845a:	b140      	cbz	r0, 800846e <_svfiprintf_r+0x152>
 800845c:	2340      	movs	r3, #64	; 0x40
 800845e:	eba0 000a 	sub.w	r0, r0, sl
 8008462:	fa03 f000 	lsl.w	r0, r3, r0
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	4303      	orrs	r3, r0
 800846a:	3401      	adds	r4, #1
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008472:	4826      	ldr	r0, [pc, #152]	; (800850c <_svfiprintf_r+0x1f0>)
 8008474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008478:	2206      	movs	r2, #6
 800847a:	f7f7 feb9 	bl	80001f0 <memchr>
 800847e:	2800      	cmp	r0, #0
 8008480:	d038      	beq.n	80084f4 <_svfiprintf_r+0x1d8>
 8008482:	4b23      	ldr	r3, [pc, #140]	; (8008510 <_svfiprintf_r+0x1f4>)
 8008484:	bb1b      	cbnz	r3, 80084ce <_svfiprintf_r+0x1b2>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	3307      	adds	r3, #7
 800848a:	f023 0307 	bic.w	r3, r3, #7
 800848e:	3308      	adds	r3, #8
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008494:	4433      	add	r3, r6
 8008496:	9309      	str	r3, [sp, #36]	; 0x24
 8008498:	e767      	b.n	800836a <_svfiprintf_r+0x4e>
 800849a:	fb0c 3202 	mla	r2, ip, r2, r3
 800849e:	460c      	mov	r4, r1
 80084a0:	2001      	movs	r0, #1
 80084a2:	e7a5      	b.n	80083f0 <_svfiprintf_r+0xd4>
 80084a4:	2300      	movs	r3, #0
 80084a6:	3401      	adds	r4, #1
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	4619      	mov	r1, r3
 80084ac:	f04f 0c0a 	mov.w	ip, #10
 80084b0:	4620      	mov	r0, r4
 80084b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b6:	3a30      	subs	r2, #48	; 0x30
 80084b8:	2a09      	cmp	r2, #9
 80084ba:	d903      	bls.n	80084c4 <_svfiprintf_r+0x1a8>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0c5      	beq.n	800844c <_svfiprintf_r+0x130>
 80084c0:	9105      	str	r1, [sp, #20]
 80084c2:	e7c3      	b.n	800844c <_svfiprintf_r+0x130>
 80084c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80084c8:	4604      	mov	r4, r0
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7f0      	b.n	80084b0 <_svfiprintf_r+0x194>
 80084ce:	ab03      	add	r3, sp, #12
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	462a      	mov	r2, r5
 80084d4:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <_svfiprintf_r+0x1f8>)
 80084d6:	a904      	add	r1, sp, #16
 80084d8:	4638      	mov	r0, r7
 80084da:	f7fd ffcb 	bl	8006474 <_printf_float>
 80084de:	1c42      	adds	r2, r0, #1
 80084e0:	4606      	mov	r6, r0
 80084e2:	d1d6      	bne.n	8008492 <_svfiprintf_r+0x176>
 80084e4:	89ab      	ldrh	r3, [r5, #12]
 80084e6:	065b      	lsls	r3, r3, #25
 80084e8:	f53f af2c 	bmi.w	8008344 <_svfiprintf_r+0x28>
 80084ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ee:	b01d      	add	sp, #116	; 0x74
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	ab03      	add	r3, sp, #12
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	462a      	mov	r2, r5
 80084fa:	4b06      	ldr	r3, [pc, #24]	; (8008514 <_svfiprintf_r+0x1f8>)
 80084fc:	a904      	add	r1, sp, #16
 80084fe:	4638      	mov	r0, r7
 8008500:	f7fe fa5c 	bl	80069bc <_printf_i>
 8008504:	e7eb      	b.n	80084de <_svfiprintf_r+0x1c2>
 8008506:	bf00      	nop
 8008508:	08009ac4 	.word	0x08009ac4
 800850c:	08009ace 	.word	0x08009ace
 8008510:	08006475 	.word	0x08006475
 8008514:	08008265 	.word	0x08008265
 8008518:	08009aca 	.word	0x08009aca

0800851c <_sbrk_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4d06      	ldr	r5, [pc, #24]	; (8008538 <_sbrk_r+0x1c>)
 8008520:	2300      	movs	r3, #0
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	602b      	str	r3, [r5, #0]
 8008528:	f7fa fd72 	bl	8003010 <_sbrk>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_sbrk_r+0x1a>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_sbrk_r+0x1a>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	200005b0 	.word	0x200005b0

0800853c <__assert_func>:
 800853c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800853e:	4614      	mov	r4, r2
 8008540:	461a      	mov	r2, r3
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <__assert_func+0x2c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4605      	mov	r5, r0
 8008548:	68d8      	ldr	r0, [r3, #12]
 800854a:	b14c      	cbz	r4, 8008560 <__assert_func+0x24>
 800854c:	4b07      	ldr	r3, [pc, #28]	; (800856c <__assert_func+0x30>)
 800854e:	9100      	str	r1, [sp, #0]
 8008550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008554:	4906      	ldr	r1, [pc, #24]	; (8008570 <__assert_func+0x34>)
 8008556:	462b      	mov	r3, r5
 8008558:	f000 f80e 	bl	8008578 <fiprintf>
 800855c:	f000 faac 	bl	8008ab8 <abort>
 8008560:	4b04      	ldr	r3, [pc, #16]	; (8008574 <__assert_func+0x38>)
 8008562:	461c      	mov	r4, r3
 8008564:	e7f3      	b.n	800854e <__assert_func+0x12>
 8008566:	bf00      	nop
 8008568:	200000c4 	.word	0x200000c4
 800856c:	08009ad5 	.word	0x08009ad5
 8008570:	08009ae2 	.word	0x08009ae2
 8008574:	08009b10 	.word	0x08009b10

08008578 <fiprintf>:
 8008578:	b40e      	push	{r1, r2, r3}
 800857a:	b503      	push	{r0, r1, lr}
 800857c:	4601      	mov	r1, r0
 800857e:	ab03      	add	r3, sp, #12
 8008580:	4805      	ldr	r0, [pc, #20]	; (8008598 <fiprintf+0x20>)
 8008582:	f853 2b04 	ldr.w	r2, [r3], #4
 8008586:	6800      	ldr	r0, [r0, #0]
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f000 f897 	bl	80086bc <_vfiprintf_r>
 800858e:	b002      	add	sp, #8
 8008590:	f85d eb04 	ldr.w	lr, [sp], #4
 8008594:	b003      	add	sp, #12
 8008596:	4770      	bx	lr
 8008598:	200000c4 	.word	0x200000c4

0800859c <__ascii_mbtowc>:
 800859c:	b082      	sub	sp, #8
 800859e:	b901      	cbnz	r1, 80085a2 <__ascii_mbtowc+0x6>
 80085a0:	a901      	add	r1, sp, #4
 80085a2:	b142      	cbz	r2, 80085b6 <__ascii_mbtowc+0x1a>
 80085a4:	b14b      	cbz	r3, 80085ba <__ascii_mbtowc+0x1e>
 80085a6:	7813      	ldrb	r3, [r2, #0]
 80085a8:	600b      	str	r3, [r1, #0]
 80085aa:	7812      	ldrb	r2, [r2, #0]
 80085ac:	1e10      	subs	r0, r2, #0
 80085ae:	bf18      	it	ne
 80085b0:	2001      	movne	r0, #1
 80085b2:	b002      	add	sp, #8
 80085b4:	4770      	bx	lr
 80085b6:	4610      	mov	r0, r2
 80085b8:	e7fb      	b.n	80085b2 <__ascii_mbtowc+0x16>
 80085ba:	f06f 0001 	mvn.w	r0, #1
 80085be:	e7f8      	b.n	80085b2 <__ascii_mbtowc+0x16>

080085c0 <memmove>:
 80085c0:	4288      	cmp	r0, r1
 80085c2:	b510      	push	{r4, lr}
 80085c4:	eb01 0402 	add.w	r4, r1, r2
 80085c8:	d902      	bls.n	80085d0 <memmove+0x10>
 80085ca:	4284      	cmp	r4, r0
 80085cc:	4623      	mov	r3, r4
 80085ce:	d807      	bhi.n	80085e0 <memmove+0x20>
 80085d0:	1e43      	subs	r3, r0, #1
 80085d2:	42a1      	cmp	r1, r4
 80085d4:	d008      	beq.n	80085e8 <memmove+0x28>
 80085d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085de:	e7f8      	b.n	80085d2 <memmove+0x12>
 80085e0:	4402      	add	r2, r0
 80085e2:	4601      	mov	r1, r0
 80085e4:	428a      	cmp	r2, r1
 80085e6:	d100      	bne.n	80085ea <memmove+0x2a>
 80085e8:	bd10      	pop	{r4, pc}
 80085ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085f2:	e7f7      	b.n	80085e4 <memmove+0x24>

080085f4 <__malloc_lock>:
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <__malloc_lock+0x8>)
 80085f6:	f000 bc1f 	b.w	8008e38 <__retarget_lock_acquire_recursive>
 80085fa:	bf00      	nop
 80085fc:	200005b4 	.word	0x200005b4

08008600 <__malloc_unlock>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__malloc_unlock+0x8>)
 8008602:	f000 bc1a 	b.w	8008e3a <__retarget_lock_release_recursive>
 8008606:	bf00      	nop
 8008608:	200005b4 	.word	0x200005b4

0800860c <_realloc_r>:
 800860c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008610:	4680      	mov	r8, r0
 8008612:	4614      	mov	r4, r2
 8008614:	460e      	mov	r6, r1
 8008616:	b921      	cbnz	r1, 8008622 <_realloc_r+0x16>
 8008618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800861c:	4611      	mov	r1, r2
 800861e:	f7ff bdad 	b.w	800817c <_malloc_r>
 8008622:	b92a      	cbnz	r2, 8008630 <_realloc_r+0x24>
 8008624:	f7ff fd3e 	bl	80080a4 <_free_r>
 8008628:	4625      	mov	r5, r4
 800862a:	4628      	mov	r0, r5
 800862c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008630:	f000 fc6a 	bl	8008f08 <_malloc_usable_size_r>
 8008634:	4284      	cmp	r4, r0
 8008636:	4607      	mov	r7, r0
 8008638:	d802      	bhi.n	8008640 <_realloc_r+0x34>
 800863a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800863e:	d812      	bhi.n	8008666 <_realloc_r+0x5a>
 8008640:	4621      	mov	r1, r4
 8008642:	4640      	mov	r0, r8
 8008644:	f7ff fd9a 	bl	800817c <_malloc_r>
 8008648:	4605      	mov	r5, r0
 800864a:	2800      	cmp	r0, #0
 800864c:	d0ed      	beq.n	800862a <_realloc_r+0x1e>
 800864e:	42bc      	cmp	r4, r7
 8008650:	4622      	mov	r2, r4
 8008652:	4631      	mov	r1, r6
 8008654:	bf28      	it	cs
 8008656:	463a      	movcs	r2, r7
 8008658:	f7ff f97c 	bl	8007954 <memcpy>
 800865c:	4631      	mov	r1, r6
 800865e:	4640      	mov	r0, r8
 8008660:	f7ff fd20 	bl	80080a4 <_free_r>
 8008664:	e7e1      	b.n	800862a <_realloc_r+0x1e>
 8008666:	4635      	mov	r5, r6
 8008668:	e7df      	b.n	800862a <_realloc_r+0x1e>

0800866a <__sfputc_r>:
 800866a:	6893      	ldr	r3, [r2, #8]
 800866c:	3b01      	subs	r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	b410      	push	{r4}
 8008672:	6093      	str	r3, [r2, #8]
 8008674:	da08      	bge.n	8008688 <__sfputc_r+0x1e>
 8008676:	6994      	ldr	r4, [r2, #24]
 8008678:	42a3      	cmp	r3, r4
 800867a:	db01      	blt.n	8008680 <__sfputc_r+0x16>
 800867c:	290a      	cmp	r1, #10
 800867e:	d103      	bne.n	8008688 <__sfputc_r+0x1e>
 8008680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008684:	f000 b94a 	b.w	800891c <__swbuf_r>
 8008688:	6813      	ldr	r3, [r2, #0]
 800868a:	1c58      	adds	r0, r3, #1
 800868c:	6010      	str	r0, [r2, #0]
 800868e:	7019      	strb	r1, [r3, #0]
 8008690:	4608      	mov	r0, r1
 8008692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008696:	4770      	bx	lr

08008698 <__sfputs_r>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	4614      	mov	r4, r2
 80086a0:	18d5      	adds	r5, r2, r3
 80086a2:	42ac      	cmp	r4, r5
 80086a4:	d101      	bne.n	80086aa <__sfputs_r+0x12>
 80086a6:	2000      	movs	r0, #0
 80086a8:	e007      	b.n	80086ba <__sfputs_r+0x22>
 80086aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ae:	463a      	mov	r2, r7
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ffda 	bl	800866a <__sfputc_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d1f3      	bne.n	80086a2 <__sfputs_r+0xa>
 80086ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086bc <_vfiprintf_r>:
 80086bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c0:	460d      	mov	r5, r1
 80086c2:	b09d      	sub	sp, #116	; 0x74
 80086c4:	4614      	mov	r4, r2
 80086c6:	4698      	mov	r8, r3
 80086c8:	4606      	mov	r6, r0
 80086ca:	b118      	cbz	r0, 80086d4 <_vfiprintf_r+0x18>
 80086cc:	6983      	ldr	r3, [r0, #24]
 80086ce:	b90b      	cbnz	r3, 80086d4 <_vfiprintf_r+0x18>
 80086d0:	f000 fb14 	bl	8008cfc <__sinit>
 80086d4:	4b89      	ldr	r3, [pc, #548]	; (80088fc <_vfiprintf_r+0x240>)
 80086d6:	429d      	cmp	r5, r3
 80086d8:	d11b      	bne.n	8008712 <_vfiprintf_r+0x56>
 80086da:	6875      	ldr	r5, [r6, #4]
 80086dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086de:	07d9      	lsls	r1, r3, #31
 80086e0:	d405      	bmi.n	80086ee <_vfiprintf_r+0x32>
 80086e2:	89ab      	ldrh	r3, [r5, #12]
 80086e4:	059a      	lsls	r2, r3, #22
 80086e6:	d402      	bmi.n	80086ee <_vfiprintf_r+0x32>
 80086e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ea:	f000 fba5 	bl	8008e38 <__retarget_lock_acquire_recursive>
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	071b      	lsls	r3, r3, #28
 80086f2:	d501      	bpl.n	80086f8 <_vfiprintf_r+0x3c>
 80086f4:	692b      	ldr	r3, [r5, #16]
 80086f6:	b9eb      	cbnz	r3, 8008734 <_vfiprintf_r+0x78>
 80086f8:	4629      	mov	r1, r5
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f96e 	bl	80089dc <__swsetup_r>
 8008700:	b1c0      	cbz	r0, 8008734 <_vfiprintf_r+0x78>
 8008702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008704:	07dc      	lsls	r4, r3, #31
 8008706:	d50e      	bpl.n	8008726 <_vfiprintf_r+0x6a>
 8008708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800870c:	b01d      	add	sp, #116	; 0x74
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	4b7b      	ldr	r3, [pc, #492]	; (8008900 <_vfiprintf_r+0x244>)
 8008714:	429d      	cmp	r5, r3
 8008716:	d101      	bne.n	800871c <_vfiprintf_r+0x60>
 8008718:	68b5      	ldr	r5, [r6, #8]
 800871a:	e7df      	b.n	80086dc <_vfiprintf_r+0x20>
 800871c:	4b79      	ldr	r3, [pc, #484]	; (8008904 <_vfiprintf_r+0x248>)
 800871e:	429d      	cmp	r5, r3
 8008720:	bf08      	it	eq
 8008722:	68f5      	ldreq	r5, [r6, #12]
 8008724:	e7da      	b.n	80086dc <_vfiprintf_r+0x20>
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	0598      	lsls	r0, r3, #22
 800872a:	d4ed      	bmi.n	8008708 <_vfiprintf_r+0x4c>
 800872c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800872e:	f000 fb84 	bl	8008e3a <__retarget_lock_release_recursive>
 8008732:	e7e9      	b.n	8008708 <_vfiprintf_r+0x4c>
 8008734:	2300      	movs	r3, #0
 8008736:	9309      	str	r3, [sp, #36]	; 0x24
 8008738:	2320      	movs	r3, #32
 800873a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800873e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008742:	2330      	movs	r3, #48	; 0x30
 8008744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008908 <_vfiprintf_r+0x24c>
 8008748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800874c:	f04f 0901 	mov.w	r9, #1
 8008750:	4623      	mov	r3, r4
 8008752:	469a      	mov	sl, r3
 8008754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008758:	b10a      	cbz	r2, 800875e <_vfiprintf_r+0xa2>
 800875a:	2a25      	cmp	r2, #37	; 0x25
 800875c:	d1f9      	bne.n	8008752 <_vfiprintf_r+0x96>
 800875e:	ebba 0b04 	subs.w	fp, sl, r4
 8008762:	d00b      	beq.n	800877c <_vfiprintf_r+0xc0>
 8008764:	465b      	mov	r3, fp
 8008766:	4622      	mov	r2, r4
 8008768:	4629      	mov	r1, r5
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff ff94 	bl	8008698 <__sfputs_r>
 8008770:	3001      	adds	r0, #1
 8008772:	f000 80aa 	beq.w	80088ca <_vfiprintf_r+0x20e>
 8008776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008778:	445a      	add	r2, fp
 800877a:	9209      	str	r2, [sp, #36]	; 0x24
 800877c:	f89a 3000 	ldrb.w	r3, [sl]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 80a2 	beq.w	80088ca <_vfiprintf_r+0x20e>
 8008786:	2300      	movs	r3, #0
 8008788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800878c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008790:	f10a 0a01 	add.w	sl, sl, #1
 8008794:	9304      	str	r3, [sp, #16]
 8008796:	9307      	str	r3, [sp, #28]
 8008798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800879c:	931a      	str	r3, [sp, #104]	; 0x68
 800879e:	4654      	mov	r4, sl
 80087a0:	2205      	movs	r2, #5
 80087a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a6:	4858      	ldr	r0, [pc, #352]	; (8008908 <_vfiprintf_r+0x24c>)
 80087a8:	f7f7 fd22 	bl	80001f0 <memchr>
 80087ac:	9a04      	ldr	r2, [sp, #16]
 80087ae:	b9d8      	cbnz	r0, 80087e8 <_vfiprintf_r+0x12c>
 80087b0:	06d1      	lsls	r1, r2, #27
 80087b2:	bf44      	itt	mi
 80087b4:	2320      	movmi	r3, #32
 80087b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ba:	0713      	lsls	r3, r2, #28
 80087bc:	bf44      	itt	mi
 80087be:	232b      	movmi	r3, #43	; 0x2b
 80087c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087c4:	f89a 3000 	ldrb.w	r3, [sl]
 80087c8:	2b2a      	cmp	r3, #42	; 0x2a
 80087ca:	d015      	beq.n	80087f8 <_vfiprintf_r+0x13c>
 80087cc:	9a07      	ldr	r2, [sp, #28]
 80087ce:	4654      	mov	r4, sl
 80087d0:	2000      	movs	r0, #0
 80087d2:	f04f 0c0a 	mov.w	ip, #10
 80087d6:	4621      	mov	r1, r4
 80087d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087dc:	3b30      	subs	r3, #48	; 0x30
 80087de:	2b09      	cmp	r3, #9
 80087e0:	d94e      	bls.n	8008880 <_vfiprintf_r+0x1c4>
 80087e2:	b1b0      	cbz	r0, 8008812 <_vfiprintf_r+0x156>
 80087e4:	9207      	str	r2, [sp, #28]
 80087e6:	e014      	b.n	8008812 <_vfiprintf_r+0x156>
 80087e8:	eba0 0308 	sub.w	r3, r0, r8
 80087ec:	fa09 f303 	lsl.w	r3, r9, r3
 80087f0:	4313      	orrs	r3, r2
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	46a2      	mov	sl, r4
 80087f6:	e7d2      	b.n	800879e <_vfiprintf_r+0xe2>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	1d19      	adds	r1, r3, #4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	9103      	str	r1, [sp, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	bfbb      	ittet	lt
 8008804:	425b      	neglt	r3, r3
 8008806:	f042 0202 	orrlt.w	r2, r2, #2
 800880a:	9307      	strge	r3, [sp, #28]
 800880c:	9307      	strlt	r3, [sp, #28]
 800880e:	bfb8      	it	lt
 8008810:	9204      	strlt	r2, [sp, #16]
 8008812:	7823      	ldrb	r3, [r4, #0]
 8008814:	2b2e      	cmp	r3, #46	; 0x2e
 8008816:	d10c      	bne.n	8008832 <_vfiprintf_r+0x176>
 8008818:	7863      	ldrb	r3, [r4, #1]
 800881a:	2b2a      	cmp	r3, #42	; 0x2a
 800881c:	d135      	bne.n	800888a <_vfiprintf_r+0x1ce>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	1d1a      	adds	r2, r3, #4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	9203      	str	r2, [sp, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfb8      	it	lt
 800882a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800882e:	3402      	adds	r4, #2
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008918 <_vfiprintf_r+0x25c>
 8008836:	7821      	ldrb	r1, [r4, #0]
 8008838:	2203      	movs	r2, #3
 800883a:	4650      	mov	r0, sl
 800883c:	f7f7 fcd8 	bl	80001f0 <memchr>
 8008840:	b140      	cbz	r0, 8008854 <_vfiprintf_r+0x198>
 8008842:	2340      	movs	r3, #64	; 0x40
 8008844:	eba0 000a 	sub.w	r0, r0, sl
 8008848:	fa03 f000 	lsl.w	r0, r3, r0
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	4303      	orrs	r3, r0
 8008850:	3401      	adds	r4, #1
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008858:	482c      	ldr	r0, [pc, #176]	; (800890c <_vfiprintf_r+0x250>)
 800885a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800885e:	2206      	movs	r2, #6
 8008860:	f7f7 fcc6 	bl	80001f0 <memchr>
 8008864:	2800      	cmp	r0, #0
 8008866:	d03f      	beq.n	80088e8 <_vfiprintf_r+0x22c>
 8008868:	4b29      	ldr	r3, [pc, #164]	; (8008910 <_vfiprintf_r+0x254>)
 800886a:	bb1b      	cbnz	r3, 80088b4 <_vfiprintf_r+0x1f8>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	3307      	adds	r3, #7
 8008870:	f023 0307 	bic.w	r3, r3, #7
 8008874:	3308      	adds	r3, #8
 8008876:	9303      	str	r3, [sp, #12]
 8008878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887a:	443b      	add	r3, r7
 800887c:	9309      	str	r3, [sp, #36]	; 0x24
 800887e:	e767      	b.n	8008750 <_vfiprintf_r+0x94>
 8008880:	fb0c 3202 	mla	r2, ip, r2, r3
 8008884:	460c      	mov	r4, r1
 8008886:	2001      	movs	r0, #1
 8008888:	e7a5      	b.n	80087d6 <_vfiprintf_r+0x11a>
 800888a:	2300      	movs	r3, #0
 800888c:	3401      	adds	r4, #1
 800888e:	9305      	str	r3, [sp, #20]
 8008890:	4619      	mov	r1, r3
 8008892:	f04f 0c0a 	mov.w	ip, #10
 8008896:	4620      	mov	r0, r4
 8008898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800889c:	3a30      	subs	r2, #48	; 0x30
 800889e:	2a09      	cmp	r2, #9
 80088a0:	d903      	bls.n	80088aa <_vfiprintf_r+0x1ee>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0c5      	beq.n	8008832 <_vfiprintf_r+0x176>
 80088a6:	9105      	str	r1, [sp, #20]
 80088a8:	e7c3      	b.n	8008832 <_vfiprintf_r+0x176>
 80088aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80088ae:	4604      	mov	r4, r0
 80088b0:	2301      	movs	r3, #1
 80088b2:	e7f0      	b.n	8008896 <_vfiprintf_r+0x1da>
 80088b4:	ab03      	add	r3, sp, #12
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	462a      	mov	r2, r5
 80088ba:	4b16      	ldr	r3, [pc, #88]	; (8008914 <_vfiprintf_r+0x258>)
 80088bc:	a904      	add	r1, sp, #16
 80088be:	4630      	mov	r0, r6
 80088c0:	f7fd fdd8 	bl	8006474 <_printf_float>
 80088c4:	4607      	mov	r7, r0
 80088c6:	1c78      	adds	r0, r7, #1
 80088c8:	d1d6      	bne.n	8008878 <_vfiprintf_r+0x1bc>
 80088ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088cc:	07d9      	lsls	r1, r3, #31
 80088ce:	d405      	bmi.n	80088dc <_vfiprintf_r+0x220>
 80088d0:	89ab      	ldrh	r3, [r5, #12]
 80088d2:	059a      	lsls	r2, r3, #22
 80088d4:	d402      	bmi.n	80088dc <_vfiprintf_r+0x220>
 80088d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088d8:	f000 faaf 	bl	8008e3a <__retarget_lock_release_recursive>
 80088dc:	89ab      	ldrh	r3, [r5, #12]
 80088de:	065b      	lsls	r3, r3, #25
 80088e0:	f53f af12 	bmi.w	8008708 <_vfiprintf_r+0x4c>
 80088e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088e6:	e711      	b.n	800870c <_vfiprintf_r+0x50>
 80088e8:	ab03      	add	r3, sp, #12
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	462a      	mov	r2, r5
 80088ee:	4b09      	ldr	r3, [pc, #36]	; (8008914 <_vfiprintf_r+0x258>)
 80088f0:	a904      	add	r1, sp, #16
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7fe f862 	bl	80069bc <_printf_i>
 80088f8:	e7e4      	b.n	80088c4 <_vfiprintf_r+0x208>
 80088fa:	bf00      	nop
 80088fc:	08009c3c 	.word	0x08009c3c
 8008900:	08009c5c 	.word	0x08009c5c
 8008904:	08009c1c 	.word	0x08009c1c
 8008908:	08009ac4 	.word	0x08009ac4
 800890c:	08009ace 	.word	0x08009ace
 8008910:	08006475 	.word	0x08006475
 8008914:	08008699 	.word	0x08008699
 8008918:	08009aca 	.word	0x08009aca

0800891c <__swbuf_r>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	460e      	mov	r6, r1
 8008920:	4614      	mov	r4, r2
 8008922:	4605      	mov	r5, r0
 8008924:	b118      	cbz	r0, 800892e <__swbuf_r+0x12>
 8008926:	6983      	ldr	r3, [r0, #24]
 8008928:	b90b      	cbnz	r3, 800892e <__swbuf_r+0x12>
 800892a:	f000 f9e7 	bl	8008cfc <__sinit>
 800892e:	4b21      	ldr	r3, [pc, #132]	; (80089b4 <__swbuf_r+0x98>)
 8008930:	429c      	cmp	r4, r3
 8008932:	d12b      	bne.n	800898c <__swbuf_r+0x70>
 8008934:	686c      	ldr	r4, [r5, #4]
 8008936:	69a3      	ldr	r3, [r4, #24]
 8008938:	60a3      	str	r3, [r4, #8]
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	071a      	lsls	r2, r3, #28
 800893e:	d52f      	bpl.n	80089a0 <__swbuf_r+0x84>
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	b36b      	cbz	r3, 80089a0 <__swbuf_r+0x84>
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	6820      	ldr	r0, [r4, #0]
 8008948:	1ac0      	subs	r0, r0, r3
 800894a:	6963      	ldr	r3, [r4, #20]
 800894c:	b2f6      	uxtb	r6, r6
 800894e:	4283      	cmp	r3, r0
 8008950:	4637      	mov	r7, r6
 8008952:	dc04      	bgt.n	800895e <__swbuf_r+0x42>
 8008954:	4621      	mov	r1, r4
 8008956:	4628      	mov	r0, r5
 8008958:	f000 f93c 	bl	8008bd4 <_fflush_r>
 800895c:	bb30      	cbnz	r0, 80089ac <__swbuf_r+0x90>
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	3b01      	subs	r3, #1
 8008962:	60a3      	str	r3, [r4, #8]
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	6022      	str	r2, [r4, #0]
 800896a:	701e      	strb	r6, [r3, #0]
 800896c:	6963      	ldr	r3, [r4, #20]
 800896e:	3001      	adds	r0, #1
 8008970:	4283      	cmp	r3, r0
 8008972:	d004      	beq.n	800897e <__swbuf_r+0x62>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	07db      	lsls	r3, r3, #31
 8008978:	d506      	bpl.n	8008988 <__swbuf_r+0x6c>
 800897a:	2e0a      	cmp	r6, #10
 800897c:	d104      	bne.n	8008988 <__swbuf_r+0x6c>
 800897e:	4621      	mov	r1, r4
 8008980:	4628      	mov	r0, r5
 8008982:	f000 f927 	bl	8008bd4 <_fflush_r>
 8008986:	b988      	cbnz	r0, 80089ac <__swbuf_r+0x90>
 8008988:	4638      	mov	r0, r7
 800898a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800898c:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <__swbuf_r+0x9c>)
 800898e:	429c      	cmp	r4, r3
 8008990:	d101      	bne.n	8008996 <__swbuf_r+0x7a>
 8008992:	68ac      	ldr	r4, [r5, #8]
 8008994:	e7cf      	b.n	8008936 <__swbuf_r+0x1a>
 8008996:	4b09      	ldr	r3, [pc, #36]	; (80089bc <__swbuf_r+0xa0>)
 8008998:	429c      	cmp	r4, r3
 800899a:	bf08      	it	eq
 800899c:	68ec      	ldreq	r4, [r5, #12]
 800899e:	e7ca      	b.n	8008936 <__swbuf_r+0x1a>
 80089a0:	4621      	mov	r1, r4
 80089a2:	4628      	mov	r0, r5
 80089a4:	f000 f81a 	bl	80089dc <__swsetup_r>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d0cb      	beq.n	8008944 <__swbuf_r+0x28>
 80089ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80089b0:	e7ea      	b.n	8008988 <__swbuf_r+0x6c>
 80089b2:	bf00      	nop
 80089b4:	08009c3c 	.word	0x08009c3c
 80089b8:	08009c5c 	.word	0x08009c5c
 80089bc:	08009c1c 	.word	0x08009c1c

080089c0 <__ascii_wctomb>:
 80089c0:	b149      	cbz	r1, 80089d6 <__ascii_wctomb+0x16>
 80089c2:	2aff      	cmp	r2, #255	; 0xff
 80089c4:	bf85      	ittet	hi
 80089c6:	238a      	movhi	r3, #138	; 0x8a
 80089c8:	6003      	strhi	r3, [r0, #0]
 80089ca:	700a      	strbls	r2, [r1, #0]
 80089cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80089d0:	bf98      	it	ls
 80089d2:	2001      	movls	r0, #1
 80089d4:	4770      	bx	lr
 80089d6:	4608      	mov	r0, r1
 80089d8:	4770      	bx	lr
	...

080089dc <__swsetup_r>:
 80089dc:	4b32      	ldr	r3, [pc, #200]	; (8008aa8 <__swsetup_r+0xcc>)
 80089de:	b570      	push	{r4, r5, r6, lr}
 80089e0:	681d      	ldr	r5, [r3, #0]
 80089e2:	4606      	mov	r6, r0
 80089e4:	460c      	mov	r4, r1
 80089e6:	b125      	cbz	r5, 80089f2 <__swsetup_r+0x16>
 80089e8:	69ab      	ldr	r3, [r5, #24]
 80089ea:	b913      	cbnz	r3, 80089f2 <__swsetup_r+0x16>
 80089ec:	4628      	mov	r0, r5
 80089ee:	f000 f985 	bl	8008cfc <__sinit>
 80089f2:	4b2e      	ldr	r3, [pc, #184]	; (8008aac <__swsetup_r+0xd0>)
 80089f4:	429c      	cmp	r4, r3
 80089f6:	d10f      	bne.n	8008a18 <__swsetup_r+0x3c>
 80089f8:	686c      	ldr	r4, [r5, #4]
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a00:	0719      	lsls	r1, r3, #28
 8008a02:	d42c      	bmi.n	8008a5e <__swsetup_r+0x82>
 8008a04:	06dd      	lsls	r5, r3, #27
 8008a06:	d411      	bmi.n	8008a2c <__swsetup_r+0x50>
 8008a08:	2309      	movs	r3, #9
 8008a0a:	6033      	str	r3, [r6, #0]
 8008a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a16:	e03e      	b.n	8008a96 <__swsetup_r+0xba>
 8008a18:	4b25      	ldr	r3, [pc, #148]	; (8008ab0 <__swsetup_r+0xd4>)
 8008a1a:	429c      	cmp	r4, r3
 8008a1c:	d101      	bne.n	8008a22 <__swsetup_r+0x46>
 8008a1e:	68ac      	ldr	r4, [r5, #8]
 8008a20:	e7eb      	b.n	80089fa <__swsetup_r+0x1e>
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <__swsetup_r+0xd8>)
 8008a24:	429c      	cmp	r4, r3
 8008a26:	bf08      	it	eq
 8008a28:	68ec      	ldreq	r4, [r5, #12]
 8008a2a:	e7e6      	b.n	80089fa <__swsetup_r+0x1e>
 8008a2c:	0758      	lsls	r0, r3, #29
 8008a2e:	d512      	bpl.n	8008a56 <__swsetup_r+0x7a>
 8008a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a32:	b141      	cbz	r1, 8008a46 <__swsetup_r+0x6a>
 8008a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	d002      	beq.n	8008a42 <__swsetup_r+0x66>
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7ff fb31 	bl	80080a4 <_free_r>
 8008a42:	2300      	movs	r3, #0
 8008a44:	6363      	str	r3, [r4, #52]	; 0x34
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	f043 0308 	orr.w	r3, r3, #8
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	b94b      	cbnz	r3, 8008a76 <__swsetup_r+0x9a>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a6c:	d003      	beq.n	8008a76 <__swsetup_r+0x9a>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 fa09 	bl	8008e88 <__smakebuf_r>
 8008a76:	89a0      	ldrh	r0, [r4, #12]
 8008a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a7c:	f010 0301 	ands.w	r3, r0, #1
 8008a80:	d00a      	beq.n	8008a98 <__swsetup_r+0xbc>
 8008a82:	2300      	movs	r3, #0
 8008a84:	60a3      	str	r3, [r4, #8]
 8008a86:	6963      	ldr	r3, [r4, #20]
 8008a88:	425b      	negs	r3, r3
 8008a8a:	61a3      	str	r3, [r4, #24]
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	b943      	cbnz	r3, 8008aa2 <__swsetup_r+0xc6>
 8008a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a94:	d1ba      	bne.n	8008a0c <__swsetup_r+0x30>
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	0781      	lsls	r1, r0, #30
 8008a9a:	bf58      	it	pl
 8008a9c:	6963      	ldrpl	r3, [r4, #20]
 8008a9e:	60a3      	str	r3, [r4, #8]
 8008aa0:	e7f4      	b.n	8008a8c <__swsetup_r+0xb0>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e7f7      	b.n	8008a96 <__swsetup_r+0xba>
 8008aa6:	bf00      	nop
 8008aa8:	200000c4 	.word	0x200000c4
 8008aac:	08009c3c 	.word	0x08009c3c
 8008ab0:	08009c5c 	.word	0x08009c5c
 8008ab4:	08009c1c 	.word	0x08009c1c

08008ab8 <abort>:
 8008ab8:	b508      	push	{r3, lr}
 8008aba:	2006      	movs	r0, #6
 8008abc:	f000 fa54 	bl	8008f68 <raise>
 8008ac0:	2001      	movs	r0, #1
 8008ac2:	f7fa fa2d 	bl	8002f20 <_exit>
	...

08008ac8 <__sflush_r>:
 8008ac8:	898a      	ldrh	r2, [r1, #12]
 8008aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ace:	4605      	mov	r5, r0
 8008ad0:	0710      	lsls	r0, r2, #28
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	d458      	bmi.n	8008b88 <__sflush_r+0xc0>
 8008ad6:	684b      	ldr	r3, [r1, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dc05      	bgt.n	8008ae8 <__sflush_r+0x20>
 8008adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dc02      	bgt.n	8008ae8 <__sflush_r+0x20>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aea:	2e00      	cmp	r6, #0
 8008aec:	d0f9      	beq.n	8008ae2 <__sflush_r+0x1a>
 8008aee:	2300      	movs	r3, #0
 8008af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008af4:	682f      	ldr	r7, [r5, #0]
 8008af6:	602b      	str	r3, [r5, #0]
 8008af8:	d032      	beq.n	8008b60 <__sflush_r+0x98>
 8008afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	075a      	lsls	r2, r3, #29
 8008b00:	d505      	bpl.n	8008b0e <__sflush_r+0x46>
 8008b02:	6863      	ldr	r3, [r4, #4]
 8008b04:	1ac0      	subs	r0, r0, r3
 8008b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b08:	b10b      	cbz	r3, 8008b0e <__sflush_r+0x46>
 8008b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b0c:	1ac0      	subs	r0, r0, r3
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4602      	mov	r2, r0
 8008b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b14:	6a21      	ldr	r1, [r4, #32]
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b0      	blx	r6
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	d106      	bne.n	8008b2e <__sflush_r+0x66>
 8008b20:	6829      	ldr	r1, [r5, #0]
 8008b22:	291d      	cmp	r1, #29
 8008b24:	d82c      	bhi.n	8008b80 <__sflush_r+0xb8>
 8008b26:	4a2a      	ldr	r2, [pc, #168]	; (8008bd0 <__sflush_r+0x108>)
 8008b28:	40ca      	lsrs	r2, r1
 8008b2a:	07d6      	lsls	r6, r2, #31
 8008b2c:	d528      	bpl.n	8008b80 <__sflush_r+0xb8>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	6062      	str	r2, [r4, #4]
 8008b32:	04d9      	lsls	r1, r3, #19
 8008b34:	6922      	ldr	r2, [r4, #16]
 8008b36:	6022      	str	r2, [r4, #0]
 8008b38:	d504      	bpl.n	8008b44 <__sflush_r+0x7c>
 8008b3a:	1c42      	adds	r2, r0, #1
 8008b3c:	d101      	bne.n	8008b42 <__sflush_r+0x7a>
 8008b3e:	682b      	ldr	r3, [r5, #0]
 8008b40:	b903      	cbnz	r3, 8008b44 <__sflush_r+0x7c>
 8008b42:	6560      	str	r0, [r4, #84]	; 0x54
 8008b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b46:	602f      	str	r7, [r5, #0]
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	d0ca      	beq.n	8008ae2 <__sflush_r+0x1a>
 8008b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b50:	4299      	cmp	r1, r3
 8008b52:	d002      	beq.n	8008b5a <__sflush_r+0x92>
 8008b54:	4628      	mov	r0, r5
 8008b56:	f7ff faa5 	bl	80080a4 <_free_r>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b5e:	e7c1      	b.n	8008ae4 <__sflush_r+0x1c>
 8008b60:	6a21      	ldr	r1, [r4, #32]
 8008b62:	2301      	movs	r3, #1
 8008b64:	4628      	mov	r0, r5
 8008b66:	47b0      	blx	r6
 8008b68:	1c41      	adds	r1, r0, #1
 8008b6a:	d1c7      	bne.n	8008afc <__sflush_r+0x34>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0c4      	beq.n	8008afc <__sflush_r+0x34>
 8008b72:	2b1d      	cmp	r3, #29
 8008b74:	d001      	beq.n	8008b7a <__sflush_r+0xb2>
 8008b76:	2b16      	cmp	r3, #22
 8008b78:	d101      	bne.n	8008b7e <__sflush_r+0xb6>
 8008b7a:	602f      	str	r7, [r5, #0]
 8008b7c:	e7b1      	b.n	8008ae2 <__sflush_r+0x1a>
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b84:	81a3      	strh	r3, [r4, #12]
 8008b86:	e7ad      	b.n	8008ae4 <__sflush_r+0x1c>
 8008b88:	690f      	ldr	r7, [r1, #16]
 8008b8a:	2f00      	cmp	r7, #0
 8008b8c:	d0a9      	beq.n	8008ae2 <__sflush_r+0x1a>
 8008b8e:	0793      	lsls	r3, r2, #30
 8008b90:	680e      	ldr	r6, [r1, #0]
 8008b92:	bf08      	it	eq
 8008b94:	694b      	ldreq	r3, [r1, #20]
 8008b96:	600f      	str	r7, [r1, #0]
 8008b98:	bf18      	it	ne
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	eba6 0807 	sub.w	r8, r6, r7
 8008ba0:	608b      	str	r3, [r1, #8]
 8008ba2:	f1b8 0f00 	cmp.w	r8, #0
 8008ba6:	dd9c      	ble.n	8008ae2 <__sflush_r+0x1a>
 8008ba8:	6a21      	ldr	r1, [r4, #32]
 8008baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bac:	4643      	mov	r3, r8
 8008bae:	463a      	mov	r2, r7
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	47b0      	blx	r6
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	dc06      	bgt.n	8008bc6 <__sflush_r+0xfe>
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc4:	e78e      	b.n	8008ae4 <__sflush_r+0x1c>
 8008bc6:	4407      	add	r7, r0
 8008bc8:	eba8 0800 	sub.w	r8, r8, r0
 8008bcc:	e7e9      	b.n	8008ba2 <__sflush_r+0xda>
 8008bce:	bf00      	nop
 8008bd0:	20400001 	.word	0x20400001

08008bd4 <_fflush_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	690b      	ldr	r3, [r1, #16]
 8008bd8:	4605      	mov	r5, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b913      	cbnz	r3, 8008be4 <_fflush_r+0x10>
 8008bde:	2500      	movs	r5, #0
 8008be0:	4628      	mov	r0, r5
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	b118      	cbz	r0, 8008bee <_fflush_r+0x1a>
 8008be6:	6983      	ldr	r3, [r0, #24]
 8008be8:	b90b      	cbnz	r3, 8008bee <_fflush_r+0x1a>
 8008bea:	f000 f887 	bl	8008cfc <__sinit>
 8008bee:	4b14      	ldr	r3, [pc, #80]	; (8008c40 <_fflush_r+0x6c>)
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	d11b      	bne.n	8008c2c <_fflush_r+0x58>
 8008bf4:	686c      	ldr	r4, [r5, #4]
 8008bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0ef      	beq.n	8008bde <_fflush_r+0xa>
 8008bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c00:	07d0      	lsls	r0, r2, #31
 8008c02:	d404      	bmi.n	8008c0e <_fflush_r+0x3a>
 8008c04:	0599      	lsls	r1, r3, #22
 8008c06:	d402      	bmi.n	8008c0e <_fflush_r+0x3a>
 8008c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c0a:	f000 f915 	bl	8008e38 <__retarget_lock_acquire_recursive>
 8008c0e:	4628      	mov	r0, r5
 8008c10:	4621      	mov	r1, r4
 8008c12:	f7ff ff59 	bl	8008ac8 <__sflush_r>
 8008c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c18:	07da      	lsls	r2, r3, #31
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	d4e0      	bmi.n	8008be0 <_fflush_r+0xc>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	059b      	lsls	r3, r3, #22
 8008c22:	d4dd      	bmi.n	8008be0 <_fflush_r+0xc>
 8008c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c26:	f000 f908 	bl	8008e3a <__retarget_lock_release_recursive>
 8008c2a:	e7d9      	b.n	8008be0 <_fflush_r+0xc>
 8008c2c:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <_fflush_r+0x70>)
 8008c2e:	429c      	cmp	r4, r3
 8008c30:	d101      	bne.n	8008c36 <_fflush_r+0x62>
 8008c32:	68ac      	ldr	r4, [r5, #8]
 8008c34:	e7df      	b.n	8008bf6 <_fflush_r+0x22>
 8008c36:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <_fflush_r+0x74>)
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	bf08      	it	eq
 8008c3c:	68ec      	ldreq	r4, [r5, #12]
 8008c3e:	e7da      	b.n	8008bf6 <_fflush_r+0x22>
 8008c40:	08009c3c 	.word	0x08009c3c
 8008c44:	08009c5c 	.word	0x08009c5c
 8008c48:	08009c1c 	.word	0x08009c1c

08008c4c <std>:
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	4604      	mov	r4, r0
 8008c52:	e9c0 3300 	strd	r3, r3, [r0]
 8008c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c5a:	6083      	str	r3, [r0, #8]
 8008c5c:	8181      	strh	r1, [r0, #12]
 8008c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c60:	81c2      	strh	r2, [r0, #14]
 8008c62:	6183      	str	r3, [r0, #24]
 8008c64:	4619      	mov	r1, r3
 8008c66:	2208      	movs	r2, #8
 8008c68:	305c      	adds	r0, #92	; 0x5c
 8008c6a:	f7fd fb5b 	bl	8006324 <memset>
 8008c6e:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <std+0x38>)
 8008c70:	6263      	str	r3, [r4, #36]	; 0x24
 8008c72:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <std+0x3c>)
 8008c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <std+0x40>)
 8008c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <std+0x44>)
 8008c7c:	6224      	str	r4, [r4, #32]
 8008c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c80:	bd10      	pop	{r4, pc}
 8008c82:	bf00      	nop
 8008c84:	08008fa1 	.word	0x08008fa1
 8008c88:	08008fc3 	.word	0x08008fc3
 8008c8c:	08008ffb 	.word	0x08008ffb
 8008c90:	0800901f 	.word	0x0800901f

08008c94 <_cleanup_r>:
 8008c94:	4901      	ldr	r1, [pc, #4]	; (8008c9c <_cleanup_r+0x8>)
 8008c96:	f000 b8af 	b.w	8008df8 <_fwalk_reent>
 8008c9a:	bf00      	nop
 8008c9c:	08008bd5 	.word	0x08008bd5

08008ca0 <__sfmoreglue>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	2268      	movs	r2, #104	; 0x68
 8008ca4:	1e4d      	subs	r5, r1, #1
 8008ca6:	4355      	muls	r5, r2
 8008ca8:	460e      	mov	r6, r1
 8008caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cae:	f7ff fa65 	bl	800817c <_malloc_r>
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	b140      	cbz	r0, 8008cc8 <__sfmoreglue+0x28>
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8008cbc:	300c      	adds	r0, #12
 8008cbe:	60a0      	str	r0, [r4, #8]
 8008cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cc4:	f7fd fb2e 	bl	8006324 <memset>
 8008cc8:	4620      	mov	r0, r4
 8008cca:	bd70      	pop	{r4, r5, r6, pc}

08008ccc <__sfp_lock_acquire>:
 8008ccc:	4801      	ldr	r0, [pc, #4]	; (8008cd4 <__sfp_lock_acquire+0x8>)
 8008cce:	f000 b8b3 	b.w	8008e38 <__retarget_lock_acquire_recursive>
 8008cd2:	bf00      	nop
 8008cd4:	200005b5 	.word	0x200005b5

08008cd8 <__sfp_lock_release>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__sfp_lock_release+0x8>)
 8008cda:	f000 b8ae 	b.w	8008e3a <__retarget_lock_release_recursive>
 8008cde:	bf00      	nop
 8008ce0:	200005b5 	.word	0x200005b5

08008ce4 <__sinit_lock_acquire>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__sinit_lock_acquire+0x8>)
 8008ce6:	f000 b8a7 	b.w	8008e38 <__retarget_lock_acquire_recursive>
 8008cea:	bf00      	nop
 8008cec:	200005b6 	.word	0x200005b6

08008cf0 <__sinit_lock_release>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	; (8008cf8 <__sinit_lock_release+0x8>)
 8008cf2:	f000 b8a2 	b.w	8008e3a <__retarget_lock_release_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	200005b6 	.word	0x200005b6

08008cfc <__sinit>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	4604      	mov	r4, r0
 8008d00:	f7ff fff0 	bl	8008ce4 <__sinit_lock_acquire>
 8008d04:	69a3      	ldr	r3, [r4, #24]
 8008d06:	b11b      	cbz	r3, 8008d10 <__sinit+0x14>
 8008d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d0c:	f7ff bff0 	b.w	8008cf0 <__sinit_lock_release>
 8008d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d14:	6523      	str	r3, [r4, #80]	; 0x50
 8008d16:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <__sinit+0x68>)
 8008d18:	4a13      	ldr	r2, [pc, #76]	; (8008d68 <__sinit+0x6c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d1e:	42a3      	cmp	r3, r4
 8008d20:	bf04      	itt	eq
 8008d22:	2301      	moveq	r3, #1
 8008d24:	61a3      	streq	r3, [r4, #24]
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 f820 	bl	8008d6c <__sfp>
 8008d2c:	6060      	str	r0, [r4, #4]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 f81c 	bl	8008d6c <__sfp>
 8008d34:	60a0      	str	r0, [r4, #8]
 8008d36:	4620      	mov	r0, r4
 8008d38:	f000 f818 	bl	8008d6c <__sfp>
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	60e0      	str	r0, [r4, #12]
 8008d40:	2104      	movs	r1, #4
 8008d42:	6860      	ldr	r0, [r4, #4]
 8008d44:	f7ff ff82 	bl	8008c4c <std>
 8008d48:	68a0      	ldr	r0, [r4, #8]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	2109      	movs	r1, #9
 8008d4e:	f7ff ff7d 	bl	8008c4c <std>
 8008d52:	68e0      	ldr	r0, [r4, #12]
 8008d54:	2202      	movs	r2, #2
 8008d56:	2112      	movs	r1, #18
 8008d58:	f7ff ff78 	bl	8008c4c <std>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	61a3      	str	r3, [r4, #24]
 8008d60:	e7d2      	b.n	8008d08 <__sinit+0xc>
 8008d62:	bf00      	nop
 8008d64:	080098a0 	.word	0x080098a0
 8008d68:	08008c95 	.word	0x08008c95

08008d6c <__sfp>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	4607      	mov	r7, r0
 8008d70:	f7ff ffac 	bl	8008ccc <__sfp_lock_acquire>
 8008d74:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <__sfp+0x84>)
 8008d76:	681e      	ldr	r6, [r3, #0]
 8008d78:	69b3      	ldr	r3, [r6, #24]
 8008d7a:	b913      	cbnz	r3, 8008d82 <__sfp+0x16>
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f7ff ffbd 	bl	8008cfc <__sinit>
 8008d82:	3648      	adds	r6, #72	; 0x48
 8008d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	d503      	bpl.n	8008d94 <__sfp+0x28>
 8008d8c:	6833      	ldr	r3, [r6, #0]
 8008d8e:	b30b      	cbz	r3, 8008dd4 <__sfp+0x68>
 8008d90:	6836      	ldr	r6, [r6, #0]
 8008d92:	e7f7      	b.n	8008d84 <__sfp+0x18>
 8008d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d98:	b9d5      	cbnz	r5, 8008dd0 <__sfp+0x64>
 8008d9a:	4b16      	ldr	r3, [pc, #88]	; (8008df4 <__sfp+0x88>)
 8008d9c:	60e3      	str	r3, [r4, #12]
 8008d9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008da2:	6665      	str	r5, [r4, #100]	; 0x64
 8008da4:	f000 f847 	bl	8008e36 <__retarget_lock_init_recursive>
 8008da8:	f7ff ff96 	bl	8008cd8 <__sfp_lock_release>
 8008dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008db4:	6025      	str	r5, [r4, #0]
 8008db6:	61a5      	str	r5, [r4, #24]
 8008db8:	2208      	movs	r2, #8
 8008dba:	4629      	mov	r1, r5
 8008dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dc0:	f7fd fab0 	bl	8006324 <memset>
 8008dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dcc:	4620      	mov	r0, r4
 8008dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd0:	3468      	adds	r4, #104	; 0x68
 8008dd2:	e7d9      	b.n	8008d88 <__sfp+0x1c>
 8008dd4:	2104      	movs	r1, #4
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	f7ff ff62 	bl	8008ca0 <__sfmoreglue>
 8008ddc:	4604      	mov	r4, r0
 8008dde:	6030      	str	r0, [r6, #0]
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d1d5      	bne.n	8008d90 <__sfp+0x24>
 8008de4:	f7ff ff78 	bl	8008cd8 <__sfp_lock_release>
 8008de8:	230c      	movs	r3, #12
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	e7ee      	b.n	8008dcc <__sfp+0x60>
 8008dee:	bf00      	nop
 8008df0:	080098a0 	.word	0x080098a0
 8008df4:	ffff0001 	.word	0xffff0001

08008df8 <_fwalk_reent>:
 8008df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	4688      	mov	r8, r1
 8008e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e04:	2700      	movs	r7, #0
 8008e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e0e:	d505      	bpl.n	8008e1c <_fwalk_reent+0x24>
 8008e10:	6824      	ldr	r4, [r4, #0]
 8008e12:	2c00      	cmp	r4, #0
 8008e14:	d1f7      	bne.n	8008e06 <_fwalk_reent+0xe>
 8008e16:	4638      	mov	r0, r7
 8008e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e1c:	89ab      	ldrh	r3, [r5, #12]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d907      	bls.n	8008e32 <_fwalk_reent+0x3a>
 8008e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e26:	3301      	adds	r3, #1
 8008e28:	d003      	beq.n	8008e32 <_fwalk_reent+0x3a>
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	47c0      	blx	r8
 8008e30:	4307      	orrs	r7, r0
 8008e32:	3568      	adds	r5, #104	; 0x68
 8008e34:	e7e9      	b.n	8008e0a <_fwalk_reent+0x12>

08008e36 <__retarget_lock_init_recursive>:
 8008e36:	4770      	bx	lr

08008e38 <__retarget_lock_acquire_recursive>:
 8008e38:	4770      	bx	lr

08008e3a <__retarget_lock_release_recursive>:
 8008e3a:	4770      	bx	lr

08008e3c <__swhatbuf_r>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	460e      	mov	r6, r1
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	2900      	cmp	r1, #0
 8008e46:	b096      	sub	sp, #88	; 0x58
 8008e48:	4614      	mov	r4, r2
 8008e4a:	461d      	mov	r5, r3
 8008e4c:	da08      	bge.n	8008e60 <__swhatbuf_r+0x24>
 8008e4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	061a      	lsls	r2, r3, #24
 8008e58:	d410      	bmi.n	8008e7c <__swhatbuf_r+0x40>
 8008e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e5e:	e00e      	b.n	8008e7e <__swhatbuf_r+0x42>
 8008e60:	466a      	mov	r2, sp
 8008e62:	f000 f903 	bl	800906c <_fstat_r>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	dbf1      	blt.n	8008e4e <__swhatbuf_r+0x12>
 8008e6a:	9a01      	ldr	r2, [sp, #4]
 8008e6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e74:	425a      	negs	r2, r3
 8008e76:	415a      	adcs	r2, r3
 8008e78:	602a      	str	r2, [r5, #0]
 8008e7a:	e7ee      	b.n	8008e5a <__swhatbuf_r+0x1e>
 8008e7c:	2340      	movs	r3, #64	; 0x40
 8008e7e:	2000      	movs	r0, #0
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	b016      	add	sp, #88	; 0x58
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e88 <__smakebuf_r>:
 8008e88:	898b      	ldrh	r3, [r1, #12]
 8008e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e8c:	079d      	lsls	r5, r3, #30
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460c      	mov	r4, r1
 8008e92:	d507      	bpl.n	8008ea4 <__smakebuf_r+0x1c>
 8008e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	6123      	str	r3, [r4, #16]
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	6163      	str	r3, [r4, #20]
 8008ea0:	b002      	add	sp, #8
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	ab01      	add	r3, sp, #4
 8008ea6:	466a      	mov	r2, sp
 8008ea8:	f7ff ffc8 	bl	8008e3c <__swhatbuf_r>
 8008eac:	9900      	ldr	r1, [sp, #0]
 8008eae:	4605      	mov	r5, r0
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff f963 	bl	800817c <_malloc_r>
 8008eb6:	b948      	cbnz	r0, 8008ecc <__smakebuf_r+0x44>
 8008eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d4ef      	bmi.n	8008ea0 <__smakebuf_r+0x18>
 8008ec0:	f023 0303 	bic.w	r3, r3, #3
 8008ec4:	f043 0302 	orr.w	r3, r3, #2
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	e7e3      	b.n	8008e94 <__smakebuf_r+0xc>
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <__smakebuf_r+0x7c>)
 8008ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	6020      	str	r0, [r4, #0]
 8008ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed8:	81a3      	strh	r3, [r4, #12]
 8008eda:	9b00      	ldr	r3, [sp, #0]
 8008edc:	6163      	str	r3, [r4, #20]
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	6120      	str	r0, [r4, #16]
 8008ee2:	b15b      	cbz	r3, 8008efc <__smakebuf_r+0x74>
 8008ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f000 f8d1 	bl	8009090 <_isatty_r>
 8008eee:	b128      	cbz	r0, 8008efc <__smakebuf_r+0x74>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	f023 0303 	bic.w	r3, r3, #3
 8008ef6:	f043 0301 	orr.w	r3, r3, #1
 8008efa:	81a3      	strh	r3, [r4, #12]
 8008efc:	89a0      	ldrh	r0, [r4, #12]
 8008efe:	4305      	orrs	r5, r0
 8008f00:	81a5      	strh	r5, [r4, #12]
 8008f02:	e7cd      	b.n	8008ea0 <__smakebuf_r+0x18>
 8008f04:	08008c95 	.word	0x08008c95

08008f08 <_malloc_usable_size_r>:
 8008f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f0c:	1f18      	subs	r0, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bfbc      	itt	lt
 8008f12:	580b      	ldrlt	r3, [r1, r0]
 8008f14:	18c0      	addlt	r0, r0, r3
 8008f16:	4770      	bx	lr

08008f18 <_raise_r>:
 8008f18:	291f      	cmp	r1, #31
 8008f1a:	b538      	push	{r3, r4, r5, lr}
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	460d      	mov	r5, r1
 8008f20:	d904      	bls.n	8008f2c <_raise_r+0x14>
 8008f22:	2316      	movs	r3, #22
 8008f24:	6003      	str	r3, [r0, #0]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f2e:	b112      	cbz	r2, 8008f36 <_raise_r+0x1e>
 8008f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f34:	b94b      	cbnz	r3, 8008f4a <_raise_r+0x32>
 8008f36:	4620      	mov	r0, r4
 8008f38:	f000 f830 	bl	8008f9c <_getpid_r>
 8008f3c:	462a      	mov	r2, r5
 8008f3e:	4601      	mov	r1, r0
 8008f40:	4620      	mov	r0, r4
 8008f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f46:	f000 b817 	b.w	8008f78 <_kill_r>
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d00a      	beq.n	8008f64 <_raise_r+0x4c>
 8008f4e:	1c59      	adds	r1, r3, #1
 8008f50:	d103      	bne.n	8008f5a <_raise_r+0x42>
 8008f52:	2316      	movs	r3, #22
 8008f54:	6003      	str	r3, [r0, #0]
 8008f56:	2001      	movs	r0, #1
 8008f58:	e7e7      	b.n	8008f2a <_raise_r+0x12>
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f60:	4628      	mov	r0, r5
 8008f62:	4798      	blx	r3
 8008f64:	2000      	movs	r0, #0
 8008f66:	e7e0      	b.n	8008f2a <_raise_r+0x12>

08008f68 <raise>:
 8008f68:	4b02      	ldr	r3, [pc, #8]	; (8008f74 <raise+0xc>)
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	f7ff bfd3 	b.w	8008f18 <_raise_r>
 8008f72:	bf00      	nop
 8008f74:	200000c4 	.word	0x200000c4

08008f78 <_kill_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d07      	ldr	r5, [pc, #28]	; (8008f98 <_kill_r+0x20>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	f7f9 ffbb 	bl	8002f00 <_kill>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d102      	bne.n	8008f94 <_kill_r+0x1c>
 8008f8e:	682b      	ldr	r3, [r5, #0]
 8008f90:	b103      	cbz	r3, 8008f94 <_kill_r+0x1c>
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	bf00      	nop
 8008f98:	200005b0 	.word	0x200005b0

08008f9c <_getpid_r>:
 8008f9c:	f7f9 bfa8 	b.w	8002ef0 <_getpid>

08008fa0 <__sread>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	f000 f894 	bl	80090d4 <_read_r>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	bfab      	itete	ge
 8008fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fb4:	181b      	addge	r3, r3, r0
 8008fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fba:	bfac      	ite	ge
 8008fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fbe:	81a3      	strhlt	r3, [r4, #12]
 8008fc0:	bd10      	pop	{r4, pc}

08008fc2 <__swrite>:
 8008fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc6:	461f      	mov	r7, r3
 8008fc8:	898b      	ldrh	r3, [r1, #12]
 8008fca:	05db      	lsls	r3, r3, #23
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4616      	mov	r6, r2
 8008fd2:	d505      	bpl.n	8008fe0 <__swrite+0x1e>
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	2302      	movs	r3, #2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f000 f868 	bl	80090b0 <_lseek_r>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	4632      	mov	r2, r6
 8008fee:	463b      	mov	r3, r7
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	f000 b817 	b.w	8009028 <_write_r>

08008ffa <__sseek>:
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009002:	f000 f855 	bl	80090b0 <_lseek_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	bf15      	itete	ne
 800900c:	6560      	strne	r0, [r4, #84]	; 0x54
 800900e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009016:	81a3      	strheq	r3, [r4, #12]
 8009018:	bf18      	it	ne
 800901a:	81a3      	strhne	r3, [r4, #12]
 800901c:	bd10      	pop	{r4, pc}

0800901e <__sclose>:
 800901e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009022:	f000 b813 	b.w	800904c <_close_r>
	...

08009028 <_write_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d07      	ldr	r5, [pc, #28]	; (8009048 <_write_r+0x20>)
 800902c:	4604      	mov	r4, r0
 800902e:	4608      	mov	r0, r1
 8009030:	4611      	mov	r1, r2
 8009032:	2200      	movs	r2, #0
 8009034:	602a      	str	r2, [r5, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	f7f9 ff99 	bl	8002f6e <_write>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_write_r+0x1e>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_write_r+0x1e>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	200005b0 	.word	0x200005b0

0800904c <_close_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d06      	ldr	r5, [pc, #24]	; (8009068 <_close_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f9 ffa5 	bl	8002fa6 <_close>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_close_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_close_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	200005b0 	.word	0x200005b0

0800906c <_fstat_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	; (800908c <_fstat_r+0x20>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	4611      	mov	r1, r2
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	f7f9 ffa0 	bl	8002fbe <_fstat>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d102      	bne.n	8009088 <_fstat_r+0x1c>
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	b103      	cbz	r3, 8009088 <_fstat_r+0x1c>
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	bf00      	nop
 800908c:	200005b0 	.word	0x200005b0

08009090 <_isatty_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d06      	ldr	r5, [pc, #24]	; (80090ac <_isatty_r+0x1c>)
 8009094:	2300      	movs	r3, #0
 8009096:	4604      	mov	r4, r0
 8009098:	4608      	mov	r0, r1
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	f7f9 ff9f 	bl	8002fde <_isatty>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_isatty_r+0x1a>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_isatty_r+0x1a>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	200005b0 	.word	0x200005b0

080090b0 <_lseek_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d07      	ldr	r5, [pc, #28]	; (80090d0 <_lseek_r+0x20>)
 80090b4:	4604      	mov	r4, r0
 80090b6:	4608      	mov	r0, r1
 80090b8:	4611      	mov	r1, r2
 80090ba:	2200      	movs	r2, #0
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f7f9 ff98 	bl	8002ff4 <_lseek>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_lseek_r+0x1e>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_lseek_r+0x1e>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	200005b0 	.word	0x200005b0

080090d4 <_read_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d07      	ldr	r5, [pc, #28]	; (80090f4 <_read_r+0x20>)
 80090d8:	4604      	mov	r4, r0
 80090da:	4608      	mov	r0, r1
 80090dc:	4611      	mov	r1, r2
 80090de:	2200      	movs	r2, #0
 80090e0:	602a      	str	r2, [r5, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f7f9 ff26 	bl	8002f34 <_read>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d102      	bne.n	80090f2 <_read_r+0x1e>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	b103      	cbz	r3, 80090f2 <_read_r+0x1e>
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	200005b0 	.word	0x200005b0

080090f8 <atan>:
 80090f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	ec55 4b10 	vmov	r4, r5, d0
 8009100:	4bc3      	ldr	r3, [pc, #780]	; (8009410 <atan+0x318>)
 8009102:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009106:	429e      	cmp	r6, r3
 8009108:	46ab      	mov	fp, r5
 800910a:	dd18      	ble.n	800913e <atan+0x46>
 800910c:	4bc1      	ldr	r3, [pc, #772]	; (8009414 <atan+0x31c>)
 800910e:	429e      	cmp	r6, r3
 8009110:	dc01      	bgt.n	8009116 <atan+0x1e>
 8009112:	d109      	bne.n	8009128 <atan+0x30>
 8009114:	b144      	cbz	r4, 8009128 <atan+0x30>
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 f8bd 	bl	800029c <__adddf3>
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	e006      	b.n	8009136 <atan+0x3e>
 8009128:	f1bb 0f00 	cmp.w	fp, #0
 800912c:	f300 8131 	bgt.w	8009392 <atan+0x29a>
 8009130:	a59b      	add	r5, pc, #620	; (adr r5, 80093a0 <atan+0x2a8>)
 8009132:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009136:	ec45 4b10 	vmov	d0, r4, r5
 800913a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913e:	4bb6      	ldr	r3, [pc, #728]	; (8009418 <atan+0x320>)
 8009140:	429e      	cmp	r6, r3
 8009142:	dc14      	bgt.n	800916e <atan+0x76>
 8009144:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009148:	429e      	cmp	r6, r3
 800914a:	dc0d      	bgt.n	8009168 <atan+0x70>
 800914c:	a396      	add	r3, pc, #600	; (adr r3, 80093a8 <atan+0x2b0>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	ee10 0a10 	vmov	r0, s0
 8009156:	4629      	mov	r1, r5
 8009158:	f7f7 f8a0 	bl	800029c <__adddf3>
 800915c:	4baf      	ldr	r3, [pc, #700]	; (800941c <atan+0x324>)
 800915e:	2200      	movs	r2, #0
 8009160:	f7f7 fce2 	bl	8000b28 <__aeabi_dcmpgt>
 8009164:	2800      	cmp	r0, #0
 8009166:	d1e6      	bne.n	8009136 <atan+0x3e>
 8009168:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800916c:	e02b      	b.n	80091c6 <atan+0xce>
 800916e:	f000 f963 	bl	8009438 <fabs>
 8009172:	4bab      	ldr	r3, [pc, #684]	; (8009420 <atan+0x328>)
 8009174:	429e      	cmp	r6, r3
 8009176:	ec55 4b10 	vmov	r4, r5, d0
 800917a:	f300 80bf 	bgt.w	80092fc <atan+0x204>
 800917e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009182:	429e      	cmp	r6, r3
 8009184:	f300 80a0 	bgt.w	80092c8 <atan+0x1d0>
 8009188:	ee10 2a10 	vmov	r2, s0
 800918c:	ee10 0a10 	vmov	r0, s0
 8009190:	462b      	mov	r3, r5
 8009192:	4629      	mov	r1, r5
 8009194:	f7f7 f882 	bl	800029c <__adddf3>
 8009198:	4ba0      	ldr	r3, [pc, #640]	; (800941c <atan+0x324>)
 800919a:	2200      	movs	r2, #0
 800919c:	f7f7 f87c 	bl	8000298 <__aeabi_dsub>
 80091a0:	2200      	movs	r2, #0
 80091a2:	4606      	mov	r6, r0
 80091a4:	460f      	mov	r7, r1
 80091a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091aa:	4620      	mov	r0, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	f7f7 f875 	bl	800029c <__adddf3>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4630      	mov	r0, r6
 80091b8:	4639      	mov	r1, r7
 80091ba:	f7f7 fb4f 	bl	800085c <__aeabi_ddiv>
 80091be:	f04f 0a00 	mov.w	sl, #0
 80091c2:	4604      	mov	r4, r0
 80091c4:	460d      	mov	r5, r1
 80091c6:	4622      	mov	r2, r4
 80091c8:	462b      	mov	r3, r5
 80091ca:	4620      	mov	r0, r4
 80091cc:	4629      	mov	r1, r5
 80091ce:	f7f7 fa1b 	bl	8000608 <__aeabi_dmul>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4680      	mov	r8, r0
 80091d8:	4689      	mov	r9, r1
 80091da:	f7f7 fa15 	bl	8000608 <__aeabi_dmul>
 80091de:	a374      	add	r3, pc, #464	; (adr r3, 80093b0 <atan+0x2b8>)
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	4606      	mov	r6, r0
 80091e6:	460f      	mov	r7, r1
 80091e8:	f7f7 fa0e 	bl	8000608 <__aeabi_dmul>
 80091ec:	a372      	add	r3, pc, #456	; (adr r3, 80093b8 <atan+0x2c0>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f853 	bl	800029c <__adddf3>
 80091f6:	4632      	mov	r2, r6
 80091f8:	463b      	mov	r3, r7
 80091fa:	f7f7 fa05 	bl	8000608 <__aeabi_dmul>
 80091fe:	a370      	add	r3, pc, #448	; (adr r3, 80093c0 <atan+0x2c8>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 f84a 	bl	800029c <__adddf3>
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	f7f7 f9fc 	bl	8000608 <__aeabi_dmul>
 8009210:	a36d      	add	r3, pc, #436	; (adr r3, 80093c8 <atan+0x2d0>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f7 f841 	bl	800029c <__adddf3>
 800921a:	4632      	mov	r2, r6
 800921c:	463b      	mov	r3, r7
 800921e:	f7f7 f9f3 	bl	8000608 <__aeabi_dmul>
 8009222:	a36b      	add	r3, pc, #428	; (adr r3, 80093d0 <atan+0x2d8>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f7 f838 	bl	800029c <__adddf3>
 800922c:	4632      	mov	r2, r6
 800922e:	463b      	mov	r3, r7
 8009230:	f7f7 f9ea 	bl	8000608 <__aeabi_dmul>
 8009234:	a368      	add	r3, pc, #416	; (adr r3, 80093d8 <atan+0x2e0>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f7 f82f 	bl	800029c <__adddf3>
 800923e:	4642      	mov	r2, r8
 8009240:	464b      	mov	r3, r9
 8009242:	f7f7 f9e1 	bl	8000608 <__aeabi_dmul>
 8009246:	a366      	add	r3, pc, #408	; (adr r3, 80093e0 <atan+0x2e8>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	4680      	mov	r8, r0
 800924e:	4689      	mov	r9, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 f9d8 	bl	8000608 <__aeabi_dmul>
 8009258:	a363      	add	r3, pc, #396	; (adr r3, 80093e8 <atan+0x2f0>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f7 f81b 	bl	8000298 <__aeabi_dsub>
 8009262:	4632      	mov	r2, r6
 8009264:	463b      	mov	r3, r7
 8009266:	f7f7 f9cf 	bl	8000608 <__aeabi_dmul>
 800926a:	a361      	add	r3, pc, #388	; (adr r3, 80093f0 <atan+0x2f8>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f812 	bl	8000298 <__aeabi_dsub>
 8009274:	4632      	mov	r2, r6
 8009276:	463b      	mov	r3, r7
 8009278:	f7f7 f9c6 	bl	8000608 <__aeabi_dmul>
 800927c:	a35e      	add	r3, pc, #376	; (adr r3, 80093f8 <atan+0x300>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f7 f809 	bl	8000298 <__aeabi_dsub>
 8009286:	4632      	mov	r2, r6
 8009288:	463b      	mov	r3, r7
 800928a:	f7f7 f9bd 	bl	8000608 <__aeabi_dmul>
 800928e:	a35c      	add	r3, pc, #368	; (adr r3, 8009400 <atan+0x308>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f7 f800 	bl	8000298 <__aeabi_dsub>
 8009298:	4632      	mov	r2, r6
 800929a:	463b      	mov	r3, r7
 800929c:	f7f7 f9b4 	bl	8000608 <__aeabi_dmul>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7f6 fff8 	bl	800029c <__adddf3>
 80092ac:	4622      	mov	r2, r4
 80092ae:	462b      	mov	r3, r5
 80092b0:	f7f7 f9aa 	bl	8000608 <__aeabi_dmul>
 80092b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	d14b      	bne.n	8009356 <atan+0x25e>
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f6 ffe9 	bl	8000298 <__aeabi_dsub>
 80092c6:	e72c      	b.n	8009122 <atan+0x2a>
 80092c8:	ee10 0a10 	vmov	r0, s0
 80092cc:	4b53      	ldr	r3, [pc, #332]	; (800941c <atan+0x324>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f6 ffe1 	bl	8000298 <__aeabi_dsub>
 80092d6:	4b51      	ldr	r3, [pc, #324]	; (800941c <atan+0x324>)
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	2200      	movs	r2, #0
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f6 ffdb 	bl	800029c <__adddf3>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4630      	mov	r0, r6
 80092ec:	4639      	mov	r1, r7
 80092ee:	f7f7 fab5 	bl	800085c <__aeabi_ddiv>
 80092f2:	f04f 0a01 	mov.w	sl, #1
 80092f6:	4604      	mov	r4, r0
 80092f8:	460d      	mov	r5, r1
 80092fa:	e764      	b.n	80091c6 <atan+0xce>
 80092fc:	4b49      	ldr	r3, [pc, #292]	; (8009424 <atan+0x32c>)
 80092fe:	429e      	cmp	r6, r3
 8009300:	da1d      	bge.n	800933e <atan+0x246>
 8009302:	ee10 0a10 	vmov	r0, s0
 8009306:	4b48      	ldr	r3, [pc, #288]	; (8009428 <atan+0x330>)
 8009308:	2200      	movs	r2, #0
 800930a:	4629      	mov	r1, r5
 800930c:	f7f6 ffc4 	bl	8000298 <__aeabi_dsub>
 8009310:	4b45      	ldr	r3, [pc, #276]	; (8009428 <atan+0x330>)
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	2200      	movs	r2, #0
 8009318:	4620      	mov	r0, r4
 800931a:	4629      	mov	r1, r5
 800931c:	f7f7 f974 	bl	8000608 <__aeabi_dmul>
 8009320:	4b3e      	ldr	r3, [pc, #248]	; (800941c <atan+0x324>)
 8009322:	2200      	movs	r2, #0
 8009324:	f7f6 ffba 	bl	800029c <__adddf3>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 fa94 	bl	800085c <__aeabi_ddiv>
 8009334:	f04f 0a02 	mov.w	sl, #2
 8009338:	4604      	mov	r4, r0
 800933a:	460d      	mov	r5, r1
 800933c:	e743      	b.n	80091c6 <atan+0xce>
 800933e:	462b      	mov	r3, r5
 8009340:	ee10 2a10 	vmov	r2, s0
 8009344:	4939      	ldr	r1, [pc, #228]	; (800942c <atan+0x334>)
 8009346:	2000      	movs	r0, #0
 8009348:	f7f7 fa88 	bl	800085c <__aeabi_ddiv>
 800934c:	f04f 0a03 	mov.w	sl, #3
 8009350:	4604      	mov	r4, r0
 8009352:	460d      	mov	r5, r1
 8009354:	e737      	b.n	80091c6 <atan+0xce>
 8009356:	4b36      	ldr	r3, [pc, #216]	; (8009430 <atan+0x338>)
 8009358:	4e36      	ldr	r6, [pc, #216]	; (8009434 <atan+0x33c>)
 800935a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800935e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009362:	e9da 2300 	ldrd	r2, r3, [sl]
 8009366:	f7f6 ff97 	bl	8000298 <__aeabi_dsub>
 800936a:	4622      	mov	r2, r4
 800936c:	462b      	mov	r3, r5
 800936e:	f7f6 ff93 	bl	8000298 <__aeabi_dsub>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	e9d6 0100 	ldrd	r0, r1, [r6]
 800937a:	f7f6 ff8d 	bl	8000298 <__aeabi_dsub>
 800937e:	f1bb 0f00 	cmp.w	fp, #0
 8009382:	4604      	mov	r4, r0
 8009384:	460d      	mov	r5, r1
 8009386:	f6bf aed6 	bge.w	8009136 <atan+0x3e>
 800938a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800938e:	461d      	mov	r5, r3
 8009390:	e6d1      	b.n	8009136 <atan+0x3e>
 8009392:	a51d      	add	r5, pc, #116	; (adr r5, 8009408 <atan+0x310>)
 8009394:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009398:	e6cd      	b.n	8009136 <atan+0x3e>
 800939a:	bf00      	nop
 800939c:	f3af 8000 	nop.w
 80093a0:	54442d18 	.word	0x54442d18
 80093a4:	bff921fb 	.word	0xbff921fb
 80093a8:	8800759c 	.word	0x8800759c
 80093ac:	7e37e43c 	.word	0x7e37e43c
 80093b0:	e322da11 	.word	0xe322da11
 80093b4:	3f90ad3a 	.word	0x3f90ad3a
 80093b8:	24760deb 	.word	0x24760deb
 80093bc:	3fa97b4b 	.word	0x3fa97b4b
 80093c0:	a0d03d51 	.word	0xa0d03d51
 80093c4:	3fb10d66 	.word	0x3fb10d66
 80093c8:	c54c206e 	.word	0xc54c206e
 80093cc:	3fb745cd 	.word	0x3fb745cd
 80093d0:	920083ff 	.word	0x920083ff
 80093d4:	3fc24924 	.word	0x3fc24924
 80093d8:	5555550d 	.word	0x5555550d
 80093dc:	3fd55555 	.word	0x3fd55555
 80093e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80093e4:	bfa2b444 	.word	0xbfa2b444
 80093e8:	52defd9a 	.word	0x52defd9a
 80093ec:	3fadde2d 	.word	0x3fadde2d
 80093f0:	af749a6d 	.word	0xaf749a6d
 80093f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80093f8:	fe231671 	.word	0xfe231671
 80093fc:	3fbc71c6 	.word	0x3fbc71c6
 8009400:	9998ebc4 	.word	0x9998ebc4
 8009404:	3fc99999 	.word	0x3fc99999
 8009408:	54442d18 	.word	0x54442d18
 800940c:	3ff921fb 	.word	0x3ff921fb
 8009410:	440fffff 	.word	0x440fffff
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	3fdbffff 	.word	0x3fdbffff
 800941c:	3ff00000 	.word	0x3ff00000
 8009420:	3ff2ffff 	.word	0x3ff2ffff
 8009424:	40038000 	.word	0x40038000
 8009428:	3ff80000 	.word	0x3ff80000
 800942c:	bff00000 	.word	0xbff00000
 8009430:	08009ca0 	.word	0x08009ca0
 8009434:	08009c80 	.word	0x08009c80

08009438 <fabs>:
 8009438:	ec51 0b10 	vmov	r0, r1, d0
 800943c:	ee10 2a10 	vmov	r2, s0
 8009440:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009444:	ec43 2b10 	vmov	d0, r2, r3
 8009448:	4770      	bx	lr

0800944a <atan2>:
 800944a:	f000 b82d 	b.w	80094a8 <__ieee754_atan2>

0800944e <sqrt>:
 800944e:	b538      	push	{r3, r4, r5, lr}
 8009450:	ed2d 8b02 	vpush	{d8}
 8009454:	ec55 4b10 	vmov	r4, r5, d0
 8009458:	f000 f8f0 	bl	800963c <__ieee754_sqrt>
 800945c:	4622      	mov	r2, r4
 800945e:	462b      	mov	r3, r5
 8009460:	4620      	mov	r0, r4
 8009462:	4629      	mov	r1, r5
 8009464:	eeb0 8a40 	vmov.f32	s16, s0
 8009468:	eef0 8a60 	vmov.f32	s17, s1
 800946c:	f7f7 fb66 	bl	8000b3c <__aeabi_dcmpun>
 8009470:	b990      	cbnz	r0, 8009498 <sqrt+0x4a>
 8009472:	2200      	movs	r2, #0
 8009474:	2300      	movs	r3, #0
 8009476:	4620      	mov	r0, r4
 8009478:	4629      	mov	r1, r5
 800947a:	f7f7 fb37 	bl	8000aec <__aeabi_dcmplt>
 800947e:	b158      	cbz	r0, 8009498 <sqrt+0x4a>
 8009480:	f7fc ff26 	bl	80062d0 <__errno>
 8009484:	2321      	movs	r3, #33	; 0x21
 8009486:	6003      	str	r3, [r0, #0]
 8009488:	2200      	movs	r2, #0
 800948a:	2300      	movs	r3, #0
 800948c:	4610      	mov	r0, r2
 800948e:	4619      	mov	r1, r3
 8009490:	f7f7 f9e4 	bl	800085c <__aeabi_ddiv>
 8009494:	ec41 0b18 	vmov	d8, r0, r1
 8009498:	eeb0 0a48 	vmov.f32	s0, s16
 800949c:	eef0 0a68 	vmov.f32	s1, s17
 80094a0:	ecbd 8b02 	vpop	{d8}
 80094a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080094a8 <__ieee754_atan2>:
 80094a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ac:	ec57 6b11 	vmov	r6, r7, d1
 80094b0:	4273      	negs	r3, r6
 80094b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009638 <__ieee754_atan2+0x190>
 80094b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80094ba:	4333      	orrs	r3, r6
 80094bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80094c0:	4573      	cmp	r3, lr
 80094c2:	ec51 0b10 	vmov	r0, r1, d0
 80094c6:	ee11 8a10 	vmov	r8, s2
 80094ca:	d80a      	bhi.n	80094e2 <__ieee754_atan2+0x3a>
 80094cc:	4244      	negs	r4, r0
 80094ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094d2:	4304      	orrs	r4, r0
 80094d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80094d8:	4574      	cmp	r4, lr
 80094da:	ee10 9a10 	vmov	r9, s0
 80094de:	468c      	mov	ip, r1
 80094e0:	d907      	bls.n	80094f2 <__ieee754_atan2+0x4a>
 80094e2:	4632      	mov	r2, r6
 80094e4:	463b      	mov	r3, r7
 80094e6:	f7f6 fed9 	bl	800029c <__adddf3>
 80094ea:	ec41 0b10 	vmov	d0, r0, r1
 80094ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80094f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094fa:	4334      	orrs	r4, r6
 80094fc:	d103      	bne.n	8009506 <__ieee754_atan2+0x5e>
 80094fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009502:	f7ff bdf9 	b.w	80090f8 <atan>
 8009506:	17bc      	asrs	r4, r7, #30
 8009508:	f004 0402 	and.w	r4, r4, #2
 800950c:	ea53 0909 	orrs.w	r9, r3, r9
 8009510:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009514:	d107      	bne.n	8009526 <__ieee754_atan2+0x7e>
 8009516:	2c02      	cmp	r4, #2
 8009518:	d060      	beq.n	80095dc <__ieee754_atan2+0x134>
 800951a:	2c03      	cmp	r4, #3
 800951c:	d1e5      	bne.n	80094ea <__ieee754_atan2+0x42>
 800951e:	a142      	add	r1, pc, #264	; (adr r1, 8009628 <__ieee754_atan2+0x180>)
 8009520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009524:	e7e1      	b.n	80094ea <__ieee754_atan2+0x42>
 8009526:	ea52 0808 	orrs.w	r8, r2, r8
 800952a:	d106      	bne.n	800953a <__ieee754_atan2+0x92>
 800952c:	f1bc 0f00 	cmp.w	ip, #0
 8009530:	da5f      	bge.n	80095f2 <__ieee754_atan2+0x14a>
 8009532:	a13f      	add	r1, pc, #252	; (adr r1, 8009630 <__ieee754_atan2+0x188>)
 8009534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009538:	e7d7      	b.n	80094ea <__ieee754_atan2+0x42>
 800953a:	4572      	cmp	r2, lr
 800953c:	d10f      	bne.n	800955e <__ieee754_atan2+0xb6>
 800953e:	4293      	cmp	r3, r2
 8009540:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009544:	d107      	bne.n	8009556 <__ieee754_atan2+0xae>
 8009546:	2c02      	cmp	r4, #2
 8009548:	d84c      	bhi.n	80095e4 <__ieee754_atan2+0x13c>
 800954a:	4b35      	ldr	r3, [pc, #212]	; (8009620 <__ieee754_atan2+0x178>)
 800954c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009550:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009554:	e7c9      	b.n	80094ea <__ieee754_atan2+0x42>
 8009556:	2c02      	cmp	r4, #2
 8009558:	d848      	bhi.n	80095ec <__ieee754_atan2+0x144>
 800955a:	4b32      	ldr	r3, [pc, #200]	; (8009624 <__ieee754_atan2+0x17c>)
 800955c:	e7f6      	b.n	800954c <__ieee754_atan2+0xa4>
 800955e:	4573      	cmp	r3, lr
 8009560:	d0e4      	beq.n	800952c <__ieee754_atan2+0x84>
 8009562:	1a9b      	subs	r3, r3, r2
 8009564:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009568:	ea4f 5223 	mov.w	r2, r3, asr #20
 800956c:	da1e      	bge.n	80095ac <__ieee754_atan2+0x104>
 800956e:	2f00      	cmp	r7, #0
 8009570:	da01      	bge.n	8009576 <__ieee754_atan2+0xce>
 8009572:	323c      	adds	r2, #60	; 0x3c
 8009574:	db1e      	blt.n	80095b4 <__ieee754_atan2+0x10c>
 8009576:	4632      	mov	r2, r6
 8009578:	463b      	mov	r3, r7
 800957a:	f7f7 f96f 	bl	800085c <__aeabi_ddiv>
 800957e:	ec41 0b10 	vmov	d0, r0, r1
 8009582:	f7ff ff59 	bl	8009438 <fabs>
 8009586:	f7ff fdb7 	bl	80090f8 <atan>
 800958a:	ec51 0b10 	vmov	r0, r1, d0
 800958e:	2c01      	cmp	r4, #1
 8009590:	d013      	beq.n	80095ba <__ieee754_atan2+0x112>
 8009592:	2c02      	cmp	r4, #2
 8009594:	d015      	beq.n	80095c2 <__ieee754_atan2+0x11a>
 8009596:	2c00      	cmp	r4, #0
 8009598:	d0a7      	beq.n	80094ea <__ieee754_atan2+0x42>
 800959a:	a319      	add	r3, pc, #100	; (adr r3, 8009600 <__ieee754_atan2+0x158>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f7f6 fe7a 	bl	8000298 <__aeabi_dsub>
 80095a4:	a318      	add	r3, pc, #96	; (adr r3, 8009608 <__ieee754_atan2+0x160>)
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	e014      	b.n	80095d6 <__ieee754_atan2+0x12e>
 80095ac:	a118      	add	r1, pc, #96	; (adr r1, 8009610 <__ieee754_atan2+0x168>)
 80095ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095b2:	e7ec      	b.n	800958e <__ieee754_atan2+0xe6>
 80095b4:	2000      	movs	r0, #0
 80095b6:	2100      	movs	r1, #0
 80095b8:	e7e9      	b.n	800958e <__ieee754_atan2+0xe6>
 80095ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095be:	4619      	mov	r1, r3
 80095c0:	e793      	b.n	80094ea <__ieee754_atan2+0x42>
 80095c2:	a30f      	add	r3, pc, #60	; (adr r3, 8009600 <__ieee754_atan2+0x158>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f6 fe66 	bl	8000298 <__aeabi_dsub>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	a10d      	add	r1, pc, #52	; (adr r1, 8009608 <__ieee754_atan2+0x160>)
 80095d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d6:	f7f6 fe5f 	bl	8000298 <__aeabi_dsub>
 80095da:	e786      	b.n	80094ea <__ieee754_atan2+0x42>
 80095dc:	a10a      	add	r1, pc, #40	; (adr r1, 8009608 <__ieee754_atan2+0x160>)
 80095de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e2:	e782      	b.n	80094ea <__ieee754_atan2+0x42>
 80095e4:	a10c      	add	r1, pc, #48	; (adr r1, 8009618 <__ieee754_atan2+0x170>)
 80095e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ea:	e77e      	b.n	80094ea <__ieee754_atan2+0x42>
 80095ec:	2000      	movs	r0, #0
 80095ee:	2100      	movs	r1, #0
 80095f0:	e77b      	b.n	80094ea <__ieee754_atan2+0x42>
 80095f2:	a107      	add	r1, pc, #28	; (adr r1, 8009610 <__ieee754_atan2+0x168>)
 80095f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095f8:	e777      	b.n	80094ea <__ieee754_atan2+0x42>
 80095fa:	bf00      	nop
 80095fc:	f3af 8000 	nop.w
 8009600:	33145c07 	.word	0x33145c07
 8009604:	3ca1a626 	.word	0x3ca1a626
 8009608:	54442d18 	.word	0x54442d18
 800960c:	400921fb 	.word	0x400921fb
 8009610:	54442d18 	.word	0x54442d18
 8009614:	3ff921fb 	.word	0x3ff921fb
 8009618:	54442d18 	.word	0x54442d18
 800961c:	3fe921fb 	.word	0x3fe921fb
 8009620:	08009cc0 	.word	0x08009cc0
 8009624:	08009cd8 	.word	0x08009cd8
 8009628:	54442d18 	.word	0x54442d18
 800962c:	c00921fb 	.word	0xc00921fb
 8009630:	54442d18 	.word	0x54442d18
 8009634:	bff921fb 	.word	0xbff921fb
 8009638:	7ff00000 	.word	0x7ff00000

0800963c <__ieee754_sqrt>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	ec55 4b10 	vmov	r4, r5, d0
 8009644:	4e55      	ldr	r6, [pc, #340]	; (800979c <__ieee754_sqrt+0x160>)
 8009646:	43ae      	bics	r6, r5
 8009648:	ee10 0a10 	vmov	r0, s0
 800964c:	ee10 3a10 	vmov	r3, s0
 8009650:	462a      	mov	r2, r5
 8009652:	4629      	mov	r1, r5
 8009654:	d110      	bne.n	8009678 <__ieee754_sqrt+0x3c>
 8009656:	ee10 2a10 	vmov	r2, s0
 800965a:	462b      	mov	r3, r5
 800965c:	f7f6 ffd4 	bl	8000608 <__aeabi_dmul>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4620      	mov	r0, r4
 8009666:	4629      	mov	r1, r5
 8009668:	f7f6 fe18 	bl	800029c <__adddf3>
 800966c:	4604      	mov	r4, r0
 800966e:	460d      	mov	r5, r1
 8009670:	ec45 4b10 	vmov	d0, r4, r5
 8009674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009678:	2d00      	cmp	r5, #0
 800967a:	dc10      	bgt.n	800969e <__ieee754_sqrt+0x62>
 800967c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009680:	4330      	orrs	r0, r6
 8009682:	d0f5      	beq.n	8009670 <__ieee754_sqrt+0x34>
 8009684:	b15d      	cbz	r5, 800969e <__ieee754_sqrt+0x62>
 8009686:	ee10 2a10 	vmov	r2, s0
 800968a:	462b      	mov	r3, r5
 800968c:	ee10 0a10 	vmov	r0, s0
 8009690:	f7f6 fe02 	bl	8000298 <__aeabi_dsub>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	f7f7 f8e0 	bl	800085c <__aeabi_ddiv>
 800969c:	e7e6      	b.n	800966c <__ieee754_sqrt+0x30>
 800969e:	1512      	asrs	r2, r2, #20
 80096a0:	d074      	beq.n	800978c <__ieee754_sqrt+0x150>
 80096a2:	07d4      	lsls	r4, r2, #31
 80096a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80096a8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80096ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80096b0:	bf5e      	ittt	pl
 80096b2:	0fda      	lsrpl	r2, r3, #31
 80096b4:	005b      	lslpl	r3, r3, #1
 80096b6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80096ba:	2400      	movs	r4, #0
 80096bc:	0fda      	lsrs	r2, r3, #31
 80096be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80096c2:	107f      	asrs	r7, r7, #1
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	2516      	movs	r5, #22
 80096c8:	4620      	mov	r0, r4
 80096ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80096ce:	1886      	adds	r6, r0, r2
 80096d0:	428e      	cmp	r6, r1
 80096d2:	bfde      	ittt	le
 80096d4:	1b89      	suble	r1, r1, r6
 80096d6:	18b0      	addle	r0, r6, r2
 80096d8:	18a4      	addle	r4, r4, r2
 80096da:	0049      	lsls	r1, r1, #1
 80096dc:	3d01      	subs	r5, #1
 80096de:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80096e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80096e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096ea:	d1f0      	bne.n	80096ce <__ieee754_sqrt+0x92>
 80096ec:	462a      	mov	r2, r5
 80096ee:	f04f 0e20 	mov.w	lr, #32
 80096f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80096f6:	4281      	cmp	r1, r0
 80096f8:	eb06 0c05 	add.w	ip, r6, r5
 80096fc:	dc02      	bgt.n	8009704 <__ieee754_sqrt+0xc8>
 80096fe:	d113      	bne.n	8009728 <__ieee754_sqrt+0xec>
 8009700:	459c      	cmp	ip, r3
 8009702:	d811      	bhi.n	8009728 <__ieee754_sqrt+0xec>
 8009704:	f1bc 0f00 	cmp.w	ip, #0
 8009708:	eb0c 0506 	add.w	r5, ip, r6
 800970c:	da43      	bge.n	8009796 <__ieee754_sqrt+0x15a>
 800970e:	2d00      	cmp	r5, #0
 8009710:	db41      	blt.n	8009796 <__ieee754_sqrt+0x15a>
 8009712:	f100 0801 	add.w	r8, r0, #1
 8009716:	1a09      	subs	r1, r1, r0
 8009718:	459c      	cmp	ip, r3
 800971a:	bf88      	it	hi
 800971c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009720:	eba3 030c 	sub.w	r3, r3, ip
 8009724:	4432      	add	r2, r6
 8009726:	4640      	mov	r0, r8
 8009728:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800972c:	f1be 0e01 	subs.w	lr, lr, #1
 8009730:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009734:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009738:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800973c:	d1db      	bne.n	80096f6 <__ieee754_sqrt+0xba>
 800973e:	430b      	orrs	r3, r1
 8009740:	d006      	beq.n	8009750 <__ieee754_sqrt+0x114>
 8009742:	1c50      	adds	r0, r2, #1
 8009744:	bf13      	iteet	ne
 8009746:	3201      	addne	r2, #1
 8009748:	3401      	addeq	r4, #1
 800974a:	4672      	moveq	r2, lr
 800974c:	f022 0201 	bicne.w	r2, r2, #1
 8009750:	1063      	asrs	r3, r4, #1
 8009752:	0852      	lsrs	r2, r2, #1
 8009754:	07e1      	lsls	r1, r4, #31
 8009756:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800975a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800975e:	bf48      	it	mi
 8009760:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009764:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009768:	4614      	mov	r4, r2
 800976a:	e781      	b.n	8009670 <__ieee754_sqrt+0x34>
 800976c:	0ad9      	lsrs	r1, r3, #11
 800976e:	3815      	subs	r0, #21
 8009770:	055b      	lsls	r3, r3, #21
 8009772:	2900      	cmp	r1, #0
 8009774:	d0fa      	beq.n	800976c <__ieee754_sqrt+0x130>
 8009776:	02cd      	lsls	r5, r1, #11
 8009778:	d50a      	bpl.n	8009790 <__ieee754_sqrt+0x154>
 800977a:	f1c2 0420 	rsb	r4, r2, #32
 800977e:	fa23 f404 	lsr.w	r4, r3, r4
 8009782:	1e55      	subs	r5, r2, #1
 8009784:	4093      	lsls	r3, r2
 8009786:	4321      	orrs	r1, r4
 8009788:	1b42      	subs	r2, r0, r5
 800978a:	e78a      	b.n	80096a2 <__ieee754_sqrt+0x66>
 800978c:	4610      	mov	r0, r2
 800978e:	e7f0      	b.n	8009772 <__ieee754_sqrt+0x136>
 8009790:	0049      	lsls	r1, r1, #1
 8009792:	3201      	adds	r2, #1
 8009794:	e7ef      	b.n	8009776 <__ieee754_sqrt+0x13a>
 8009796:	4680      	mov	r8, r0
 8009798:	e7bd      	b.n	8009716 <__ieee754_sqrt+0xda>
 800979a:	bf00      	nop
 800979c:	7ff00000 	.word	0x7ff00000

080097a0 <_init>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr

080097ac <_fini>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr
